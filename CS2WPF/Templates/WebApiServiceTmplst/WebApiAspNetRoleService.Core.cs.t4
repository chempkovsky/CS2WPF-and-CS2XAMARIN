<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
#nullable disable
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using LinqKit;

<#

    string GetAllMethodName         = "getall";
    string GetWithFilterMethodName  = "getwithfilter";
    string GetOneMethodName         = "getone";
    string UpdateOneMethodName      = "updateone";
    string AddOneMethodName         = "addone";
    string DeleteOneMethodName      = "deleteone";
    string GetOneByMethodNamePrefix = "getoneby";
    string GetManyByRepPrimMethodNamePrefix = "getmanybyrepprim";
    string GetManyByRepUnqMethodNamePrefix  = "getmanybyrepunq";




    string OperatorSufix = "Oprtr";
    string webApiServiceNameSpace = GetDestinationNameSpace(Model);
    string rootEntityNameSpace = GetRootEntityNameSpace(Model);
    string dbContextNameSpace = GetDbContextNameSpace(Context);
    string viewModelNameSpace = GetViewModelNameSpace(Model);
    string webApiServicePrefix = GetWebApiServicePrefix(Model);
    string webApiRoutePrefix =  GetWebApiRoutePrefix(Model);


    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = new List<ModelViewUniqueKeyOfVwSerializable>();
    {
        ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
        if (pk != null) uniqueKeys.Add(pk);
        
        GetModelUniqueKeys(Model, uniqueKeys);
    }



#>
<# if (!string.IsNullOrEmpty(dbContextNameSpace)) {
 if (!string.Equals(dbContextNameSpace, webApiServiceNameSpace)) { #>
using <#= dbContextNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(viewModelNameSpace)) {
 if (!string.Equals(viewModelNameSpace, webApiServiceNameSpace)) {#>
using <#= viewModelNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(rootEntityNameSpace)) {
 if (!string.Equals(rootEntityNameSpace, webApiServiceNameSpace)) {#>
using <#= rootEntityNameSpace #>;
<# }} #>

namespace <#= webApiServiceNameSpace #> {

    // [RoutePrefix("<#= webApiServicePrefix #>")]
    [Route("<#= webApiRoutePrefix #>")]
    public class <#= Model.WebApiServiceName #>: ControllerBase
    {
        private int defaultPageSize = 50;
        private int minPageSize = 5;
        private int maxPageSize = 150;

        private readonly RoleManager<IdentityRole> _roleManager;
        public RoleManager<IdentityRole> RoleManager
        {
            get
            {
                return _roleManager;
            }
        }
        public <#= Model.WebApiServiceName #>(RoleManager<IdentityRole> roleManager)
        {
            _roleManager = roleManager;
        }

<# 
    if (Model.IsWebApiSelectAll) { 
#>
        [HttpGet]
        [Route("[controller]/<#= GetAllMethodName #>")]
        public IQueryable<<#=Model.ViewName#>> <#= GetAllMethodName #>()
        {
            return RoleManager.Roles
                    .Select(itm => new <#= Model.ViewName #>() {
<#
                int cnt = Model.ScalarProperties.Count-1;
                for(int i = 0; i < cnt; i++) {
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[i], Model) #> = itm.<#= GetForeignKeyNameChain(Model.ScalarProperties[i].ForeignKeyNameChain) #><#= Model.ScalarProperties[i].OriginalPropertyName #>,
<#
                }
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model) #> = itm.<#= GetForeignKeyNameChain(Model.ScalarProperties[cnt].ForeignKeyNameChain) #><#= Model.ScalarProperties[cnt].OriginalPropertyName #>
                            });

        } // the end of Get()-method
<#
    }
#>


<# 
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
        [HttpGet]
        [Route("[controller]/<#= GetWithFilterMethodName #>")]
        public ActionResult<<#= Model.PageViewName #>> <#= GetWithFilterMethodName #>(<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (prop.IsUsedByfilter) { 
#>                
            [FromQuery] <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>, 
            [FromQuery] string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
            }
        } 
#>                 
            [FromQuery] string[] orderby = null, 
            [FromQuery] int? page =null, 
            [FromQuery] int? pagesize = null)
        {

            string[] EqualOperators = { "eq", "lk" };
            string[] ExpectedOperators = { "eq", "lk", "gt", "lt", "ne" };

            int currentPageSize = this.defaultPageSize;
            int currentPage = 1;
            if (pagesize.HasValue) {
                currentPageSize = pagesize.Value;
                if ((currentPageSize < this.minPageSize) || (currentPageSize > this.maxPageSize)) {
                    currentPageSize = defaultPageSize;
                }
            }
            if (page.HasValue) {
                currentPage = page.Value+1;
                if (currentPage < 1) {
                    currentPage = 1;
                }
            }
            IQueryable<IdentityRole> query = RoleManager.Roles;
<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(!prop.IsUsedByfilter) continue;
#>
            int _<#= GetFilterPropertyName(prop, Model) #> = <#= GetFilterPropertyName(prop, Model) #> == null ? 0 : <#= GetFilterPropertyName(prop, Model) #>.Length;
            if (_<#= GetFilterPropertyName(prop, Model) #> > 0) {
                int _<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #> = <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #> == null ? 0 : <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>.Length;
                for(int i = 0; i < _<#= GetFilterPropertyName(prop, Model) #>; i++) {
                    string op_<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #> = (i >= _<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>) ? "eq" : (<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i] == null) ? "eq" : <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i];
                    var _tmp<#= GetFilterPropertyName(prop, Model) #> = <#= GetFilterPropertyName(prop, Model) #>[i];
<#
            if (IsEntityTypeString(prop)) {
#>
                    switch(op_<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>) {
                        case "eq": 
                            query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(_tmp<#= GetFilterPropertyName(prop, Model) #>));
                            break;
                        case "lk":
                            query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(_tmp<#= GetFilterPropertyName(prop, Model) #>));
                            break;
                        case "gt":
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#>.CompareTo(_tmp<#= GetFilterPropertyName(prop, Model) #>) >= 0));
                            break;
                        case "lt": 
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#>.CompareTo(_tmp<#= GetFilterPropertyName(prop, Model) #>) <= 0));
                            break;
                        case "ne":
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#>.CompareTo(_tmp<#= GetFilterPropertyName(prop, Model) #>) != 0));
                            break;
                    }
<#
            } else {
#>
                    switch(op_<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>) {
                        case "eq": 
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> == _tmp<#= GetFilterPropertyName(prop, Model) #>));
                            break;
                        case "lk":
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> == _tmp<#= GetFilterPropertyName(prop, Model) #>));
                            break;
                        case "gt":
<#
                if(IsEntityTypeGuid(prop)) {
#>
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> == _tmp<#= GetFilterPropertyName(prop, Model) #>));
<#
                } else {
#>
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> >= _tmp<#= GetFilterPropertyName(prop, Model) #>));
<#
                }
#>
                            break;
                        case "lt": 
<#
                if(IsEntityTypeGuid(prop)) {
#>
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> == _tmp<#= GetFilterPropertyName(prop, Model) #>));
<#
                } else {
#>
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> <= _tmp<#= GetFilterPropertyName(prop, Model) #>));
<#
                }
#>
                            break;
                        case "ne":
                            query = query.Where(p => (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> != _tmp<#= GetFilterPropertyName(prop, Model) #>));
                            break;
                    }
<#
            }
#>
                }
            }
<#
    }
#>
                int totals = query.Count();
                int pageCount = ((totals > 0) ? ((int)Math.Ceiling((double)totals / (double)currentPageSize)) : 0);
                List<string> currentOrderBy = null;
                if (orderby != null) {
                    if (orderby.Length > 0) {
                        currentOrderBy = orderby.Where(s => (!string.IsNullOrEmpty(s))).ToList();
                    }
                }   
                bool isFirstTime = true; 
                IOrderedQueryable<IdentityRole> orderedQuery = null;
                if(currentOrderBy != null) {
                    List<string> wasInUseOrderBy = new List<string>();
                    foreach(string propName in currentOrderBy) {
                        string lowerCaseStr = propName.ToLower();
                        if (wasInUseOrderBy.Contains(lowerCaseStr)) {
                            continue;
                        }
                        switch(lowerCaseStr) {
<#  
        foreach(ModelViewPropertyOfVwSerializable currProp in Model.ScalarProperties) {
            if (!currProp.IsUsedBySorting) continue;
#>
                            case "<#= GetLowerCasePropertyName(currProp, Model)#>" :
                                if(isFirstTime) { 
                                    orderedQuery = query.OrderBy(p => p.<#= GetForeignKeyNameChainAndProp(currProp, Model)#>);
                                    isFirstTime = false;
                                } else {
                                    orderedQuery = orderedQuery.ThenBy(p => p.<#= GetForeignKeyNameChainAndProp(currProp, Model)#>);
                                }
                                wasInUseOrderBy.Add("<#= GetLowerCasePropertyName(currProp, Model)#>");
                                wasInUseOrderBy.Add("-<#= GetLowerCasePropertyName(currProp, Model)#>");
                                break;
                            case "-<#= GetLowerCasePropertyName(currProp, Model)#>" :
                                if(isFirstTime) {
                                    orderedQuery = query.OrderByDescending(p => p.<#= GetForeignKeyNameChainAndProp(currProp, Model)#>);
                                    isFirstTime = false;
                                } else {
                                    orderedQuery = orderedQuery.ThenByDescending(p => p.<#= GetForeignKeyNameChainAndProp(currProp, Model)#>);
                                }
                                wasInUseOrderBy.Add("<#= GetLowerCasePropertyName(currProp, Model)#>");
                                wasInUseOrderBy.Add("-<#= GetLowerCasePropertyName(currProp, Model)#>");
                                break;
<#
        }
#>
                                default:
                                    break;
                        }
                    }
                }
                if(isFirstTime) {                
                    orderedQuery = query.OrderBy(p => p.<#= GetFirstPrimKeyProperty(Model)#>);
                } // totals pageCount currentPageSize
                <#= Model.PageViewName #> resultObject = new <#= Model.PageViewName #>() {
                    page = (currentPage > 0) ? (currentPage-1) : currentPage,
                    pagesize = currentPageSize,
                    pagecount = pageCount,
                    total = totals
                };
                resultObject.items = orderedQuery.Skip((currentPage - 1) * currentPageSize).Take(currentPageSize).Select(itm => new <#= Model.ViewName #>() {
<#
        int cnt = Model.ScalarProperties.Count-1;
        for(int i = 0; i < cnt; i++) {
#>
                            <#=            GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#=  GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
        }
#>
                            <#=            GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt], Model) #>
                            }).ToList();
                return Ok(resultObject);
        } // the end of GetWithFilter()-method
<#
    }
#>

<# 
    if (Model.IsWebApiSelectOneByPrimarykey) { 
        foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) {
            List<ModelViewPropertyOfVwSerializable> primKeys = null;
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, pk, out indErrrorText);
            string localRouteName = GetOneMethodName;
            string localRouteManyName = GetManyByRepPrimMethodNamePrefix;
            if (!pk.IsPrimary) {
                    
                localRouteName = GetOneByMethodNamePrefix + pk.UniqueKeyName;
                localRouteManyName = GetManyByRepUnqMethodNamePrefix + pk.UniqueKeyName;
            }
            if (!indIsCorrect) {

#>
//
// Could not generate <#= localRouteName #>
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//
<#
            } else {
                primKeys = pk.UniqueKeyProperties;
#>
        [HttpGet]
        [Route("[controller]/<#= localRouteName #>")]
        public ActionResult<<#= Model.ViewName #>> <#= localRouteName #>(<#
        int counter = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter > 0) { 
#>                
            ,[FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model) #>
<#
            } else { 
#>                
             [FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model) #>
<#
                counter++;
            }
        } #>                
             )
        {
            <#= Model.ViewName #> result = RoleManager.Roles
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
            ModelViewEntityPropertySerializable entityProp =  GetRootEntityProperty(primKeys[pkId], Model);
            
#>
                    .Where(p => p.<#= entityProp.OriginalPropertyName #> == <#= GetFilterPropertyName(primKeys[pkId], Model) #>)
<#
        }
#>
                    .Select(itm => new <#= Model.ViewName #>() {
<#
        int cnt = Model.ScalarProperties.Count-1;
        for(int i = 0; i < cnt; i++) {
#>
                            <#=GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
        } 
#>
                            <#=GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt], Model) #>
                    }).FirstOrDefault();
            if (result == null)
            {
                return NotFound();
            }
            return Ok(result);
        } // the end of public GetOne()-method


        [HttpGet]
        [Route("[controller]/<#= localRouteManyName #>")]
        public ActionResult<<#= Model.PageViewName #>> <#= localRouteManyName #>(
<#
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
#>                
             [FromQuery] <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>,
             [FromQuery] string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
        } 
        bool hasForeign = false;
        bool hasForeignUnderPrim = false;
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(!prop.IsUsedByfilter) continue;
            if (primKeys.Any(p => p == prop)) {
                if(IsUsedByForeignKey(prop, Model)) hasForeignUnderPrim = true;
                continue;
            }
            if(!IsUsedByForeignKey(prop, Model)) continue;
            hasForeign = true;
#>                
             [FromQuery] <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>,
             [FromQuery] string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
        }
#>            
            [FromQuery] string[] orderby = null, 
            [FromQuery] int? page =null, 
            [FromQuery] int? pagesize = null)
        {
            int currentPageSize = this.defaultPageSize;
            int currentPage = 1;
            if (pagesize.HasValue) {
                currentPageSize = pagesize.Value;
                if ((currentPageSize < this.minPageSize) || (currentPageSize > this.maxPageSize)) {
                    currentPageSize = defaultPageSize;
                }
            }
            if (page.HasValue) {
                currentPage = page.Value+1;
                if (currentPage < 1) {
                    currentPage = 1;
                }
            }

<#
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
#>                
            int _<#= GetFilterPropertyName(prop, Model) #> = <#= GetFilterPropertyName(prop, Model) #> == null ? 0 : <#= GetFilterPropertyName(prop, Model) #>.Length;
            int _<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #> = <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #> == null ? 0 : <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>.Length;
<#
            if(IsUsedByForeignKey(prop, Model)) {
#>
            int _appld<#= GetFilterPropertyName(prop, Model) #> = 0;
<#
            }
        } 
#>                
            IQueryable<IdentityRole> query = RoleManager.Roles;
            var _outer = PredicateBuilder.New<IdentityRole>(false);
            bool isOuterModified = false;
            if ( _<#= GetFilterPropertyName(primKeys[0], Model) #> > 0 ) {
                bool isLkOp = false;
                for(int i = 0; i < _<#= GetFilterPropertyName(primKeys[0], Model) #>; i++) {
                    var _inner = PredicateBuilder.New<IdentityRole>(true);
<#
        for(int cnt02 = 0; cnt02 < primKeys.Count; cnt02++) {
            ModelViewPropertyOfVwSerializable prop = primKeys[cnt02];
            bool propIsString = prop.UnderlyingTypeName.Equals("System.String");
            if(cnt02 > 0) {
#>                
                    if (_<#= GetFilterPropertyName(prop, Model) #> <= i) {
                        _outer = _outer.Or(_inner);
                        isOuterModified = true;
                        continue;
                    }
<#
            }
#>
                    isLkOp = false;
                    if(i < _<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>) {
                        isLkOp = <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i] == "lk";
                    }
<#
            if (prop.IsRequired) {
#>                
                    if (<#= GetFilterPropertyName(prop, Model) #>[i] == null) // continue; (required prop == null) returns false
                    {
<#
            if (cnt02 > 0) {
#>
                        if(i < 1) {
                            _outer = _outer.Or(_inner);
                            isOuterModified = true;
                        }
<#
            }
#>
                        continue;
                    }
                    var _tmp<#= GetFilterPropertyName(prop, Model) #> = <#= GetFilterPropertyName(prop, Model) #>[i];
<#
                    if(propIsString) {
#>                       
                    if(isLkOp) { _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #>.StartsWith(_tmp<#= GetFilterPropertyName(prop, Model) #>)); }
                    else { _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #> == _tmp<#= GetFilterPropertyName(prop, Model) #>); }
<#
                    } else {
#>                        
                    _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #> == _tmp<#= GetFilterPropertyName(prop, Model) #>);
<#
                    }
                    if(IsUsedByForeignKey(prop, Model)) {
#>
                    _appld<#= GetFilterPropertyName(prop, Model) #>++;
<#
                    }
            } else {
#>                
                    if (<#= GetFilterPropertyName(prop, Model) #>[i] == null) {
                        _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #> == null);
                    } else {
                        var _tmp<#= GetFilterPropertyName(prop, Model) #> = <#= GetFilterPropertyName(prop, Model) #>[i];
<#
                    if(propIsString) {
#>                       
                        if(isLkOp) { _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #>.StartsWith(_tmp<#= GetFilterPropertyName(prop, Model) #>)); }
                        else { _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #> == _tmp<#= GetFilterPropertyName(prop, Model) #>); }
<#
                    } else {
#>                        
                        _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #> == _tmp<#= GetFilterPropertyName(prop, Model) #>);
<#
                    }
                    if(IsUsedByForeignKey(prop, Model)) {
#>
                        _appld<#= GetFilterPropertyName(prop, Model) #>++;
<#
                    }
#>                        
                    }
<#
            }
        } 
#>                
                    _outer = _outer.Or(_inner);
                    isOuterModified = true;
                }
            }
<#
        if(hasForeign || hasForeignUnderPrim) {
#>
            bool isForeignAdded = false;
            var _outerAnd = PredicateBuilder.New<IdentityRole>(true);
<#
        }
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(!prop.IsUsedByfilter) continue;
            // if (primKeys.Any(p => p == prop)) continue;
            if(!IsUsedByForeignKey(prop, Model)) continue;
            string fkOriginalPropertyName = GetFkOriginalPropertyName(prop, Model);
#>                
             if(<#= GetFilterPropertyName(prop, Model) #> != null) {
                if(<#= GetFilterPropertyName(prop, Model) #>.Length > 0) {
                    for(int i = 0; i < <#= GetFilterPropertyName(prop, Model) #>.Length; i++) {
<#
            if(IsUsedByForeignKey(prop, Model) && primKeys.Any(p => p == prop)) {
#>
                        if(i < _appld<#= GetFilterPropertyName(prop, Model) #>) continue; // skip props which are used by the PrimKey
<#
            }
            if (prop.IsRequired) {
#>                
                        if (<#= GetFilterPropertyName(prop, Model) #>[i] == null) continue; // (required prop == null) returns false
                        var _tmp<#= GetFilterPropertyName(prop, Model) #> = <#= GetFilterPropertyName(prop, Model) #>[i];
                        _outerAnd = _outerAnd.And(p => p.<#= fkOriginalPropertyName #> == _tmp<#= GetFilterPropertyName(prop, Model) #>);
<#
                if(hasForeign || hasForeignUnderPrim) {
#>
                        isForeignAdded = true;
<#
                }
            } else {
#>                
                        if (<#= GetFilterPropertyName(prop, Model) #>[i] == null) {
                            _outerAnd = _outerAnd.And(p => p.<#= fkOriginalPropertyName #> == null);
                        } else {
                            var _tmp<#= GetFilterPropertyName(prop, Model) #> = <#= GetFilterPropertyName(prop, Model) #>[i];
                            _outerAnd = _outerAnd.And(p => p.<#= fkOriginalPropertyName #> == _tmp<#= GetFilterPropertyName(prop, Model) #>);
                        }
<#
                if(hasForeign || hasForeignUnderPrim) {
#>
                        isForeignAdded = true;
<#
                }
            }
#>
                    }
                }
             }
<#
        }
        if(hasForeign || hasForeignUnderPrim) {
#>
            if(isForeignAdded) {
                if(isOuterModified) {
                    _outer = _outerAnd.And(_outer);
                } else {
                    _outer = _outerAnd;
                }
                isOuterModified = true;
            }
<#
        }
#>
            if(isOuterModified) {
                query = query.AsExpandable().Where(_outer); 
            }

            int totals = query.Count();
            int pageCount = ((totals > 0) ? ((int)Math.Ceiling((double)totals / (double)currentPageSize)) : 0);
            IOrderedQueryable<IdentityRole> orderedQuery = null;
<#
        if(hasForeign || hasForeignUnderPrim) {
#>
            if(!isForeignAdded)
<#
        }
#>
            {

                orderedQuery = query.OrderBy(p => p.<#= primKeys[0].OriginalPropertyName #>);
<#
        for(int i = 1; i < primKeys.Count; i++) {
#>                
                orderedQuery = orderedQuery.ThenBy(p => p.<#= primKeys[i].OriginalPropertyName #>);
<#
        } 
#>              
                query = orderedQuery;
            }  
            <#= Model.PageViewName #> resultObject = new <#= Model.PageViewName #>() {
                page = (currentPage > 0) ? (currentPage-1) : currentPage,
                pagesize = currentPageSize,
                pagecount = pageCount,
                total = totals
            };
            resultObject.items = query.Skip((currentPage - 1) * currentPageSize).Take(currentPageSize).Select(itm => new <#= Model.ViewName #>() {
<#
        int cnt01 = Model.ScalarProperties.Count-1;
        for(int i = 0; i < cnt01; i++) {
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#=  GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
        }
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[cnt01], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt01], Model) #>
                            }).ToList();
            return Ok(resultObject);
        }
<#
            } // the end of: if (!indIsCorrect) {...} else {}
        } // the end of: foreach(ModelViewUniqueKeyOfVwSerializable pk uniqueKeys) {}
    } // the end of: if (Model.IsWebApiSelectOneByPrimarykey)
#>




<# 
    if (Model.IsWebApiAdd) { 
        int counter = 0;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        List<ModelViewPropertyOfVwSerializable> primKeys = locPrimKey.UniqueKeyProperties;

#>
        [HttpPost]
        [Route("<#= AddOneMethodName #>")]
        public async Task<ActionResult<<#= Model.ViewName#>>> <#= AddOneMethodName #>([FromBody] <#= Model.ViewName#> viewToAdd)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            IdentityRole entityToAdd = new IdentityRole()  { Name = viewToAdd.Name };
            IdentityResult rslt = await RoleManager.CreateAsync(entityToAdd);
            if (!rslt.Succeeded)
            {
                return BadRequest(rslt);
            }


                <#= Model.ViewName#> result = RoleManager.Roles
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
             ModelViewPropertyOfVwSerializable primKeyProp = primKeys[pkId];
#>
                    .Where(p => p.<#= Model.PrimaryKeyProperties[pkId].OriginalPropertyName #> == entityToAdd.<#= Model.PrimaryKeyProperties[pkId].OriginalPropertyName #>)
<#
        }
#>
                    .Select(itm => new <#= Model.ViewName #>() {
<#
                int cnt = Model.ScalarProperties.Count-1;
                for(int i = 0; i < cnt; i++) {
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#= GetForeignKeyNameChain(Model.ScalarProperties[i].ForeignKeyNameChain) #><#= Model.ScalarProperties[i].OriginalPropertyName #>,
<#
        } 
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model)#> = itm.<#= GetForeignKeyNameChain(Model.ScalarProperties[cnt].ForeignKeyNameChain) #><#= Model.ScalarProperties[cnt].OriginalPropertyName #>
                    }).FirstOrDefault();
                if (result == null)
                {
                    return NotFound();
                }
                return Ok(result);
        }
<#
    }
#>



<# 
    if (Model.IsWebApiDelete) { 
#>
        [HttpDelete]
        [Route("[controller]/<#= DeleteOneMethodName#>")]
        public async Task<ActionResult> <#= DeleteOneMethodName#>(<#
        int counter = 0;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        List<ModelViewPropertyOfVwSerializable> primKeys = locPrimKey.UniqueKeyProperties;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter > 0) { #>                , <#} #>[FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model)#>
<#
            counter++;
        } #>                )
        {

                <#= Model.ViewName#> result = RoleManager.Roles
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
             ModelViewPropertyOfVwSerializable primKeyProp = primKeys[pkId];
#>
                    .Where(p => p.<#= Model.PrimaryKeyProperties[pkId].OriginalPropertyName #> == <#= GetFilterPropertyName(primKeyProp, Model)#>)
<#
        }
#>
                    .Select(itm => new <#= Model.ViewName #>() {
<#
                int cnt = Model.ScalarProperties.Count-1;
                for(int i = 0; i < cnt; i++) {
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#= GetForeignKeyNameChain(Model.ScalarProperties[i].ForeignKeyNameChain) #><#= Model.ScalarProperties[i].OriginalPropertyName #>,
<#
        } 
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model)#> = itm.<#= GetForeignKeyNameChain(Model.ScalarProperties[cnt].ForeignKeyNameChain) #><#= Model.ScalarProperties[cnt].OriginalPropertyName #>
                    }).FirstOrDefault();
                if (result == null)
                {
                    return NotFound();
                }

                IdentityRole entityToDelete = RoleManager.Roles
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
             ModelViewPropertyOfVwSerializable primKeyProp = primKeys[pkId];
#>
                    .Where(p => p.<#= Model.PrimaryKeyProperties[pkId].OriginalPropertyName #> == result.<#= GetTypeScriptPropertyName(primKeyProp, Model)#>)
<#
        }
#>
                    .FirstOrDefault();
                if (entityToDelete == null) {
                    return Ok(result);
                }
                IdentityResult rslt = await RoleManager.DeleteAsync(entityToDelete);
                if (!rslt.Succeeded)
                {
                    return BadRequest(rslt);
                }
                return Ok(result);
        }
<#
    } // the end of if (Model.IsWebApiDelete)
#>

    }
}

<#+
    String GetDestinationNameSpace(ModelViewSerializable model) {
        string result = "";
        if( !string.IsNullOrEmpty( model.WebApiServiceFolder ) ) {
            result = model.WebApiServiceFolder.Replace("\\", ".");
        }
        if ( !string.IsNullOrEmpty(model.WebApiServiceDefaultProjectNameSpace) ) {
            if (string.IsNullOrEmpty(result)) {
                result = model.WebApiServiceDefaultProjectNameSpace;
            } else {
                result = model.WebApiServiceDefaultProjectNameSpace + "." + result;
            }
        }
        return result;
    }
    String GetDbContextNameSpace(DbContextSerializable context) {
        string result = context.DbContextFullClassName;
        
        if( !string.IsNullOrEmpty( result ) ) {
            if( !string.IsNullOrEmpty(context.DbContextClassName) ) {
                if(result.EndsWith("."+context.DbContextClassName)) {
                    result = result.Substring(0, result.LastIndexOf("."+context.DbContextClassName));
                }
            }
        }
        return result;
    }
    String GetViewModelNameSpace(ModelViewSerializable model) {
        string result = "";
        if( !string.IsNullOrEmpty( model.ViewFolder ) ) {
            result = model.ViewFolder.Replace("\\", ".");
        }
        if ( !string.IsNullOrEmpty(model.ViewDefaultProjectNameSpace) ) {
            if (string.IsNullOrEmpty(result)) {
                result = model.ViewDefaultProjectNameSpace;
            } else {
                result = model.ViewDefaultProjectNameSpace + "." + result;
            }
        }
        return result;
    }
    String GetRootEntityNameSpace(ModelViewSerializable model) {
        return model.RootEntityFullClassName.Substring(0, model.RootEntityFullClassName.LastIndexOf("." + model.RootEntityClassName));
    }
    List<String> GetNavigationPaths(ModelViewSerializable model) {
        List<String> locPaths = new List<String>();
        if(model.ScalarProperties == null) return locPaths;
        foreach (ModelViewPropertyOfVwSerializable prop in model.ScalarProperties)
        {
            if (string.IsNullOrEmpty(prop.ForeignKeyNameChain)) continue;
            if (locPaths.Exists(itm => (itm.StartsWith(prop.ForeignKeyNameChain + ".") || (itm.Equals(prop.ForeignKeyNameChain))))) continue;
            string s = locPaths.Where(itm => (prop.ForeignKeyNameChain.StartsWith(itm + ".") || (itm.Equals(prop.ForeignKeyNameChain)))).FirstOrDefault();
            if (!string.IsNullOrEmpty(s))
            {
                locPaths.Remove(s);
            }
            locPaths.Add(prop.ForeignKeyNameChain);
        }
        return locPaths;
    }
    String GenerateIncludePaths(String src) {
        if (String.IsNullOrEmpty(src)) return "";
        string[] sa = src.Split(new char[] { '.' });
        StringBuilder sb = new StringBuilder(".Include(p => p." + sa[0] + ")");
        for (int i = 1; i < sa.Length; i++)
        {
            sb.Append(".ThenInclude(p => p." + sa[i] + ")");
        }
        return sb.ToString();
    }
    String GetForeignKeyNameChain(String foreignKeyNameChain) {
        if (String.IsNullOrEmpty(foreignKeyNameChain)) {
            return "";
        } else {
            return foreignKeyNameChain + ".";
        }
    }
    String GetForeignKeyNameChainAndProp(ModelViewPropertyOfVwSerializable sProp, ModelViewSerializable model) {
        if (String.IsNullOrEmpty(sProp.ForeignKeyNameChain)) {
            return sProp.OriginalPropertyName;
        } else {
            if((sProp.ForeignKeyNameChain == sProp.ForeignKeyName) && (model.ForeignKeys != null)) {
                ModelViewForeignKeySerializable fk = model.ForeignKeys.Where(f => f.NavigationName == sProp.ForeignKeyName).FirstOrDefault();
                if(fk != null) {
                    if((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                        for(int i = 0; i < fk.PrincipalKeyProps.Count; i++) {
                            if(i < fk.ForeignKeyProps.Count) {
                                if(fk.PrincipalKeyProps[i].OriginalPropertyName == sProp.OriginalPropertyName) {
                                    return fk.ForeignKeyProps[i].OriginalPropertyName;
                                }
                            }
                        }
                    }
                }
            }
            return sProp.ForeignKeyNameChain + "." + sProp.OriginalPropertyName;
        }
    }



    String GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }
    String GetWebApiRoutePrefix(ModelViewSerializable model) {
        string result = model.WebApiRoutePrefix;
        if( string.IsNullOrEmpty( result ) ) {
            result = "";
        }
        return result;
    }
    String GetNullableType(ModelViewPropertySerializable prop) {
        if (prop.UnderlyingTypeName.Equals("System.String")) {
            return prop.UnderlyingTypeName;
        } else {
			return prop.UnderlyingTypeName +"?";
        }
    }
    String GetChainedPropertyName(ModelViewPropertySerializable prop) {
        if (String.IsNullOrEmpty(prop.ForeignKeyNameChain)) {
            return prop.OriginalPropertyName;
        } else {
            return prop.ForeignKeyNameChain + "." + prop.OriginalPropertyName;
        }
    }
    bool IsEntityTypeString(ModelViewPropertySerializable prop) {
        return prop.UnderlyingTypeName.Equals("System.String");
    }
    bool IsEntityTypeBoolean(ModelViewPropertySerializable prop) {
        return prop.UnderlyingTypeName.Equals("System.Boolean");
    }
    String GetFirstPrimKeyProperty(ModelViewSerializable model) {
        return model.PrimaryKeyProperties.FirstOrDefault().OriginalPropertyName;
    }
    String GetLowerCasePropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string result = GetTypeScriptPropertyName(prop, model);
        if (!string.IsNullOrEmpty(result)) {
            result = result.ToLower();
        }
        return result;
    }
    bool IsRootEntityProperty(ModelViewPropertySerializable prop, ModelViewSerializable model) {
        return string.IsNullOrEmpty(prop.ForeignKeyNameChain);
    }
    ModelViewEntityPropertySerializable  GetRootEntityProperty(ModelViewPropertySerializable prop, ModelViewSerializable model) {
        if (string.IsNullOrEmpty(prop.ForeignKeyNameChain)) {
            if (model.AllProperties != null) {
                return model.AllProperties.Where(p => p.OriginalPropertyName == prop.OriginalPropertyName).FirstOrDefault();
            }
            return null;
        }
        if(model.ForeignKeys == null) return null;
        ModelViewForeignKeySerializable fk = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyNameChain).FirstOrDefault();
        if(fk == null) return null;
        if((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return null;
        int cnt = fk.PrincipalKeyProps.Count;
        if (cnt > fk.ForeignKeyProps.Count) cnt = fk.ForeignKeyProps.Count;
        for(int i = 0; i < cnt; i++) {
            if(fk.PrincipalKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) {
                return model.AllProperties.Where(p => p.OriginalPropertyName == fk.ForeignKeyProps[i].OriginalPropertyName).FirstOrDefault();
            }
        }
        return null;
    }

    string FirstLetterToUpper(string str) {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string FirstLetterToLower(string str) {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }

    ModelViewPropertyOfVwSerializable GetModelScalarPropByKeyProp(ModelViewSerializable model, ModelViewKeyPropertySerializable pk) {
        ModelViewPropertyOfVwSerializable rslt = null;
        if ((model == null) || (pk == null)) return null;
        if (model.ScalarProperties == null) return null;
        ModelViewPropertyOfVwSerializable scProp = 
            model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
        if (scProp != null) return scProp;
        if (model.ForeignKeys != null) {
            foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
                scProp = null;
                if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                    int cnt = fk.ForeignKeyProps.Count;
                    if (cnt < fk.PrincipalKeyProps.Count)
                    {
                        cnt = fk.PrincipalKeyProps.Count;
                    }
                    for(int i = 0; i < cnt; i++)
                    {
                        if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                        {
                            scProp=
                                model.ScalarProperties.Where(p =>
                                ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                        }
                        if(scProp != null) return scProp;
                    }
                }
            }
        }
        return null;
    }
    ModelViewUniqueKeyOfVwSerializable GetModelPrimaryKey(ModelViewSerializable model) {
        ModelViewUniqueKeyOfVwSerializable rslt = null;    
        if(model == null) return rslt;
        if((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) return rslt;
        if((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return rslt;
        foreach(ModelViewKeyPropertySerializable pk in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable scProp = 
                model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
            if(scProp == null) {
                scProp = GetModelScalarPropByKeyProp(model, pk);
            }
            if(scProp != null) {
                if(rslt == null) rslt = new ModelViewUniqueKeyOfVwSerializable() {
                    UniqueKeyName = null,
                    IsPrimary = true,
                    UniqueKeyProperties = new List<ModelViewPropertyOfVwSerializable>()
                };
                rslt.UniqueKeyProperties.Add(scProp);
            }
        }
        return rslt;
    }
    List<ModelViewUniqueKeyOfVwSerializable> GetModelUniqueKeys(ModelViewSerializable model, List<ModelViewUniqueKeyOfVwSerializable> rsltKeys) {
        if((model == null) || (rsltKeys == null)) return rsltKeys;
        if ((model.UniqueKeys == null) || (model.ScalarProperties == null)) return rsltKeys;
        foreach(ModelViewUniqueKeySerializable uk in model.UniqueKeys) {
            if(uk.UniqueKeyProperties == null) continue;
            if(uk.UniqueKeyProperties.Count < 1) continue;
            ModelViewUniqueKeyOfVwSerializable rslt = null; 
            foreach(ModelViewKeyPropertySerializable pk in uk.UniqueKeyProperties) {
                ModelViewPropertyOfVwSerializable scProp = 
                    model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
                if(scProp == null) {
                    scProp = GetModelScalarPropByKeyProp(model, pk);
                }
                if(scProp != null) {
                    if(rslt == null) rslt = new ModelViewUniqueKeyOfVwSerializable() {
                        UniqueKeyName = uk.UniqueKeyName,
                        IsPrimary = false,
                        UniqueKeyProperties = new List<ModelViewPropertyOfVwSerializable>()
                    };
                    rslt.UniqueKeyProperties.Add(scProp);
                }
            }
            if(rslt != null) {
                rsltKeys.Add(rslt);
            }
        }
        return rsltKeys;
    }
    ModelViewUniqueKeyOfVwSerializable GetModelPrimKeyFromList(List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys) {
        if(uniqueKeys == null) return null;
        return uniqueKeys.Where(u => u.IsPrimary).FirstOrDefault();
    }
    ModelViewUniqueKeyOfVwSerializable GetModelUniqueKeyByNameFromList(List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys, string name) {
        if (uniqueKeys == null) return null;
        if(string.IsNullOrEmpty(name)) {
            return uniqueKeys.Where(u => string.IsNullOrEmpty(u.UniqueKeyName)).FirstOrDefault();
        } else {
            return uniqueKeys.Where(u => u.UniqueKeyName == name).FirstOrDefault();
        }
    }
    ModelViewUniqueKeySerializable GetModelUniqueKeyByNameFromModel(ModelViewSerializable model, string name) {
        if (model == null) return null;
        if (model.UniqueKeys == null) return null;
        if(string.IsNullOrEmpty(name)) {
            return model.UniqueKeys.Where(u => string.IsNullOrEmpty(u.UniqueKeyName)).FirstOrDefault();
        } else {
            return model.UniqueKeys.Where(u => u.UniqueKeyName == name).FirstOrDefault();
        }
    }
    bool CheckModelIfIndexIsCorrect(ModelViewSerializable model,ModelViewUniqueKeyOfVwSerializable indx, out string error) {
        if((model == null) || (indx == null)) {
            error = "Input params is not defined";
            return false;
        }
        if(indx.UniqueKeyProperties == null) {
            error = "UniqueKeyProperties of the Index are not defined";
            return false;
        }
        if(indx.UniqueKeyProperties.Count < 1) {
            if(indx.IsPrimary)
                error = "UniqueKeyProperties.Count of the Primary Index is less than 1";
            else 
                error = "UniqueKeyProperties.Count of the Unique Index (UniqueKeyName == "+ indx.UniqueKeyName + ") is less than 1";
            return false;
        }

        if(indx.IsPrimary) {
            if(model.PrimaryKeyProperties == null) {
                error = "PrimaryKeyProperties of the model are not defined";
                return false;
            }
            if (model.PrimaryKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Index fields are included in the Model";
                return false;
            }
        } else {
            if(model.UniqueKeys == null) {
                error = "UniqueKeys of the model are not defined (UniqueKeyName == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(string.IsNullOrEmpty(indx.UniqueKeyName)) {
                error = "The Name of the Index is not defined (UniqueKeyName)";
                return false;
            }
            ModelViewUniqueKeySerializable mindx = model.UniqueKeys.Where(i => i.UniqueKeyName == indx.UniqueKeyName).FirstOrDefault();
            if(mindx == null) {
                error = "Could not find index in model by name (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(mindx.UniqueKeyProperties == null) {
                error = "UniqueKeyProperties of the Unique Index (Unique Index Name == "+ indx.UniqueKeyName + ") are not defined";
                return false;
            }
            if(mindx.UniqueKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Unique Index fields are included in the Model (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
        }
        error = "";
        return true;
    }
    bool IsUsedByForeignKey(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return false;
        if (model.ForeignKeys == null) return false;
        if (model.ForeignKeys.Count < 1) return false;
        if(string.IsNullOrEmpty( prop.ForeignKeyName )) {
            foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
                if (fk.ForeignKeyProps != null) {
                    if(fk.ForeignKeyProps.Any(k => k.OriginalPropertyName == prop.OriginalPropertyName)) return true;
                }
            }
        } else if (prop.ForeignKeyName == prop.ForeignKeyNameChain) {
            ModelViewForeignKeySerializable fk01 = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyName).FirstOrDefault();
            if(fk01 == null) return false;
            if ((fk01.PrincipalKeyProps != null) && (fk01.ForeignKeyProps != null)) {
                if(fk01.PrincipalKeyProps.Count == fk01.ForeignKeyProps.Count) {
                    if ( fk01.PrincipalKeyProps.Any(k => k.OriginalPropertyName == prop.OriginalPropertyName) ) return true;
                }
            }
        }
        return false;
    }
    string GetFkOriginalPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return null;
        if (model.ForeignKeys == null) return null;
        if (model.ForeignKeys.Count < 1) return null;
        if(string.IsNullOrEmpty( prop.ForeignKeyName )) {
            return prop.OriginalPropertyName;
        } else if (prop.ForeignKeyName == prop.ForeignKeyNameChain) {
            ModelViewForeignKeySerializable fk01 = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyName).FirstOrDefault();
            if(fk01 == null) return null;
            if ((fk01.PrincipalKeyProps != null) && (fk01.ForeignKeyProps != null)) {
                if(fk01.PrincipalKeyProps.Count == fk01.ForeignKeyProps.Count) {
                    for(int i = 0; i < fk01.PrincipalKeyProps.Count; i++) {
                        if(fk01.PrincipalKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) return fk01.ForeignKeyProps[i].OriginalPropertyName;
                    }
                }
            }
        }
        return null;
    }
    bool IsEntityTypeGuid(ModelViewPropertySerializable prop) {
        return prop.UnderlyingTypeName.Equals("System.Guid");
    }

#>
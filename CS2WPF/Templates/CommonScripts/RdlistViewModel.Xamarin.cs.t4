using System;
using Xamarin.Forms;
using System.Linq;
using System.ComponentModel;
using Prism.Regions.Navigation;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using Prism.Navigation;
using System.Threading.Tasks;
using Xamarin.Essentials;
<#

    string EformModeEnumFolder                      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName                   = GetContextModelClassName(Context, EformModeEnumFolder);
    string EformModeEnumNameSpace                   = GetContextModelNameSpace(Context, EformModeEnumFolder);

    string IAppGlblSettingsServiceFolder            = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName         = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace         = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string ISformViewModelInterfaceFolder           = "00198-ISformViewModelInterface.cs";
    string ISformViewModelInterfaceClassName        = GetContextModelClassName(Context, ISformViewModelInterfaceFolder);
    string ISformViewModelInterfaceNameSpace        = GetContextModelNameSpace(Context, ISformViewModelInterfaceFolder);

    string IWebServiceFilterRsltInterfaceFolder     = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder     = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterMenuInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string WebServiceFilterMenuViewModelFolder      = "00217-WebServiceFilterMenuViewModel.cs";
    string WebServiceFilterMenuViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterMenuViewModelFolder);
    string WebServiceFilterMenuViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterMenuViewModelFolder);

    string RegionAwareViewModelBaseFolder           = "00648-RegionAwareViewModelBase.cs";
    string RegionAwareViewModelBaseClassName        = GetContextModelClassName(Context, RegionAwareViewModelBaseFolder);
    string RegionAwareViewModelBaseNameSpace        = GetContextModelNameSpace(Context, RegionAwareViewModelBaseFolder);

    string AccessDeniedUserControlFolder            = "00678-AccessDeniedUserControl.xaml.cs";
    string AccessDeniedUserControlClassName         = GetContextModelClassName(Context, AccessDeniedUserControlFolder);
    string AccessDeniedUserControlNameSpace         = GetModelNameSpace(Model, AccessDeniedUserControlFolder);

    string PageNotFoundUserControlFolder            = "00684-PageNotFoundUserControl.xaml.cs";
    string PageNotFoundUserControlClassName         = GetContextModelClassName(Context, PageNotFoundUserControlFolder);
    string PageNotFoundUserControlNameSpace         = GetContextModelNameSpace(Context, PageNotFoundUserControlFolder);

    string modelInterfaceFolder                     = "01100-Interface.cs";
    string modelInterfaceClassName                  = GetInterfaceName(Model);
    string modelInterfaceNameSpace                  = GetModelNameSpace(Model, modelInterfaceFolder);


    string LformUserControlFolder           = "01596-LformUserControl.xaml.cs";
    string LformUserControlClassName        = GetModelClassName(Model, LformUserControlFolder);
    string LformUserControlNameSpace        = GetModelNameSpace(Model, LformUserControlFolder);
    string LformUserControlProject          = GetModelProjectName(Model, LformUserControlFolder);


    string RdlistUserControlFolder          = "02016-RdlistUserControl.xaml.cs";
    string RdlistUserControlClassName       = GetModelClassName(Model, RdlistUserControlFolder);
    string RdlistUserControlNameSpace       = GetModelNameSpace(Model, RdlistUserControlFolder);
    string RdlistUserControlProject         = GetModelProjectName(Model, RdlistUserControlFolder);

    string RdlistViewModelFolder            = "02020-RdlistViewModel.cs";
    string RdlistViewModelClassName         = GetModelClassName(Model, RdlistViewModelFolder);
    string RdlistViewModelNameSpace         = GetModelNameSpace(Model, RdlistViewModelFolder);

    string HiddenFiltersPropertyName                 = "HiddenFilters";
    string OnHiddenFiltersChangedPropertyName        = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName  = "HiddenFiltersPropertyChanged";

    string TableMenuItemsPropertyName                = "TableMenuItems";
    string TableMenuItemsPropertyChangedPropertyName = "TableMenuItemsPropertyChanged";

    string RowMenuItemsPropertyName                  = "RowMenuItems";
    string RowMenuItemsPropertyChangedPropertyName   = "RowMenuItemsPropertyChanged";

    string RegionPropertyName                       = "Region";
    string RdlistUserControlRegionPropertyName      = "RdlistUserControlRegion";

    string FormRootServicePropertyName               = "FrmRootSrv";
    string AppSettingServicePropertyName             = "GlblSettingsSrv";
    string GetWithFilterMethodName                   = "getwithfilter";
    string ColumnSelectorDlgPropertyName             = "ColumnSelectorDlg";
    string IsParentLoadedPropertyName                = "IsParentLoaded";








    string TableMenuItemsCommandPropertyName    = "TableMenuItemsCommand";
    string RowMenuItemsCommandPropertyName      = "RowMenuItemsCommand";
    string SelectedRowPropertyName              = "SelectedRow";
    string SelectedRowCommandPropertyName       = "SelectedRowCommand";

    string CanAddPropertyName                   = "CanAdd";
    string CanUpdPropertyName                   = "CanUpdate";
    string CanDelPropertyName                   = "CanDelete";
    string CanAddParentPropertyName             = "CanAddParent";
    string CanUpdParentPropertyName             = "CanUpdateParent";
    string CanDelParentPropertyName             = "CanDeleteParent";

    string CanAddDetailPropertyName             = "CanAddDetail"; 
    string CanUpdDetailPropertyName             = "CanUpdateDetail"; 
    string CanDelDetailPropertyName             = "CanDeleteDetail"; 
    string CanAddDetailParentPropertyName       = "CanAddDetailParent"; 
    string CanUpdDetailParentPropertyName       = "CanUpdateDetailParent"; 
    string CanDelDetailParentPropertyName       = "CanDeleteDetailParent"; 

    string FormControlModelPropertyName         = "FormControlModel";
    string CaptionPropertyName                  = "Caption";
    string EformModePropertyName                = "EformMode";
    string ShowSubmitPropertyName               = "ShowSubmit";
    string FormServicePrefix                    = "FrmSrv";
    string RowMIPrefixPropertyName              = "RowMI";

    string GetOneMethodName                     = "getone";
    string CopyToModelNotifyMethodName          = "CopyToModelNotify";
    string CopyToModelMethodName                = "CopyToModel";

    string FilterHeightPropertyName             = "FilterHeight";
    string GridHeightPropertyName               = "GridHeight";

    string CurrentNavigationContextPropertyName = "CurrentNavigationContext";
    string ShowBackBtnPropertyName              = "ShowBackBtn";
    string OnNavigationBackCommandPropertyName  = "OnNavigationBackCommand";
    string IsDestroyedPropertyName              = "IsDestroyed";
    string IsNavigatedBackPropertyName          = "IsNavigatedBack";
    string OnDestroyPropertyName                = "OnDestroy";
    string NavigateToDetailCommandPropertyName  = "NavigateToDetailCommand";
    string HiddenFiltersParamPropertyName       = "HiddenFilter";
    string HiddenFilterByRowSuffix              = "HiddenFilterByRow";
    string HiddenFilterAsFltRsltSuffix          = "HiddenFilterAsFltRslt";


    List<string> detailViewNames = GetDetailViews(Model, Context, null);
    List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(Model);
//    List<string> detailViewNamesToExclude = new List<string>();
    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> tmpSearchSchema = null;
    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> searchSchemas =
        GetSearchResources(Model, Context);

    List<string> nmSpaces = new List<string>();
    if ((RdlistViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((RdlistViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((RdlistViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((RdlistViewModelNameSpace != WebServiceFilterMenuViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterMenuViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterMenuViewModelNameSpace);
    if ((RdlistViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((RdlistViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((RdlistViewModelNameSpace != EformModeEnumNameSpace) && (nmSpaces.IndexOf(EformModeEnumNameSpace) < 0)) 
        nmSpaces.Add(EformModeEnumNameSpace);
    if ((RdlistViewModelNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
    if ((RdlistViewModelNameSpace != ISformViewModelInterfaceNameSpace) && (nmSpaces.IndexOf(ISformViewModelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(ISformViewModelInterfaceNameSpace);
    if ((RdlistViewModelNameSpace != RegionAwareViewModelBaseNameSpace) && (nmSpaces.IndexOf(RegionAwareViewModelBaseNameSpace) < 0)) 
        nmSpaces.Add(RegionAwareViewModelBaseNameSpace);

    bool IsInTheSameModule = (LformUserControlProject == RdlistUserControlProject);
    
    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>
/*

<#
    if(!IsInTheSameModule) {
#>
    "<#= LformUserControlClassName #>"-UserControl is defined in the "<#= LformUserControlProject #>"-project.
    In the file of IModule-class of "<#= LformUserControlProject #>"-project the following line of code must be inserted:

        public void OnInitialized(IContainerProvider containerProvider)
        {
            ...
            IRegionManager regionManager = containerProvider.Resolve(typeof(IRegionManager)) as IRegionManager;
            if (regionManager != null)
            {
                ...
                // According to requirements of the "<#= RdlistViewModelClassName #>.cs"-file of "<#= RdlistUserControlProject #>"-project. 
                regionManager.RegisterViewWithRegion("<#= LformUserControlClassName #><#= RdlistUserControlRegionPropertyName #>", typeof(<#= LformUserControlClassName #>));
                ...
            }
            ...
        }
<#       
    }
#>

    "<#= RdlistUserControlClassName #>" UserControl is defined in the "<#= RdlistUserControlProject #>"-project.
    In the file of IModule-class of "<#= RdlistUserControlProject #>"-project the following line of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            // According to requirements of the "<#= RdlistViewModelClassName #>.cs"-file of "<#= RdlistUserControlProject #>"-project. 
            ViewModelLocationProvider.Register<<#= RdlistUserControlClassName #>, <#= RdlistViewModelClassName #>>();
            // According to requirements of the "<#= RdlistViewModelClassName #>.cs"-file of "<#= RdlistUserControlProject #>"-project. 
            containerRegistry.RegisterForRegionNavigation<<#= RdlistUserControlClassName #>, <#= RdlistViewModelClassName #>>("<#= RdlistUserControlClassName #>");
            // According to requirements of the "<#= RdlistViewModelClassName #>.cs"-file of "<#= RdlistUserControlProject #>"-project. 
            containerRegistry.Register<ContentView, <#= RdlistUserControlClassName #>>("<#= RdlistUserControlClassName #>");
            ...
        }
*/

namespace <#= RdlistViewModelNameSpace #> {

    public class <#= RdlistViewModelClassName #>: <#= RegionAwareViewModelBaseClassName #>, IRegionAware
    {
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected <#= GetModelServiceInterfaceName(Model) #> <#= FormServicePrefix #><#= Model.ViewName #> = null;
        
        public <#= RdlistViewModelClassName #>(<#= GetModelServiceInterfaceName(Model) #> _<#= FormServicePrefix #><#= Model.ViewName #>, <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName  #>) {
            this.<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
            this.<#= FormServicePrefix #><#= Model.ViewName #> = _<#= FormServicePrefix #><#= Model.ViewName #>;
            PermissionMask = <#= AppSettingServicePropertyName #>.GetViewModelMask("<#= Model.ViewName #>");
            _<#= TableMenuItemsPropertyName #> = GetDefault<#= TableMenuItemsPropertyName #>();
            _<#= RowMenuItemsPropertyName #> = GetDefault<#= RowMenuItemsPropertyName #>();
        }

        protected int PermissionMask = 0; 

        public bool <#= CanAddPropertyName #>
        { 
            get
            {
                return ((PermissionMask & 8) == 8) && <#= CanAddParentPropertyName #>;
            }
        }
        public bool <#= CanUpdPropertyName #>
        { 
            get
            {
                return ((PermissionMask & 4) == 4) && <#= CanUpdParentPropertyName #>;
            }
        }
        public bool <#= CanDelPropertyName #>
        { 
            get
            {
                return ((PermissionMask & 2) == 2) && <#= CanDelParentPropertyName #>;
            }
        }

        public bool <#= CanAddDetailPropertyName #>
        { 
            get
            {
                return <#= CanAddDetailParentPropertyName #>;
            }
        }
        public bool <#= CanUpdDetailPropertyName #>
        { 
            get
            {
                return <#= CanUpdDetailParentPropertyName #>;
            }
        }
        public bool <#= CanDelDetailPropertyName #>
        { 
            get
            {
                return <#= CanDelDetailParentPropertyName #>;
            }
        }

        #region <#= CaptionPropertyName #>
        string _<#= CaptionPropertyName #> = "<#= Model.PluralTitle #>";
        public string <#= CaptionPropertyName #>
        { 
            get
            {
                return _<#= CaptionPropertyName #>;
            }
            set {
                if(_<#= CaptionPropertyName #> != value) {
                    _<#= CaptionPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= RowMenuItemsPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= RowMenuItemsPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {
<#
        foreach(string detailViewName in detailViewNames) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) {
#>
///// can not find Foreign Keys for <#= detailViewName #>
<#
                continue;
            }
            if (foreignKeys.Count < 1) {
#>
///// can not find Foreign Keys for <#= detailViewName #>
<#
                continue;
            }
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                if(isM2m) {
                    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                    tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                    if (tmpSearchSchema != null) {
                        int  cnt = 0;
                        if(tmpSearchSchema.Item5 == null) continue;
                        if(tmpSearchSchema.Item5.Count != 1) continue;
                        if(tmpSearchSchema.Item4 != null) continue;
                        if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                        if(detailViewNamesToExclude.Any(s => s == tmpSearchSchema.Item2.ViewName)) continue;
                        ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
                        string viewToNavigateClassName = GetModelClassName(viewToNavigate, RdlistUserControlFolder);
#>
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= RowMIPrefixPropertyName #><#= viewToNavigateClassName #><#= foreignKey.NavigationName #>", <#= CaptionPropertyName #>="<#= viewToNavigate.PluralTitle #>: <#= foreignKey.NavigationName #>", IconName="ArrowRightBold", IconColor=Color.Default, Enabled=true, Data=null, FeedbackData=null, Command = <#= RowMenuItemsCommandPropertyName #>},
<#
                    } // if (tmpSearchSchema != null) { ... }
                } // if(isM2m) { ... }
                if(detailViewNamesToExclude.Any(s => s == detailViewName)) continue;
                string detailViewClassName = GetModelClassName(detailView, RdlistUserControlFolder);
#>
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= RowMIPrefixPropertyName #><#= detailViewClassName #><#= foreignKey.NavigationName #>", <#= CaptionPropertyName #>="<#= detailView.PluralTitle #>: <#= foreignKey.NavigationName #>", IconName="ArrowRightBold", IconColor=Color.Default, Enabled=true, Data=null, FeedbackData=null, Command = <#= RowMenuItemsCommandPropertyName #>},
<#
            }
        }
#>
            };
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= RowMenuItemsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= RowMenuItemsPropertyName #>
        { 
            get
            {
                return _<#= RowMenuItemsPropertyName #>;
            }
            set
            {
                if (_<#= RowMenuItemsPropertyName #> != value)
                {
                    _<#= RowMenuItemsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= TableMenuItemsPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= TableMenuItemsPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {};
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= TableMenuItemsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= TableMenuItemsPropertyName #>
        { 
            get
            {
                return _<#= TableMenuItemsPropertyName #>;
            }
            set
            {
                if (_<#= TableMenuItemsPropertyName #> != value)
                {
                    _<#= TableMenuItemsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= HiddenFiltersPropertyName #>
        IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersPropertyName #> = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
        public IEnumerable<IWebServiceFilterRsltInterface> <#= HiddenFiltersPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersPropertyName #> != value)
                {
                    _<#= HiddenFiltersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region OnNavigationResult
        protected void OnNavigationResult(IRegionNavigationResult navResult) {
            if (<#= IsDestroyedPropertyName #>) return;
            if (navResult.Result.HasValue) {
                if (navResult.Result.Value) return;
            }
            string navErrorMsg = "Unknown Navigation Error";
            if (navResult.Error != null)
            {
                navErrorMsg = navResult.Error.Message;
                Exception inner = navResult.Error.InnerException;
                while (inner != null)
                {
                    navErrorMsg = navErrorMsg + ": " + inner.Message;
                    inner = inner.InnerException;
                }
            }
            navResult.Context.NavigationService.RequestNavigate(new Uri("<#= PageNotFoundUserControlClassName #>", UriKind.Relative));
            <#= AppSettingServicePropertyName #>.ShowErrorMessage("Navigation Exception", navErrorMsg);
        }
        #endregion

        #region <#= NavigateToDetailCommandPropertyName #>
        public void <#= NavigateToDetailCommandPropertyName #>(<#= modelInterfaceClassName #> selected, string detailVwNm, string fkNvNm, string detailVwClNm) { 
            if (<#= IsDestroyedPropertyName #>) return;
            if (((<#= AppSettingServicePropertyName #>.GetViewModelMask(detailVwNm) & 1) != 1 )) {
                <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative), OnNavigationResult);
                return;
            }
            if(selected == null) return;
            NavigationParameters navigationParameters = new NavigationParameters();
            navigationParameters.Add("<#= HiddenFiltersParamPropertyName #>", this.<#= FormServicePrefix #><#= Model.ViewName #>.get<#= HiddenFilterByRowSuffix #>(selected, fkNvNm));  
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri(detailVwClNm, UriKind.Relative), OnNavigationResult, navigationParameters);
        }
        #endregion



        #region <#= TableMenuItemsCommandPropertyName #>
        protected ICommand _<#= TableMenuItemsCommandPropertyName #> = null;
        public ICommand <#= TableMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= TableMenuItemsCommandPropertyName #> ?? (_<#= TableMenuItemsCommandPropertyName #> = new Command((p) => <#= TableMenuItemsCommandPropertyName #>Execute(p), (p) => <#= TableMenuItemsCommandPropertyName #>CanExecute(p)));
            }
        }
        protected void <#= TableMenuItemsCommandPropertyName #>Execute(object prm)
        {
        }
        protected bool <#= TableMenuItemsCommandPropertyName #>CanExecute(object prm)
        {
            return true; 
        }
        #endregion


        #region <#= RowMenuItemsCommandPropertyName #>
        protected ICommand _<#= RowMenuItemsCommandPropertyName #> = null;
        public ICommand <#= RowMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= RowMenuItemsCommandPropertyName #> ?? (_<#= RowMenuItemsCommandPropertyName #> = new Command((p) => <#= RowMenuItemsCommandPropertyName #>Execute(p), (p) => <#= RowMenuItemsCommandPropertyName #>CanExecute(p)));
            }
        }
        protected void <#= RowMenuItemsCommandPropertyName #>Execute(object prm)
        {
            if (<#= IsDestroyedPropertyName #>) return;
            <#= IWebServiceFilterMenuInterfaceClassName #> mi = prm as <#= IWebServiceFilterMenuInterfaceClassName #>;
            if (mi == null) return;
            <#= modelInterfaceClassName #> arow = mi.FeedbackData as <#= modelInterfaceClassName #>;
            if (arow == null) return;
            switch(mi.Id) {
<#
        foreach(string detailViewName in detailViewNames) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) {
#>
///// can not find Foreign Keys for <#= detailViewName #>
<#
                continue;
            }
            if (foreignKeys.Count < 1) {
#>
///// can not find Foreign Keys for <#= detailViewName #>
<#
                continue;
            }
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                if(isM2m) {
                    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                    tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                    if (tmpSearchSchema != null) {
                        int  cnt = 0;
                        if(tmpSearchSchema.Item5 == null) continue;
                        if(tmpSearchSchema.Item5.Count != 1) continue;
                        if(tmpSearchSchema.Item4 != null) continue;
                        if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                        if(detailViewNamesToExclude.Any(s => s == tmpSearchSchema.Item2.ViewName)) continue;
                        ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
                        string viewToNavigateClassName = GetModelClassName(viewToNavigate, RdlistUserControlFolder);
#>
                    case "<#= RowMIPrefixPropertyName #><#= viewToNavigateClassName #><#= foreignKey.NavigationName #>":
                        <#= NavigateToDetailCommandPropertyName #>(arow, "<#= viewToNavigate.ViewName #>", "<#= foreignKey.NavigationName #>", "<#= viewToNavigateClassName #>");
                        break;
<#
                    } // if (tmpSearchSchema != null) { ... }
                } // if(isM2m) { ... }
                if(detailViewNamesToExclude.Any(s => s == detailViewName)) continue;
                string detailViewClassName = GetModelClassName(detailView, RdlistUserControlFolder);
#>
                    case "<#= RowMIPrefixPropertyName #><#= detailViewClassName #><#= foreignKey.NavigationName #>":
                        <#= NavigateToDetailCommandPropertyName #>(arow, "<#= detailView.ViewName #>", "<#= foreignKey.NavigationName #>", "<#= detailViewClassName #>");
                        break;
<#
            } // the end of foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) { ... }
        } // the end of foreach(string detailViewName in detailViewNames) { ... }
#>
                default:
                    break;
            }         
        }
        protected bool <#= RowMenuItemsCommandPropertyName #>CanExecute(object prm)
        {
            if (<#= IsDestroyedPropertyName #>) return false;
            <#= IWebServiceFilterMenuInterfaceClassName #> mi = prm as <#= IWebServiceFilterMenuInterfaceClassName #>;
            if (mi != null) {
                switch(mi.Id) {
<#
        foreach(string detailViewName in detailViewNames) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) {
#>
///// can not find Foreign Keys for <#= detailViewName #>
<#
                continue;
            }
            if (foreignKeys.Count < 1) {
#>
///// can not find Foreign Keys for <#= detailViewName #>
<#
                continue;
            }
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                if(isM2m) {
                    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                    tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                    if (tmpSearchSchema != null) {
                        int  cnt = 0;
                        if(tmpSearchSchema.Item5 == null) continue;
                        if(tmpSearchSchema.Item5.Count != 1) continue;
                        if(tmpSearchSchema.Item4 != null) continue;
                        if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                        if(detailViewNamesToExclude.Any(s => s == tmpSearchSchema.Item2.ViewName)) continue;
                        ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
                        string viewToNavigateClassName = GetModelClassName(viewToNavigate, RdlistUserControlFolder);
#>
                    case "<#= RowMIPrefixPropertyName #><#= viewToNavigateClassName #><#= foreignKey.NavigationName #>":
                        return ((<#= AppSettingServicePropertyName #>.GetViewModelMask("<#= viewToNavigate.ViewName #>") & 1) == 1);
<#
                    } // if (tmpSearchSchema != null) { ... }
                } // if(isM2m) { ... }
                if(detailViewNamesToExclude.Any(s => s == detailViewName)) continue;
                string detailViewClassName = GetModelClassName(detailView, RdlistUserControlFolder);
#>
                    case "<#= RowMIPrefixPropertyName #><#= detailViewClassName #><#= foreignKey.NavigationName #>":
                        return ((<#= AppSettingServicePropertyName #>.GetViewModelMask("<#= detailView.ViewName #>") & 1) == 1);
<#
            } // the end of foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) { ... }
        } // the end of foreach(string detailViewName in detailViewNames) { ... }
#>
                    default:
                        break;
                }
            }
            return false; 
        }
        #endregion

        #region <#= SelectedRowPropertyName #>
        //protected object _<#= SelectedRowPropertyName #> = null;
        //public object <#= SelectedRowPropertyName #> {
        //    get {
        //    }
        //    set {
        //        if(_<#= SelectedRowPropertyName #> != value) {
        //            _<#= SelectedRowPropertyName #> = value;
        //            OnPropertyChanged();
        //        }
        //    }
        //}
        #endregion

       #region <#= SelectedRowCommandPropertyName #>
       protected ICommand _<#= SelectedRowCommandPropertyName #> = null;
       public ICommand <#= SelectedRowCommandPropertyName #>
       {
           get
           {
               return _<#= SelectedRowCommandPropertyName #> ?? (_<#= SelectedRowCommandPropertyName #> = new Command((p) => <#= SelectedRowCommandPropertyName #>Execute(p), (p) => <#= SelectedRowCommandPropertyName #>CanExecute(p)));
           }
       }
       protected void <#= SelectedRowCommandPropertyName #>Execute(object prm)
       {
           // <#= SelectedRowPropertyName #> = prm;
       }
       protected bool <#= SelectedRowCommandPropertyName #>CanExecute(object prm)
       {
           return true; 
       }
       #endregion

       #region <#= IsParentLoadedPropertyName #>
       bool _<#= IsParentLoadedPropertyName #> = false;
       public bool <#= IsParentLoadedPropertyName #>
       { 
           get
           {
               return _<#= IsParentLoadedPropertyName #>;
           }
           set {
               if(_<#= IsParentLoadedPropertyName #> != value) {
                   _<#= IsParentLoadedPropertyName #> = value;
                   OnPropertyChanged();
               }
           }
       }
       #endregion

       #region IRegionAware
       bool <#= IsNavigatedBackPropertyName #> = false;
       public bool IsNavigationTarget(INavigationContext navigationContext) {
            return true;
       }
       public void OnNavigatedFrom(INavigationContext navigationContext) {
            <#= CurrentNavigationContextPropertyName #> = null;
       }
       public async void OnNavigatedTo(INavigationContext navigationContext) {
            if (<#= IsDestroyedPropertyName #>) return;
            INavigationParameters prms = navigationContext.Parameters;
            PermissionMask = <#= AppSettingServicePropertyName #>.GetViewModelMask("<#= Model.ViewName #>");
            if ((PermissionMask & 1) != 1) {
                if (navigationContext.NavigationService.Journal.CurrentEntry.Uri.OriginalString == "<#= AccessDeniedUserControlClassName #>")
                {
                    navigationContext.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative), OnNavigationResult);
                    return;
                }
                else if(navigationContext.NavigationService.Journal.CanGoBack) {
                    // it should be intercepted by prev item in navigation chain
                    throw new Exception("Access Denied to navigate <#= Model.ViewName #>");
                } else {
                    // this is a first item in navigation chain, so navigationContext.Parameters are not expected
                    navigationContext.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative), OnNavigationResult);
                    return;
                }
            }
            <#= CurrentNavigationContextPropertyName #> = navigationContext;
            await  MainThread.InvokeOnMainThreadAsync(() => {
                OnPropertyChanged("<#= ShowBackBtnPropertyName #>");
                (<#= OnNavigationBackCommandPropertyName #> as Command).ChangeCanExecute();
                OnPropertyChanged("<#= CanAddPropertyName  #>");
                OnPropertyChanged("<#= CanUpdPropertyName  #>");
                OnPropertyChanged("<#= CanDelPropertyName  #>");
            });
            if((!<#= IsParentLoadedPropertyName #>) || (<#= IsNavigatedBackPropertyName #>)) {
                ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> hf = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
<#
        if(false) {
            foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>          
                if(prms.ContainsKey("<#= GetModelPropertyName(sclrProp, Model) #>")) {
                        hf.Add(new <#= WebServiceFilterRsltViewModelClassName #>() {
                            fltrName = "<#= GetModelPropertyName(sclrProp, Model) #>",
                            fltrDataType = "<#= GetCCharpDatatype(sclrProp, Model) #>",
                            fltrOperator = "eq",
                            fltrValue = prms.GetValue<<#= GetPropertyTypeName(sclrProp) #>>("<#= GetModelPropertyName(sclrProp, Model) #>"),
                            fltrError = null
                        });
                }
<#
            }
        }
#>          
                if(prms.ContainsKey("<#= HiddenFiltersParamPropertyName #>")) {
                    IList<<#= IWebServiceFilterRsltInterfaceClassName #>> hflts = 
                        <#= FormServicePrefix #><#= Model.ViewName #>.get<#= HiddenFilterAsFltRsltSuffix #>(
                            prms.GetValue<Dictionary<(string viewNm, string navNm, string propNm), object>>("<#= HiddenFiltersParamPropertyName #>")
                        );
                    foreach(var hflt in hflts) {
                        hf.Add(hflt);
                    }
                }
                ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> chf = <#= HiddenFiltersPropertyName #> as ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>;
                bool resetHF = chf.Count != hf.Count;
                if ((!resetHF) && (hf.Count > 0)) {
                    foreach(<#= IWebServiceFilterRsltInterfaceClassName #> citm in chf) {
                        <#= IWebServiceFilterRsltInterfaceClassName #> itm = hf.Where(h => h.fltrName == citm.fltrName).FirstOrDefault();
                        if(itm == null)
                        {
                            resetHF = true;
                            break;
                        }
                        if (!(itm.fltrValue == citm.fltrValue))
                        {
                            resetHF = true;
                            break;
                        }
                    }
                } 
                if (resetHF) { <#= HiddenFiltersPropertyName #> = hf; }
            }
            <#= IsParentLoadedPropertyName #> = true;
            <#= IsNavigatedBackPropertyName #> = false;
        }
        #endregion

        #region <#= ShowBackBtnPropertyName #>
        public bool <#= ShowBackBtnPropertyName #> {
            get {
                return (<#= CurrentNavigationContextPropertyName #> == null) ?  false : <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack;
            }
        }
        #endregion
        #region <#= OnNavigationBackCommandPropertyName #>
        protected ICommand _<#= OnNavigationBackCommandPropertyName #> = null;
        public ICommand <#= OnNavigationBackCommandPropertyName #>
        {
            get
            {
                return _<#= OnNavigationBackCommandPropertyName #> ?? (_<#= OnNavigationBackCommandPropertyName #> = new Command(() => <#= OnNavigationBackCommandPropertyName #>Execute(), () => <#= OnNavigationBackCommandPropertyName #>CanExecute()));
            }
        }
        protected void <#= OnNavigationBackCommandPropertyName #>Execute()
        {
            if (<#= IsDestroyedPropertyName #>) return;
            if (<#= CurrentNavigationContextPropertyName #> != null) {
                if(<#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack) {
                    <#= IsNavigatedBackPropertyName #> = true;
                    <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.GoBack();
                }
            }
        }
        protected bool <#= OnNavigationBackCommandPropertyName #>CanExecute()
        {
            return (<#= CurrentNavigationContextPropertyName #> == null) ?  false : <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack;
        }
        #endregion

        public override void <#= OnDestroyPropertyName #>() {
            base.<#= OnDestroyPropertyName #>();
            _<#= HiddenFiltersPropertyName #> = null;
            _<#= TableMenuItemsPropertyName #> = null;
            _<#= RowMenuItemsPropertyName #> = null;
        }

    }
}




<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using System;
using Xamarin.Forms;
using System.Linq;
using System.ComponentModel;
using Prism.Regions.Navigation;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using Prism.Navigation;
using Xamarin.Essentials;

<#

    string EformModeEnumFolder                      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName                   = GetContextModelClassName(Context, EformModeEnumFolder);
    string EformModeEnumNameSpace                   = GetContextModelNameSpace(Context, EformModeEnumFolder);

    string IAppGlblSettingsServiceFolder            = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName         = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace         = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string ISformViewModelInterfaceFolder           = "00198-ISformViewModelInterface.cs";
    string ISformViewModelInterfaceClassName        = GetContextModelClassName(Context, ISformViewModelInterfaceFolder);
    string ISformViewModelInterfaceNameSpace        = GetContextModelNameSpace(Context, ISformViewModelInterfaceFolder);

    string IWebServiceFilterRsltInterfaceFolder     = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder     = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterMenuInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string WebServiceFilterMenuViewModelFolder      = "00217-WebServiceFilterMenuViewModel.cs";
    string WebServiceFilterMenuViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterMenuViewModelFolder);
    string WebServiceFilterMenuViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterMenuViewModelFolder);

    string RegionAwareViewModelBaseFolder           = "00648-RegionAwareViewModelBase.cs";
    string RegionAwareViewModelBaseClassName        = GetContextModelClassName(Context, RegionAwareViewModelBaseFolder);
    string RegionAwareViewModelBaseNameSpace        = GetContextModelNameSpace(Context, RegionAwareViewModelBaseFolder);

    string AccessDeniedUserControlFolder            = "00678-AccessDeniedUserControl.xaml.cs";
    string AccessDeniedUserControlClassName         = GetContextModelClassName(Context, AccessDeniedUserControlFolder);
    string AccessDeniedUserControlNameSpace         = GetContextModelNameSpace(Context, AccessDeniedUserControlFolder);

    string PageNotFoundUserControlFolder            = "00684-PageNotFoundUserControl.xaml.cs";
    string PageNotFoundUserControlClassName         = GetContextModelClassName(Context, PageNotFoundUserControlFolder);
    string PageNotFoundUserControlNameSpace         = GetContextModelNameSpace(Context, PageNotFoundUserControlFolder);

    string modelInterfaceFolder                     = "01100-Interface.cs";
    string modelInterfaceClassName                  = GetInterfaceName(Model);
    string modelInterfaceNameSpace                  = GetModelNameSpace(Model, modelInterfaceFolder);


    string SformUserControlFolder           = "01420-SformUserControl.xaml.cs";
    string SformUserControlClassName        = GetModelClassName(Model, SformUserControlFolder);
    string SformUserControlNameSpace        = GetModelNameSpace(Model, SformUserControlFolder);
    string SformUserControlProject          = GetModelProjectName(Model, SformUserControlFolder);


    string ReditUserControlFolder           = "01816-ReditUserControl.xaml.cs";
    string ReditUserControlClassName        = GetModelClassName(Model, ReditUserControlFolder);
    string ReditUserControlNameSpace        = GetModelNameSpace(Model, ReditUserControlFolder);

    string RviewUserControlFolder           = "01750-RviewUserControl.xaml.cs";
    string RviewUserControlClassName        = GetModelClassName(Model, RviewUserControlFolder);
    string RaddUserControlFolder            = "01770-RaddUserControl.xaml.cs";
    string RaddUserControlClassName         = GetModelClassName(Model, RaddUserControlFolder);
    string RupdUserControlFolder            = "01830-RupdUserControl.xaml.cs";
    string RupdUserControlClassName         = GetModelClassName(Model, RupdUserControlFolder);
    string RdelUserControlFolder            = "01850-RdelUserControl.xaml.cs";
    string RdelUserControlClassName         = GetModelClassName(Model, RdelUserControlFolder);



    string RlistUserControlFolder           = "01916-RlistUserControl.xaml.cs";
    string RlistUserControlClassName        = GetModelClassName(Model, RlistUserControlFolder);
    string RlistUserControlNameSpace        = GetModelNameSpace(Model, RlistUserControlFolder);
    string RlistUserControlProject          = GetModelProjectName(Model, RlistUserControlFolder);

    string RlistViewModelFolder             = "01920-RlistViewModel.cs";
    string RlistViewModelClassName          = GetModelClassName(Model, RlistViewModelFolder);
    string RlistViewModelNameSpace          = GetModelNameSpace(Model, RlistViewModelFolder);


    string HiddenFiltersPropertyName                 = "HiddenFilters";
    string OnHiddenFiltersChangedPropertyName        = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName  = "HiddenFiltersPropertyChanged";

    string TableMenuItemsPropertyName                = "TableMenuItems";
    string TableMenuItemsPropertyChangedPropertyName = "TableMenuItemsPropertyChanged";

    string RowMenuItemsPropertyName                  = "RowMenuItems";
    string RowMenuItemsPropertyChangedPropertyName   = "RowMenuItemsPropertyChanged";


    string RegionPropertyName                   = "Region";
    string RlistUserControlRegionPropertyName   = "RlistUserControlRegion";


    string FormRootServicePropertyName          = "FrmRootSrv";
    string AppSettingServicePropertyName        = "GlblSettingsSrv";
    string GetWithFilterMethodName              = "getwithfilter";
    string ColumnSelectorDlgPropertyName        = "ColumnSelectorDlg";




    string SformAfterAddItemPropertyName        = "SformAfterAddItem";
    string SformAfterUpdItemPropertyName        = "SformAfterUpdItem";
    string SformAfterDelItemPropertyName        = "SformAfterDelItem";


    string SformAddItemCommandPropertyName      = "SformAddItemCommand";
    string SformUpdItemCommandPropertyName      = "SformUpdItemCommand";
    string SformDelItemCommandPropertyName      = "SformDelItemCommand";
    string SformViewItemCommandPropertyName     = "SformViewItemCommand";
    string SformAfterAddItemCommandPropertyName = "SformAfterAddItemCommand";
    string SformAfterUpdItemCommandPropertyName = "SformAfterUpdItemCommand";
    string SformAfterDelItemCommandPropertyName = "SformAfterDelItemCommand";
    string SformLoadedCommandPropertyName       = "SformLoadedCommand";


    string TableMenuItemsCommandPropertyName    = "TableMenuItemsCommand";
    string RowMenuItemsCommandPropertyName      = "RowMenuItemsCommand";
    string SelectedRowPropertyName              = "SelectedRow";
    string SelectedRowCommandPropertyName       = "SelectedRowCommand";


    string FormControlModelPropertyName         = "FormControlModel";
    string CaptionPropertyName                  = "Caption";
    string EformModePropertyName                = "EformMode";
    string ShowSubmitPropertyName               = "ShowSubmit";
    string FormServicePrefix                    = "FrmSrv";
    string RowMIPrefixPropertyName              = "RowMI";

    string GetOneMethodName                     = "getone";
    string CopyToModelNotifyMethodName          = "CopyToModelNotify";
    string CopyToModelMethodName                = "CopyToModel";

    string FilterHeightPropertyName             = "FilterHeight";
    string GridHeightPropertyName               = "GridHeight";

    string IsParentLoadedPropertyName           = "IsParentLoaded";

    string CurrentNavigationContextPropertyName = "CurrentNavigationContext";
    string ShowBackBtnPropertyName              = "ShowBackBtn";
    string OnNavigationBackCommandPropertyName  = "OnNavigationBackCommand";

    string CanAddPropertyName                   = "CanAdd";
    string CanUpdPropertyName                   = "CanUpdate";
    string CanDelPropertyName                   = "CanDelete";
    string CanAddParentPropertyName             = "CanAddParent";
    string CanUpdParentPropertyName             = "CanUpdateParent";
    string CanDelParentPropertyName             = "CanDeleteParent";

    string CanAddDetailPropertyName             = "CanAddDetail"; 
    string CanUpdDetailPropertyName             = "CanUpdateDetail"; 
    string CanDelDetailPropertyName             = "CanDeleteDetail"; 
    string CanAddDetailParentPropertyName       = "CanAddDetailParent"; 
    string CanUpdDetailParentPropertyName       = "CanUpdateDetailParent"; 
    string CanDelDetailParentPropertyName       = "CanDeleteDetailParent"; 
    string IsDestroyedPropertyName              = "IsDestroyed";
    string IsNavigatedBackPropertyName          = "IsNavigatedBack";
    string OnDestroyPropertyName                = "OnDestroy";

    string RowViewMIPropertyName                =  "RowViewMI";
    string TableAddMIPropertyName               =  "TableAddMI";
    string RowUpdMIPropertyName                 =  "RowUpdMI";
    string RowDelMIPropertyName                 =  "RowDelMI";

    List<string> detailViews = GetDetailViews(Model, Context, null);
    List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(Model);

    List<string> nmSpaces = new List<string>();
    if ((RlistViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((RlistViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((RlistViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((RlistViewModelNameSpace != WebServiceFilterMenuViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterMenuViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterMenuViewModelNameSpace);
    if ((RlistViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((RlistViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((RlistViewModelNameSpace != EformModeEnumNameSpace) && (nmSpaces.IndexOf(EformModeEnumNameSpace) < 0)) 
        nmSpaces.Add(EformModeEnumNameSpace);
    if ((RlistViewModelNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
    if ((RlistViewModelNameSpace != ISformViewModelInterfaceNameSpace) && (nmSpaces.IndexOf(ISformViewModelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(ISformViewModelInterfaceNameSpace);
    if ((RlistViewModelNameSpace != RegionAwareViewModelBaseNameSpace) && (nmSpaces.IndexOf(RegionAwareViewModelBaseNameSpace) < 0)) 
        nmSpaces.Add(RegionAwareViewModelBaseNameSpace);

    bool IsInTheSameModule = (SformUserControlProject == RlistUserControlProject);
    
    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>
/*

<#
    if(!IsInTheSameModule) {
#>
    "<#= SformUserControlClassName #>"-UserControl is defined in the "<#= SformUserControlProject #>"-project.
    In the file of IModule-class of "<#= SformUserControlProject #>"-project the following line of code must be inserted:

        public void OnInitialized(IContainerProvider containerProvider)
        {
            ...
            IRegionManager regionManager = containerProvider.Resolve(typeof(IRegionManager)) as IRegionManager;
            if (regionManager != null)
            {
                ...
                // According to requirements of the "<#= RlistViewModelClassName #>.cs"-file of "<#= RlistUserControlProject #>"-project. 
                regionManager.RegisterViewWithRegion("<#= SformUserControlClassName #><#= RlistUserControlRegionPropertyName #>", typeof(<#= SformUserControlClassName #>));
                ...
            }
            ...
        }
<#       
    }
#>

    "<#= RlistUserControlClassName #>" UserControl is defined in the "<#= RlistUserControlProject #>"-project.
    In the file of IModule-class of "<#= RlistUserControlProject #>"-project the following line of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            // According to requirements of the "<#= RlistViewModelClassName #>.cs"-file of "<#= RlistUserControlProject #>"-project. 
            ViewModelLocationProvider.Register<<#= RlistUserControlClassName #>, <#= RlistViewModelClassName #>>();
            // According to requirements of the "<#= RlistViewModelClassName #>.cs"-file of "<#= RlistUserControlProject #>"-project. 
            containerRegistry.RegisterForRegionNavigation<<#= RlistUserControlClassName #>, <#= RlistViewModelClassName #>>("<#= RlistUserControlClassName #>");
            // According to requirements of the "<#= RlistViewModelClassName #>.cs"-file of "<#= RlistUserControlProject #>"-project. 
            containerRegistry.Register<ContentView, <#= RlistUserControlClassName #>>("<#= RlistUserControlClassName #>");
            ...
        }
*/

namespace <#= RlistViewModelNameSpace #> {

    public class <#= RlistViewModelClassName #>: <#= RegionAwareViewModelBaseClassName #>, IRegionAware 
    {
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected <#= GetModelServiceInterfaceName(Model) #> <#= FormServicePrefix #><#= Model.ViewName #> = null;
        public <#= RlistViewModelClassName #>(<#= GetModelServiceInterfaceName(Model) #> _<#= FormServicePrefix #><#= Model.ViewName #>, <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName  #>) {
            this.<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
            this.<#= FormServicePrefix #><#= Model.ViewName #> = _<#= FormServicePrefix #><#= Model.ViewName #>;
            PermissionMask = <#= AppSettingServicePropertyName #>.GetViewModelMask("<#= Model.ViewName #>");
            _<#= TableMenuItemsPropertyName #> = GetDefault<#= TableMenuItemsPropertyName #>();
            _<#= RowMenuItemsPropertyName #> = GetDefault<#= RowMenuItemsPropertyName #>();
        }

        protected int PermissionMask = 0; 


        public bool <#= CanAddPropertyName #>
        { 
            get
            {
                return ((PermissionMask & 8) == 8) && <#= CanAddParentPropertyName #>;
            }
        }
        public bool <#= CanUpdPropertyName #>
        { 
            get
            {
                return ((PermissionMask & 4) == 4) && <#= CanUpdParentPropertyName #>;
            }
        }
        public bool <#= CanDelPropertyName #>
        { 
            get
            {
                return ((PermissionMask & 2) == 2) && <#= CanDelParentPropertyName #>;
            }
        }

        public bool <#= CanAddDetailPropertyName #>
        { 
            get
            {
                return <#= CanAddDetailParentPropertyName #>;
            }
        }
        public bool <#= CanUpdDetailPropertyName #>
        { 
            get
            {
                return <#= CanUpdDetailParentPropertyName #>;
            }
        }
        public bool <#= CanDelDetailPropertyName #>
        { 
            get
            {
                return <#= CanDelDetailParentPropertyName #>;
            }
        }

        #region <#= CaptionPropertyName #>
        string _<#= CaptionPropertyName #> = "<#= Model.PluralTitle #>";
        public string <#= CaptionPropertyName #>
        { 
            get
            {
                return _<#= CaptionPropertyName #>;
            }
            set {
                if(_<#= CaptionPropertyName #> != value) {
                    _<#= CaptionPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= RowMenuItemsPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= RowMenuItemsPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= RowUpdMIPropertyName #>", Caption="Update item", IconName="TableEdit", IconColor=Color.Default, Enabled=true, Data=null, Command = <#= RowMenuItemsCommandPropertyName #>},
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= RowDelMIPropertyName #>", Caption="Delete item", IconName="TableRemove", IconColor=Color.Default, Enabled=true, Data=null, Command = <#= RowMenuItemsCommandPropertyName #>},
<#
        foreach(string detailViewName in detailViews) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, RlistUserControlFolder);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
#>
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= RowMIPrefixPropertyName #><#= detailViewClassName #><#= foreignKey.NavigationName #>", <#= CaptionPropertyName #>="<#= detailViewName #>: <#= foreignKey.NavigationName #>", IconName="ArrowRightBold", IconColor=Color.Default, Enabled=true, Data=null, FeedbackData=null, Command = <#= RowMenuItemsCommandPropertyName #>},
<#
            }
        }
#>

            };
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= RowMenuItemsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= RowMenuItemsPropertyName #>
        { 
            get
            {
                return _<#= RowMenuItemsPropertyName #>;
            }
            set
            {
                if (_<#= RowMenuItemsPropertyName #> != value)
                {
                    _<#= RowMenuItemsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= TableMenuItemsPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= TableMenuItemsPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= TableAddMIPropertyName #>", Caption="Add Item", IconName="TablePlus", IconColor=Color.Default, Enabled=true, Data=null, Command = <#= TableMenuItemsCommandPropertyName #>},
            };
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= TableMenuItemsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= TableMenuItemsPropertyName #>
        { 
            get
            {
                return _<#= TableMenuItemsPropertyName #>;
            }
            set
            {
                if (_<#= TableMenuItemsPropertyName #> != value)
                {
                    _<#= TableMenuItemsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= HiddenFiltersPropertyName #>
        IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersPropertyName #> = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
        public IEnumerable<IWebServiceFilterRsltInterface> <#= HiddenFiltersPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersPropertyName #> != value)
                {
                    _<#= HiddenFiltersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        protected void OnNavigationResult(IRegionNavigationResult navResult) {
            if (<#= IsDestroyedPropertyName #>) return;
            if (navResult.Result.HasValue) {
                if (navResult.Result.Value) return;
            }
            string navErrorMsg = "Unknown Navigation Error";
            if (navResult.Error != null)
            {
                navErrorMsg = navResult.Error.Message;
                Exception inner = navResult.Error.InnerException;
                while (inner != null)
                {
                    navErrorMsg = navErrorMsg + ": " + inner.Message;
                    inner = inner.InnerException;
                }
            }
            navResult.Context.NavigationService.RequestNavigate(new Uri("<#= PageNotFoundUserControlClassName #>", UriKind.Relative));
            <#= AppSettingServicePropertyName #>.ShowErrorMessage("Navigation Exception", navErrorMsg);
        }
<#
        foreach(string detailViewName in detailViews) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, RlistUserControlFolder);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
#>
        #region <#= detailViewClassName #><#= foreignKey.NavigationName #>Command
        public void <#= detailViewClassName #><#= foreignKey.NavigationName #>Command(<#= modelInterfaceClassName #> selected) { 
            if (<#= IsDestroyedPropertyName #>) return;
            if (((<#= AppSettingServicePropertyName #>.GetViewModelMask("<#= detailView.ViewName #>") & 1) != 1 )) {
                <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative), OnNavigationResult);
                return;
            }
            if(selected == null) return;
            NavigationParameters navigationParameters = new NavigationParameters();
<#
                    foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) {
                        List<ModelViewPropertyOfVwSerializable> detailProps = GetDetailViewForeignKeyProps(Model, primKey, detailView, foreignKey, null);
                        foreach(ModelViewPropertyOfVwSerializable detailProp in detailProps) {
#>
            
            navigationParameters.Add("<#= GetModelPropertyName(detailProp, detailView) #>", selected.<#= GetModelPropertyName(primKey, Model) #>);
<#
                        }
                    }
#>
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= detailViewClassName #>", UriKind.Relative), OnNavigationResult, navigationParameters);
        }
        #endregion
<#
            }
        }
#>





        #region <#= SformAfterAddItemPropertyName #>
        protected object _<#= SformAfterAddItemPropertyName #> = null;
        public object <#= SformAfterAddItemPropertyName #>
        { 
            get
            {
                return _<#= SformAfterAddItemPropertyName #>;
            }
            set
            {
                if (_<#= SformAfterAddItemPropertyName #> != value)
                {
                    _<#= SformAfterAddItemPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= SformAfterUpdItemPropertyName #>
        protected object _<#= SformAfterUpdItemPropertyName #> = null;
        public object <#= SformAfterUpdItemPropertyName #>
        { 
            get
            {
                return _<#= SformAfterUpdItemPropertyName #>;
            }
            set
            {
                if (_<#= SformAfterUpdItemPropertyName #> != value)
                {
                    _<#= SformAfterUpdItemPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= SformAfterDelItemPropertyName #>
        protected object _<#= SformAfterDelItemPropertyName #> = null;
        public object <#= SformAfterDelItemPropertyName #>
        { 
            get
            {
                return _<#= SformAfterDelItemPropertyName #>;
            }
            set
            {
                if (_<#= SformAfterDelItemPropertyName #> != value)
                {
                    _<#= SformAfterDelItemPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= SformAddItemCommandPropertyName #>
        public void <#= SformAddItemCommandPropertyName #>() {
            if (<#= IsDestroyedPropertyName #>) return;
            if (!<#= CanAddPropertyName #>) {
                <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative), OnNavigationResult);
                return;
            }

            NavigationParameters navigationParameters = new NavigationParameters();
            foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf in <#= HiddenFiltersPropertyName #>) {
                navigationParameters.Add(hf.fltrName, hf.fltrValue);
            }
            navigationParameters.Add("<#= EformModeEnumClassName #>", <#= EformModeEnumClassName #>.AddMode);
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= ReditUserControlClassName #>", UriKind.Relative), OnNavigationResult, navigationParameters);
        }
        #endregion
        #region <#= TableMenuItemsCommandPropertyName #>
        protected ICommand _<#= TableMenuItemsCommandPropertyName #> = null;
        public ICommand <#= TableMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= TableMenuItemsCommandPropertyName #> ?? (_<#= TableMenuItemsCommandPropertyName #> = new Command((p) => <#= TableMenuItemsCommandPropertyName #>Execute(p), (p) => <#= TableMenuItemsCommandPropertyName #>CanExecute(p)));
            }
        }
        protected void <#= TableMenuItemsCommandPropertyName #>Execute(object prm)
        {
            if (<#= IsDestroyedPropertyName #>) return;
            if(prm == null) return;
            <#= IWebServiceFilterMenuInterfaceClassName #> mi = prm as <#= IWebServiceFilterMenuInterfaceClassName #>;
            if (mi == null) return;
            if(mi.Id == "<#= TableAddMIPropertyName #>") {
                <#= SformAddItemCommandPropertyName #>();
            }
        }
        protected bool <#= TableMenuItemsCommandPropertyName #>CanExecute(object prm)
        {
            <#= IWebServiceFilterMenuInterfaceClassName #> mi = prm as <#= IWebServiceFilterMenuInterfaceClassName #>;
            if (mi != null) {
                if(mi.Id == "<#= TableAddMIPropertyName #>") {
                    return <#= CanAddPropertyName #>;
                }
            }
            return false; 
        }
        #endregion


        #region <#= SformUpdItemCommandPropertyName #>
        public void <#= SformUpdItemCommandPropertyName #>(<#= modelInterfaceClassName #> selected) {
            if (<#= IsDestroyedPropertyName #>) return;
            if (selected == null) return;
            if (!<#= CanUpdPropertyName #>) {
                <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative), OnNavigationResult);
                return;
            }

            NavigationParameters navigationParameters = new NavigationParameters();
            foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf in <#= HiddenFiltersPropertyName #>) {
                navigationParameters.Add(hf.fltrName, hf.fltrValue);
            }
            navigationParameters.Add("<#= EformModeEnumClassName #>", <#= EformModeEnumClassName #>.UpdateMode);
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
            navigationParameters.Add("<#= GetPrimKeyVarName(pk) #>", selected.<#= GetModelPropertyName(pk, Model) #>);
<#
            }
#>
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= ReditUserControlClassName #>", UriKind.Relative), OnNavigationResult, navigationParameters);
        }
        #endregion
        #region <#= SformDelItemCommandPropertyName #>
        public void <#= SformDelItemCommandPropertyName #>(<#= modelInterfaceClassName #> selected) {
            if (<#= IsDestroyedPropertyName #>) return;
            if (selected == null) return;
            if(!<#= CanDelPropertyName #>) {
                <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative), OnNavigationResult);
                return;
            }

            NavigationParameters navigationParameters = new NavigationParameters();
            foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf in <#= HiddenFiltersPropertyName #>) {
                navigationParameters.Add(hf.fltrName, hf.fltrValue);
            }
            navigationParameters.Add("<#= EformModeEnumClassName #>", <#= EformModeEnumClassName #>.DeleteMode);
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
            navigationParameters.Add("<#= GetPrimKeyVarName(pk) #>", selected.<#= GetModelPropertyName(pk, Model) #>);
<#
            }
#>
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= ReditUserControlClassName #>", UriKind.Relative), OnNavigationResult, navigationParameters);
        }
        #endregion
        #region <#= RowMenuItemsCommandPropertyName #>
        protected ICommand _<#= RowMenuItemsCommandPropertyName #> = null;
        public ICommand <#= RowMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= RowMenuItemsCommandPropertyName #> ?? (_<#= RowMenuItemsCommandPropertyName #> = new Command((p) => <#= RowMenuItemsCommandPropertyName #>Execute(p), (p) => <#= RowMenuItemsCommandPropertyName #>CanExecute(p)));
            }
        }
        protected void <#= RowMenuItemsCommandPropertyName #>Execute(object prm)
        {
            if (<#= IsDestroyedPropertyName #>) return;
            <#= IWebServiceFilterMenuInterfaceClassName #> mi = prm as <#= IWebServiceFilterMenuInterfaceClassName #>;
            if (mi == null) return;
            <#= modelInterfaceClassName #> arow = mi.FeedbackData as <#= modelInterfaceClassName #>;
            if (arow == null) return;
            switch(mi.Id) {
                case "<#= RowUpdMIPropertyName #>":
                    <#= SformUpdItemCommandPropertyName #>(arow);
                    break;
                case "<#= RowDelMIPropertyName #>":
                    <#= SformDelItemCommandPropertyName #>(arow);
                    break;
<#
        foreach(string detailViewName in detailViews) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, RlistUserControlFolder);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
#>
                case "<#= RowMIPrefixPropertyName #><#= detailViewClassName #><#= foreignKey.NavigationName #>":
                    <#= detailViewClassName #><#= foreignKey.NavigationName #>Command(arow);
                    break;
<#
            }
        }

#>
                default:
                    break;
            }         
        }
        protected bool <#= RowMenuItemsCommandPropertyName #>CanExecute(object prm)
        {
            if (<#= IsDestroyedPropertyName #>) return false;
            <#= IWebServiceFilterMenuInterfaceClassName #> mi = prm as <#= IWebServiceFilterMenuInterfaceClassName #>;
            if (mi != null) {
                switch(mi.Id) {
                    case "<#= RowUpdMIPropertyName #>":
                        return <#= CanUpdPropertyName #>;
                    case "<#= RowDelMIPropertyName #>":
                        return <#= CanDelPropertyName #>;
<#
        foreach(string detailViewName in detailViews) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, RlistUserControlFolder);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
#>
                    case "<#= RowMIPrefixPropertyName #><#= detailViewClassName #><#= foreignKey.NavigationName #>":
                        return ((<#= AppSettingServicePropertyName #>.GetViewModelMask("<#= detailView.ViewName #>") & 1) == 1);
<#
            }
        }

#>
                    default:
                        break;
                }         
            }
            return false; 
        }
        #endregion

        #region <#= SelectedRowPropertyName #>
        //protected object _<#= SelectedRowPropertyName #> = null;
        //public object <#= SelectedRowPropertyName #> {
        //    get {
        //    }
        //    set {
        //        if(_<#= SelectedRowPropertyName #> != value) {
        //            _<#= SelectedRowPropertyName #> = value;
        //            OnPropertyChanged();
        //        }
        //    }
        //}
        #endregion

       #region <#= SelectedRowCommandPropertyName #>
       protected ICommand _<#= SelectedRowCommandPropertyName #> = null;
       public ICommand <#= SelectedRowCommandPropertyName #>
       {
           get
           {
               return _<#= SelectedRowCommandPropertyName #> ?? (_<#= SelectedRowCommandPropertyName #> = new Command((p) => <#= SelectedRowCommandPropertyName #>Execute(p), (p) => <#= SelectedRowCommandPropertyName #>CanExecute(p)));
           }
       }
       protected void <#= SelectedRowCommandPropertyName #>Execute(object prm)
       {
           // <#= SelectedRowPropertyName #> = prm;
       }
       protected bool <#= SelectedRowCommandPropertyName #>CanExecute(object prm)
       {
           return true; 
       }
       #endregion

       #region <#= IsParentLoadedPropertyName #>
       bool _<#= IsParentLoadedPropertyName #> = false;
       public bool <#= IsParentLoadedPropertyName #>
       { 
           get
           {
               return _<#= IsParentLoadedPropertyName #>;
           }
           set {
               if(_<#= IsParentLoadedPropertyName #> != value) {
                   _<#= IsParentLoadedPropertyName #> = value;
                   OnPropertyChanged();
               }
           }
       }
       #endregion
       #region IRegionAware
       bool <#= IsNavigatedBackPropertyName #> = false;
       public bool IsNavigationTarget(INavigationContext navigationContext) {
            return true;
       }
       public void OnNavigatedFrom(INavigationContext navigationContext) {
            <#= CurrentNavigationContextPropertyName #> = null;
       }
       public void OnNavigatedTo(INavigationContext navigationContext) {
            if (<#= IsDestroyedPropertyName #>) return;
            INavigationParameters prms = navigationContext.Parameters;
            PermissionMask = <#= AppSettingServicePropertyName #>.GetViewModelMask("<#= Model.ViewName #>");
            if ((PermissionMask & 1) != 1) {
                if (navigationContext.NavigationService.Journal.CurrentEntry.Uri.OriginalString == "<#= AccessDeniedUserControlClassName #>")
                {
                    navigationContext.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative), OnNavigationResult);
                    return;
                }
                else if(navigationContext.NavigationService.Journal.CanGoBack) {
                    // it should be intercepted by prev item in navigation chain
                    throw new Exception("Access Denied to navigate <#= Model.ViewName #>");
                } else {
                    // this is a first item in navigation chain, so navigationContext.Parameters are not expected
                    navigationContext.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative), OnNavigationResult);
                    return;
                }
            }
            <#= CurrentNavigationContextPropertyName #> = navigationContext;
            Task.Run(() =>
            {
                MainThread.BeginInvokeOnMainThread(() =>
                {
                    OnPropertyChanged("<#= ShowBackBtnPropertyName #>");
                    (<#= OnNavigationBackCommandPropertyName #> as Command).ChangeCanExecute();
                });
            });
            <#= SformAfterAddItemPropertyName  #> = null; 
            <#= SformAfterUpdItemPropertyName  #> = null; 
            <#= SformAfterDelItemPropertyName  #> = null; 

            if ((!<#= IsParentLoadedPropertyName #>) || (<#= IsNavigatedBackPropertyName #>)) {
                ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> hf = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
<#
            foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>          
                if(prms.ContainsKey("<#= GetModelPropertyName(sclrProp, Model) #>")) {
                        hf.Add(new <#= WebServiceFilterRsltViewModelClassName #>() {
                            fltrName = "<#= GetModelPropertyName(sclrProp, Model) #>",
                            fltrDataType = "<#= GetCCharpDatatype(sclrProp, Model) #>",
                            fltrOperator = "eq",
                            fltrValue = prms.GetValue<<#= GetPropertyTypeName(sclrProp) #>>("<#= GetModelPropertyName(sclrProp, Model) #>"),
                            fltrError = null
                        });
                }
<#
            }
#>          
                ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> chf = <#= HiddenFiltersPropertyName #> as ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>;
                bool resetHF = chf.Count != hf.Count;
                if ((!resetHF) && (hf.Count > 0)) {
                    foreach(<#= IWebServiceFilterRsltInterfaceClassName #> citm in chf) {
                        <#= IWebServiceFilterRsltInterfaceClassName #> itm = hf.Where(h => h.fltrName == citm.fltrName).FirstOrDefault();
                        if(itm == null)
                        {
                            resetHF = true;
                            break;
                        }
                        if (!(itm.fltrValue == citm.fltrValue))
                        {
                            resetHF = true;
                            break;
                        }
                    }
                } 
                if (resetHF) { <#= HiddenFiltersPropertyName #> = hf; }
            }
          
            if (prms.ContainsKey("<#= EformModeEnumClassName #>")) {
                <#= EformModeEnumClassName #> mode = prms.GetValue<<#= EformModeEnumClassName #>>("<#= EformModeEnumClassName #>");
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
                <#= GetPropertyTypeName(pk) #> <#= GetPrimKeyVarName(pk) #> = default(<#= GetPropertyTypeName(pk) #>);
                if(prms.ContainsKey("<#= GetPrimKeyVarName(pk) #>")) {
                    <#= GetPrimKeyVarName(pk) #> = prms.GetValue<<#= GetPropertyTypeName(pk) #>>("<#= GetPrimKeyVarName(pk) #>");
                }
<#
            }
#>
            
                if ((mode == <#= EformModeEnumClassName #>.AddMode) || (mode == <#= EformModeEnumClassName #>.UpdateMode)) {
                    // <#= GetInterfaceName(Model) #> tdata 
                    _ = <#= FormServicePrefix #><#= Model.ViewName #>.<#= GetOneMethodName #>(
<#
            {
                bool isFirst= true;
                foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
                    if (isFirst) {
                        isFirst = false;
#>
                            <#= GetPrimKeyVarName(pk) #>
<#
                    } else {
#>
                          , <#= GetPrimKeyVarName(pk) #>
<#
                    }
                }
            }
#>
                        ).ContinueWith((tdata) => {MainThread.InvokeOnMainThreadAsync(() =>{
                            if (tdata.Status == TaskStatus.RanToCompletion) {
                                if (mode == <#= EformModeEnumClassName #>.AddMode) {
                                    <#= SformAfterAddItemPropertyName  #> = tdata.Result; 
                                } else {
                                    <#= SformAfterUpdItemPropertyName  #> = tdata.Result; 
                                }
                            } else {
                                if (mode == <#= EformModeEnumClassName #>.AddMode) {
                                    <#= SformAfterAddItemPropertyName  #> = null; 
                                } else {
                                    <#= SformAfterUpdItemPropertyName  #> = null; 
                                }
                            }
                            <#= IsParentLoadedPropertyName #> = true;
                            <#= IsNavigatedBackPropertyName #> = false;
                        });
                    });
                } else {
                    <#= GetInterfaceName(Model) #> data = <#= FormServicePrefix #><#= Model.ViewName #>.<#= CopyToModelMethodName #>(null,null);
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
                    data.<#= GetModelPropertyName(pk, Model) #> = <#= GetPrimKeyVarName(pk) #>;
<#
            }
#>
                    <#= SformAfterDelItemPropertyName  #> = data;
                    <#= IsParentLoadedPropertyName #> = true;
                    <#= IsNavigatedBackPropertyName #> = false;
                }
            } else {
                <#= IsParentLoadedPropertyName #> = true;
                <#= IsNavigatedBackPropertyName #> = false;
            }
        }
        #endregion

        #region <#= ShowBackBtnPropertyName #>
        public bool <#= ShowBackBtnPropertyName #> {
            get {
                return (<#= CurrentNavigationContextPropertyName #> == null) ?  false : <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack;
            }
        }
        #endregion
        #region <#= OnNavigationBackCommandPropertyName #>
        protected ICommand _<#= OnNavigationBackCommandPropertyName #> = null;
        public ICommand <#= OnNavigationBackCommandPropertyName #>
        {
            get
            {
                return _<#= OnNavigationBackCommandPropertyName #> ?? (_<#= OnNavigationBackCommandPropertyName #> = new Command(() => <#= OnNavigationBackCommandPropertyName #>Execute(), () => <#= OnNavigationBackCommandPropertyName #>CanExecute()));
            }
        }
        protected void <#= OnNavigationBackCommandPropertyName #>Execute()
        {
            if (<#= IsDestroyedPropertyName #>) return;
            if (<#= CurrentNavigationContextPropertyName #> != null) {
                if(<#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack) {
                    <#= IsNavigatedBackPropertyName #> = true;
                    <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.GoBack();
                }
            }
        }
        protected bool <#= OnNavigationBackCommandPropertyName #>CanExecute()
        {
            return (<#= CurrentNavigationContextPropertyName #> == null) ?  false : <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack;
        }
        #endregion

        public override void <#= OnDestroyPropertyName #>() {
            base.<#= OnDestroyPropertyName #>();
            _<#= HiddenFiltersPropertyName #> = null;
            _<#= TableMenuItemsPropertyName #> = null;
            _<#= RowMenuItemsPropertyName #> = null;
            _<#= CaptionPropertyName #> = null;
            _<#= SformAfterAddItemPropertyName #> = null;
            _<#= SformAfterUpdItemPropertyName #> = null;
            _<#= SformAfterDelItemPropertyName #> = null;
        }

    }
}




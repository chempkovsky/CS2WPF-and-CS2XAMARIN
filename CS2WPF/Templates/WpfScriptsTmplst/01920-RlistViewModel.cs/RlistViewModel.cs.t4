<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Windows;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using Prism.Services.Dialogs;
using Prism.Regions;
using System.Linq;
using System.Threading.Tasks;

<#

    string EformModeEnumFolder                      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName                   = GetContextModelClassName(Context, EformModeEnumFolder);
    string EformModeEnumNameSpace                   = GetContextModelNameSpace(Context, EformModeEnumFolder);

    string IAppGlblSettingsServiceFolder            = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName         = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace         = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string ISformViewModelInterfaceFolder      = "00198-ISformViewModelInterface.cs";
    string ISformViewModelInterfaceClassName   = GetContextModelClassName(Context, ISformViewModelInterfaceFolder);
    string ISformViewModelInterfaceNameSpace   = GetContextModelNameSpace(Context, ISformViewModelInterfaceFolder);

    string IWebServiceFilterRsltInterfaceFolder     = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder     = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterMenuInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string WebServiceFilterMenuViewModelFolder      = "00217-WebServiceFilterMenuViewModel.cs";
    string WebServiceFilterMenuViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterMenuViewModelFolder);
    string WebServiceFilterMenuViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterMenuViewModelFolder);

    string RoutedEventExtFolder                     = "00222-RoutedEventExt.cs";
    string RoutedEventExtClassName                  = GetContextModelClassName(Context, RoutedEventExtFolder);
    string RoutedEventExtNameSpace                  = GetContextModelNameSpace(Context, RoutedEventExtFolder);

    string RoutedCommandExtFolder                   = "00224-RoutedCommandExt.cs";
    string RoutedCommandExtClassName                = GetContextModelClassName(Context, RoutedCommandExtFolder);
    string RoutedCommandExtNameSpace                = GetContextModelNameSpace(Context, RoutedCommandExtFolder);

    string AccessDeniedUserControlFolder     = "00678-AccessDeniedUserControl.xaml.cs";
    string AccessDeniedUserControlClassName  = GetContextModelClassName(Context, AccessDeniedUserControlFolder);
    string AccessDeniedUserControlNameSpace  = GetContextModelNameSpace(Context, AccessDeniedUserControlFolder);

    string PageNotFoundUserControlFolder     = "00684-PageNotFoundUserControl.xaml.cs";
    string PageNotFoundUserControlClassName  = GetContextModelClassName(Context, PageNotFoundUserControlFolder);
    string PageNotFoundUserControlNameSpace  = GetContextModelNameSpace(Context, PageNotFoundUserControlFolder);

    string modelInterfaceFolder             = "01100-Interface.cs";
    string modelInterfaceClassName          = GetInterfaceName(Model);
    string modelInterfaceNameSpace          = GetModelNameSpace(Model, modelInterfaceFolder);


    string SformUserControlFolder           = "01420-SformUserControl.xaml.cs";
    string SformUserControlClassName        = GetModelClassName(Model, SformUserControlFolder);
    string SformUserControlNameSpace        = GetModelNameSpace(Model, SformUserControlFolder);
    string SformUserControlProject          = GetModelProjectName(Model, SformUserControlFolder);


    string ReditUserControlFolder           = "01816-ReditUserControl.xaml.cs";
    string ReditUserControlClassName        = GetModelClassName(Model, ReditUserControlFolder);
    string ReditUserControlNameSpace        = GetModelNameSpace(Model, ReditUserControlFolder);

    string RlistUserControlFolder           = "01916-RlistUserControl.xaml.cs";
    string RlistUserControlClassName        = GetModelClassName(Model, RlistUserControlFolder);
    string RlistUserControlNameSpace        = GetModelNameSpace(Model, RlistUserControlFolder);
    string RlistUserControlProject          = GetModelProjectName(Model, RlistUserControlFolder);

    string RlistViewModelFolder             = "01920-RlistViewModel.cs";
    string RlistViewModelClassName          = GetModelClassName(Model, RlistViewModelFolder);
    string RlistViewModelNameSpace          = GetModelNameSpace(Model, RlistViewModelFolder);



    string HiddenFiltersPropertyName            = "HiddenFilters";
    string HiddenFiltersVMPropertyName            = "HiddenFiltersVM";
    string OnHiddenFiltersChangedPropertyName   = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName = "HiddenFiltersPropertyChanged";

    string TableMenuItemsPropertyName = "TableMenuItems";
    string TableMenuItemsVMPropertyName = "TableMenuItemsVM";
    string OnTableMenuItemsChangedPropertyName   = "OnTableMenuItemsChanged";
    string TableMenuItemsPropertyChangedPropertyName = "TableMenuItemsPropertyChanged";

    string RowMenuItemsPropertyName = "RowMenuItems";
    string RowMenuItemsVMPropertyName = "RowMenuItemsVM";
    string OnRowMenuItemsChangedPropertyName   = "OnRowMenuItemsChanged";
    string RowMenuItemsPropertyChangedPropertyName = "RowMenuItemsPropertyChanged";

    string IsOnLoadedCalledPropertyName         = "IsOnLoadedCalled";

    string RoutedEventHandlersPropertyName = "RoutedEventHandlers";
    string RoutedCommandHandlersPropertyName = "RoutedCommandHandlers";
    string RegionPropertyName = "Region";
    string RlistRegionPropertyName = "RlistRegion";

    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";

    string FormRootServicePropertyName          = "FrmRootSrv";
    string AppSettingServicePropertyName        = "GlblSettingsSrv";
    string GetWithFilterMethodName              = "getwithfilter";
    string ColumnSelectorDlgPropertyName        = "ColumnSelectorDlg";

    string CanAddPropertyName                   = "CanAdd";
    string CanAddPropertyChangedPropertyName    = "CanAddPropertyChanged";
    string OnCanAddPropertyChangedPropertyName  = "OnCanAddPropertyChanged";

    string CanUpdPropertyName                   = "CanUpdate";
    string CanUpdPropertyChangedPropertyName    = "CanUpdatePropertyChanged";
    string OnCanUpdPropertyChangedPropertyName  = "OnCanUpdatePropertyChanged";

    string CanDelPropertyName                   = "CanDelete";
    string CanDelPropertyChangedPropertyName    = "CanDeletePropertyChanged";
    string OnCanDelPropertyChangedPropertyName  = "OnCanDeletePropertyChanged";

    string SformAddItemCommandPropertyName      = "SformAddItemCommand";
    string SformUpdItemCommandPropertyName      = "SformUpdItemCommand";
    string SformDelItemCommandPropertyName      = "SformDelItemCommand";
    string SformAfterAddItemCommandPropertyName = "SformAfterAddItemCommand";
    string SformAfterUpdItemCommandPropertyName = "SformAfterUpdItemCommand";
    string SformAfterDelItemCommandPropertyName = "SformAfterDelItemCommand";
    string SformLoadedCommandPropertyName       = "SformLoadedCommand";

    string FormControlModelPropertyName         = "FormControlModel";
    string CaptionPropertyName                  = "Caption";
    string EformModePropertyName                = "EformMode";
    string ShowSubmitPropertyName               = "ShowSubmit";
    string NavigationBackCommandPropertyName    = "NavigationBackCommand";
    string ShowBackBtnPropertyName              = "ShowBackBtn";
    string FormServicePrefix                    = "FrmSrv";
    string RowMIPrefixPropertyName              = "RowMI";

    string GetOneMethodName                     = "getone";
    string CopyToModelNotifyMethodName          = "CopyToModelNotify";
    string CopyToModelMethodName                = "CopyToModel";

    string UIDispatcherInvokePropertyName   = "Application.Current.Dispatcher.Invoke";
    string CurrentNavigationContextPropertyName = "CurrentNavigationContext";

    List<string> detailViews = GetDetailViews(Model, Context, null);
    List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(Model);

    List<string> nmSpaces = new List<string>();
    if ((RlistViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((RlistViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((RlistViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((RlistViewModelNameSpace != RoutedEventExtNameSpace) && (nmSpaces.IndexOf(RoutedEventExtNameSpace) < 0)) 
        nmSpaces.Add(RoutedEventExtNameSpace);
    if ((RlistViewModelNameSpace != WebServiceFilterMenuViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterMenuViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterMenuViewModelNameSpace);
    if ((RlistViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((RlistViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((RlistViewModelNameSpace != RoutedCommandExtNameSpace) && (nmSpaces.IndexOf(RoutedCommandExtNameSpace) < 0)) 
        nmSpaces.Add(RoutedCommandExtNameSpace);
    if ((RlistViewModelNameSpace != EformModeEnumNameSpace) && (nmSpaces.IndexOf(EformModeEnumNameSpace) < 0)) 
        nmSpaces.Add(EformModeEnumNameSpace);
    if ((RlistViewModelNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
    if ((RlistViewModelNameSpace != ISformViewModelInterfaceNameSpace) && (nmSpaces.IndexOf(ISformViewModelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(ISformViewModelInterfaceNameSpace);

    bool IsInTheSameModule = (SformUserControlProject == RlistUserControlProject);
    
    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>
/*

<#
    if(!IsInTheSameModule) {
#>
    "<#= SformUserControlClassName #>"-UserControl is defined in the "<#= SformUserControlProject #>"-project.
    In the file of IModule-class of "<#= SformUserControlProject #>"-project the following line of code must be inserted:

        public void OnInitialized(IContainerProvider containerProvider)
        {
            ...
            IRegionManager regionManager = containerProvider.Resolve(typeof(IRegionManager)) as IRegionManager;
            if (regionManager != null)
            {
                ...
                // According to requirements of the "<#= RlistViewModelClassName #>.cs"-file of "<#= RlistUserControlProject #>"-project. 
                regionManager.RegisterViewWithRegion("<#= SformUserControlClassName #><#= RlistRegionPropertyName #>", typeof(<#= SformUserControlClassName #>));
                ...
            }
            ...
        }
<#       
    }
#>

    "<#= RlistUserControlClassName #>" UserControl is defined in the "<#= RlistUserControlProject #>"-project.
    In the file of IModule-class of "<#= RlistUserControlProject #>"-project the following line of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            // According to requirements of the "<#= RlistViewModelClassName #>.cs"-file of "<#= RlistUserControlProject #>"-project. 
            ViewModelLocationProvider.Register<<#= RlistUserControlClassName #>, <#= RlistViewModelClassName #>>();
            // According to requirements of the "<#= RlistViewModelClassName #>.cs"-file of "<#= RlistUserControlProject #>"-project. 
            containerRegistry.RegisterForNavigation<<#= RlistUserControlClassName #>, <#= RlistViewModelClassName #>>("<#= RlistUserControlClassName #>");
            // According to requirements of the "<#= RlistViewModelClassName #>.cs"-file of "<#= RlistUserControlProject #>"-project. 
            containerRegistry.Register<UserControl, <#= RlistUserControlClassName #>>("<#= RlistUserControlClassName #>");
            ...
        }
*/

namespace <#= RlistViewModelNameSpace #> {
<#
    if(detailViews.Count > 0) {
#>
    public static class <#= RlistViewModelClassName #>Commands
    {

<#
        foreach(string detailViewName in detailViews) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, RlistUserControlFolder);
            if (string.IsNullOrEmpty(detailViewClassName)) {
#>
///// Error: <#= RlistUserControlFolder #>-script has not been generated for <#= detailView.ViewName #>
<#
            }
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
#>
              public static RoutedCommand <#= detailViewClassName #><#= foreignKey.NavigationName #>Command = new RoutedCommand("<#= detailViewClassName #><#= foreignKey.NavigationName #>Command", typeof(<#= RlistViewModelClassName #>Commands));
<#
            }
        }
#>
    }
<#
    }
#>

    public class <#= RlistViewModelClassName #>: INotifyPropertyChanged, INavigationAware 
    {
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected <#= GetModelServiceInterfaceName(Model) #> <#= FormServicePrefix #><#= Model.ViewName #> = null;
        public <#= RlistViewModelClassName #>(<#= GetModelServiceInterfaceName(Model) #> _<#= FormServicePrefix #><#= Model.ViewName #>, <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName  #>) {
            this.<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
            this.<#= FormServicePrefix #><#= Model.ViewName #> = _<#= FormServicePrefix #><#= Model.ViewName #>;

            ObservableCollection<ValueTuple<RoutedEvent, Delegate, bool>> rehs = new ObservableCollection<ValueTuple<RoutedEvent, Delegate, bool>>();
            rehs.Add((<#= RoutedEventExtClassName #>.<#= HiddenFiltersPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>>(this.<#= OnHiddenFiltersChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= TableMenuItemsPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>>(this.<#= OnTableMenuItemsChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= RowMenuItemsPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>>(this.<#= OnRowMenuItemsChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= CanAddPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<bool>(this.<#= OnCanAddPropertyChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= CanUpdPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<bool>(this.<#= OnCanUpdPropertyChangedPropertyName #>), false));
            rehs.Add((<#= RoutedEventExtClassName #>.<#= CanDelPropertyChangedPropertyName #>Event, 
                new RoutedPropertyChangedEventHandler<bool>(this.<#= OnCanDelPropertyChangedPropertyName #>), false));

            rehs.Add((FrameworkElement.LoadedEvent, 
                new RoutedEventHandler(this.OnLoaded), false));
            _<#= RoutedEventHandlersPropertyName #> = rehs;

            CommandBindingCollection cbsc = new CommandBindingCollection();
            CommandBinding cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= SformAddItemCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= SformAddItemCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= SformAddItemCommandPropertyName #>));
            cbsc.Add(cb);
                           cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= SformUpdItemCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= SformUpdItemCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= SformUpdItemCommandPropertyName #>));
            cbsc.Add(cb);
                           cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= SformDelItemCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= SformDelItemCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= SformDelItemCommandPropertyName #>));

            cbsc.Add(cb);
                           cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= NavigationBackCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= NavigationBackCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= NavigationBackCommandPropertyName #>));
            cbsc.Add(cb);
<#
    if(detailViews.Count > 0) {
        foreach(string detailViewName in detailViews) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, RlistUserControlFolder);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
#>
            cb = new CommandBinding(<#= RlistViewModelClassName #>Commands.<#= detailViewClassName #><#= foreignKey.NavigationName #>Command, new ExecutedRoutedEventHandler(this.Executed<#= detailViewClassName #><#= foreignKey.NavigationName #>Command), new CanExecuteRoutedEventHandler(CanExecute<#= detailViewClassName #><#= foreignKey.NavigationName #>Command));
            cbsc.Add(cb);
<#
            }
        }
    }
#>
            cb = new CommandBinding(<#= RoutedCommandExtClassName #>.<#= SformLoadedCommandPropertyName #>, new ExecutedRoutedEventHandler(this.Executed<#= SformLoadedCommandPropertyName #>), new CanExecuteRoutedEventHandler(CanExecute<#= SformLoadedCommandPropertyName #>));
            cbsc.Add(cb);
            _<#= RoutedCommandHandlersPropertyName #> = cbsc;

            PermissionMask = <#= AppSettingServicePropertyName #>.GetViewModelMask("<#= Model.ViewName #>");
            _<#= TableMenuItemsVMPropertyName #> = GetDefault<#= TableMenuItemsVMPropertyName #>();
            _<#= RowMenuItemsVMPropertyName #> = GetDefault<#= RowMenuItemsVMPropertyName #>();
        }
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        protected int PermissionMask = 0; 
        protected NavigationContext <#= CurrentNavigationContextPropertyName #> = null;
        //protected bool <#= IsOnLoadedCalledPropertyName #> = false;
        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            if (!e.Handled) {
                e.Handled = true;
            }
        }


        #region <#= RoutedEventHandlersPropertyName #>
        protected IEnumerable<ValueTuple<RoutedEvent, Delegate, bool>> _<#= RoutedEventHandlersPropertyName #> = null;
        public IEnumerable<ValueTuple<RoutedEvent, Delegate, bool>> <#= RoutedEventHandlersPropertyName #>
        { 
            get
            {
                return _<#= RoutedEventHandlersPropertyName #>;
            }
            set
            {
                if (_<#= RoutedEventHandlersPropertyName #> != value)
                {
                    _<#= RoutedEventHandlersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= RoutedCommandHandlersPropertyName #>
        protected CommandBindingCollection _<#= RoutedCommandHandlersPropertyName #> = null;
        public CommandBindingCollection <#= RoutedCommandHandlersPropertyName #>
        { 
            get
            {
                return _<#= RoutedCommandHandlersPropertyName #>;
            }
            set
            {
                if (_<#= RoutedCommandHandlersPropertyName #> != value)
                {
                    _<#= RoutedCommandHandlersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        protected <#= ISformViewModelInterfaceClassName #> SformViewModel = null;
        #region <#= SformLoadedCommandPropertyName #>
        public void Executed<#= SformLoadedCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) {
            e.Handled = true;
            SformViewModel = e.Parameter as <#= ISformViewModelInterfaceClassName #>;
        }
        public void CanExecute<#= SformLoadedCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            e.CanExecute = true;
        }
        #endregion
        #region <#= CaptionPropertyName #>
        string _<#= CaptionPropertyName #> = "<#= Model.PluralTitle #>";
        public string <#= CaptionPropertyName #>
        { 
            get
            {
                return _<#= CaptionPropertyName #>;
            }
            set {
                if(_<#= CaptionPropertyName #> != value) {
                    _<#= CaptionPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= CanAddPropertyName #>
        protected void <#= OnCanAddPropertyChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<bool> evarg) {
            bool newVal = false;
            if(evarg != null) {
                evarg.Handled = true;
                newVal = evarg.NewValue;
            }
            <#= CanAddPropertyName #> = newVal;
        }
        protected bool _<#= CanAddPropertyName #> = false;
        public bool <#= CanAddPropertyName #>
        { 
            get
            {
                return _<#= CanAddPropertyName #>;
            }
            set
            {
                if (_<#= CanAddPropertyName #> != value)
                {
                    _<#= CanAddPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= CanUpdPropertyName #>
        protected void <#= OnCanUpdPropertyChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<bool> evarg) {
            bool newVal = false;
            if(evarg != null) {
                evarg.Handled = true;
                newVal = evarg.NewValue;
            }
            <#= CanUpdPropertyName #> = newVal;
        }
        protected bool _<#= CanUpdPropertyName #> = false;
        public bool <#= CanUpdPropertyName #>
        { 
            get
            {
                return _<#= CanUpdPropertyName #>;
            }
            set
            {
                if (_<#= CanUpdPropertyName #> != value)
                {
                    _<#= CanUpdPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= CanDelPropertyName #>
        protected void <#= OnCanDelPropertyChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<bool> evarg) {
            bool newVal = false;
            if(evarg != null) {
                evarg.Handled = true;
                newVal = evarg.NewValue;
            }
            <#= CanDelPropertyName #> = newVal;
        }
        protected bool _<#= CanDelPropertyName #> = false;
        public bool <#= CanDelPropertyName #>
        { 
            get
            {
                return _<#= CanDelPropertyName #>;
            }
            set
            {
                if (_<#= CanDelPropertyName #> != value)
                {
                    _<#= CanDelPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= RowMenuItemsVMPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= RowMenuItemsVMPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "RowUpdMI", Caption="Update item", IconName="TableEdit", IconColor="Primary", Enabled=true, Data=null, Command=<#= RoutedCommandExtClassName #>.<#= SformUpdItemCommandPropertyName #>},
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "RowDelMI", Caption="Delete item", IconName="TableRemove", IconColor="Primary", Enabled=true, Data=null, Command=<#= RoutedCommandExtClassName #>.<#= SformDelItemCommandPropertyName #>},
<#
        foreach(string detailViewName in detailViews) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, RlistUserControlFolder);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
#>
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= RowMIPrefixPropertyName #><#= detailViewClassName #><#= foreignKey.NavigationName #>", <#= CaptionPropertyName #>="<#= detailViewName #>: <#= foreignKey.NavigationName #>", IconName="ArrowRightBold", IconColor="Primary", Enabled=true, Data=null, Command=<#= RlistViewModelClassName #>Commands.<#= detailViewClassName #><#= foreignKey.NavigationName #>Command},
<#
            }
        }
#>

            };
        }
        protected void <#= OnRowMenuItemsChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>> evarg) {
            ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> tmis = GetDefault<#= RowMenuItemsVMPropertyName #>();
            IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> intmis = null;
            if(evarg != null) {
                evarg.Handled = true;
                intmis = evarg.NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>;
            }
            if(intmis != null) {
                foreach(<#= IWebServiceFilterMenuInterfaceClassName #> tmi  in intmis) {
                    tmis.Add( new <#= WebServiceFilterMenuViewModelClassName #>() {Id = tmi.Id, Caption=tmi.Caption,  IconName=tmi.IconName, IconColor=tmi.IconColor, Enabled=tmi.Enabled, Data=tmi.Data, Command=tmi.Command });
                }
            }
            <#= RowMenuItemsVMPropertyName #> = tmis;
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= RowMenuItemsVMPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= RowMenuItemsVMPropertyName #>
        { 
            get
            {
                return _<#= RowMenuItemsVMPropertyName #>;
            }
            set
            {
                if (_<#= RowMenuItemsVMPropertyName #> != value)
                {
                    _<#= RowMenuItemsVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= TableMenuItemsVMPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= TableMenuItemsVMPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "TableAddMI", Caption="Add Item", IconName="TablePlus", IconColor="Primary", Enabled=true, Data=null, Command=<#= RoutedCommandExtClassName #>.<#= SformAddItemCommandPropertyName #>},
            };
        }
        protected void <#= OnTableMenuItemsChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>> evarg) {
            ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> tmis = GetDefault<#= TableMenuItemsVMPropertyName #>();
            IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> intmis = null;
            if(evarg != null) {
                evarg.Handled = true;
                intmis = evarg.NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>;
            }
            if(intmis != null) {
                foreach(<#= IWebServiceFilterMenuInterfaceClassName #> tmi  in intmis) {
                    tmis.Add( new <#= WebServiceFilterMenuViewModelClassName #>() {Id = tmi.Id, Caption=tmi.Caption,  IconName=tmi.IconName, IconColor=tmi.IconColor, Enabled=tmi.Enabled, Data=tmi.Data, Command=tmi.Command });
                }
            }
            <#= TableMenuItemsVMPropertyName #> = tmis;
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= TableMenuItemsVMPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= TableMenuItemsVMPropertyName #>
        { 
            get
            {
                return _<#= TableMenuItemsVMPropertyName #>;
            }
            set
            {
                if (_<#= TableMenuItemsVMPropertyName #> != value)
                {
                    _<#= TableMenuItemsVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= HiddenFiltersVMPropertyName #>
        protected void <#= OnHiddenFiltersChangedPropertyName #>(object sender, RoutedPropertyChangedEventArgs<IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>> evarg)
        {
            IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> hfs = null;
            if(evarg != null) {
                evarg.Handled = true;
                hfs = evarg.NewValue as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>;
            }
            ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> newhfs = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
            if(hfs != null) {
                foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf  in hfs) {
                    newhfs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {fltrName=hf.fltrName, fltrDataType=hf.fltrDataType,  fltrOperator=hf.fltrOperator, fltrValue=hf.fltrValue, fltrError=hf.fltrError });
                }
            }
            <#= HiddenFiltersVMPropertyName #> = newhfs;
        }
        IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersVMPropertyName #> = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
        public IEnumerable<IWebServiceFilterRsltInterface> <#= HiddenFiltersVMPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersVMPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersVMPropertyName #> != value)
                {
                    _<#= HiddenFiltersVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        protected void OnNavigationResult(NavigationResult navResult) {
            if (navResult.Result.HasValue ? navResult.Result.Value : false) return;
            string navErrorMsg = "Unknown Navigation Error";
            if (navResult.Error != null)
            {
                navErrorMsg = navResult.Error.Message;
                Exception inner = navResult.Error.InnerException;
                while (inner != null)
                {
                    navErrorMsg = navErrorMsg + ": " + inner.Message;
                    inner = inner.InnerException;
                }
            }
            if (<#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack) <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.GoBack();
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= PageNotFoundUserControlClassName #>", UriKind.Relative));
            <#= AppSettingServicePropertyName #>.ShowErrorMessage("Navigation Exception", navErrorMsg);
        }
<#
        foreach(string detailViewName in detailViews) {
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
///// can not find the view by Name <#= detailViewName #>
<#
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, RlistUserControlFolder);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
#>
        #region <#= detailViewClassName #><#= foreignKey.NavigationName #>Command
        public void Executed<#= detailViewClassName #><#= foreignKey.NavigationName #>Command(object sender, ExecutedRoutedEventArgs e) { 
            e.Handled = true;
            if (((<#= AppSettingServicePropertyName #>.GetViewModelMask("<#= detailView.ViewName #>") & 1) != 1 )) {
                <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative));
                return;
            }
            <#= modelInterfaceClassName #> selected = e.Parameter as <#= modelInterfaceClassName #>;
            if((selected == null) || (<#= CurrentNavigationContextPropertyName #> == null)) return;
            NavigationParameters navigationParameters = new NavigationParameters();
<#
                    foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) {
                        List<ModelViewPropertyOfVwSerializable> detailProps = GetDetailViewForeignKeyProps(Model, primKey, detailView, foreignKey, null);
                        foreach(ModelViewPropertyOfVwSerializable detailProp in detailProps) {
#>
            
            navigationParameters.Add("<#= GetModelPropertyName(detailProp, detailView) #>", selected.<#= GetModelPropertyName(primKey, Model) #>);
<#
                        }
                    }
#>
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= detailViewClassName #>", UriKind.Relative),
                OnNavigationResult, 
                navigationParameters);
        }
        public void CanExecute<#= detailViewClassName #><#= foreignKey.NavigationName #>Command(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            e.CanExecute = (e.Parameter as <#= modelInterfaceClassName #>) != null;
            e.CanExecute = e.CanExecute ? ((<#= AppSettingServicePropertyName #>.GetViewModelMask("<#= detailView.ViewName #>") & 1)==1)  : false;
        }
        #endregion
<#
            }
        }
#>


        #region <#= SformAddItemCommandPropertyName #>
        public void Executed<#= SformAddItemCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) {
            e.Handled = true;
            UIElement dest = e.OriginalSource as UIElement;
            if (dest == null) return;
            if ((!<#= CanAddPropertyName #>) || (<#= CurrentNavigationContextPropertyName #> == null)) return;
            if ((PermissionMask & 8) != 8) {
                <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative));
                return;
            }

            NavigationParameters navigationParameters = new NavigationParameters();
            foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf in <#= HiddenFiltersVMPropertyName #>) {
                navigationParameters.Add(hf.fltrName, hf.fltrValue);
            }
            navigationParameters.Add("<#= EformModeEnumClassName #>", <#= EformModeEnumClassName #>.AddMode);
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= ReditUserControlClassName #>", UriKind.Relative), 
                OnNavigationResult, 
                navigationParameters);
        }
        public void CanExecute<#= SformAddItemCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            e.CanExecute = <#= CanAddPropertyName #> && (<#= CurrentNavigationContextPropertyName #> != null) && ((PermissionMask & 8) == 8);
        }
        #endregion

        #region <#= SformUpdItemCommandPropertyName #>
        public void Executed<#= SformUpdItemCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) {
            e.Handled = true;
            UIElement dest = e.OriginalSource as UIElement;
            if (dest == null) return;
            <#= modelInterfaceClassName #> selected = e.Parameter as  <#= modelInterfaceClassName #>;
            if ((!<#= CanUpdPropertyName #>) || (selected == null) || (<#= CurrentNavigationContextPropertyName #> == null) ) return;
            if ((PermissionMask & 4) != 4) {
                <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative));
                return;
            }

            NavigationParameters navigationParameters = new NavigationParameters();
            foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf in <#= HiddenFiltersVMPropertyName #>) {
                navigationParameters.Add(hf.fltrName, hf.fltrValue);
            }
            navigationParameters.Add("<#= EformModeEnumClassName #>", <#= EformModeEnumClassName #>.UpdateMode);
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
            navigationParameters.Add("<#= GetPrimKeyVarName(pk) #>", selected.<#= GetModelPropertyName(pk, Model) #>);
<#
            }
#>
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= ReditUserControlClassName #>", UriKind.Relative), 
                OnNavigationResult, 
                navigationParameters);
        }
        public void CanExecute<#= SformUpdItemCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            <#= modelInterfaceClassName #> prm = e.Parameter as  <#= modelInterfaceClassName #>;
            e.CanExecute = (prm != null) && <#= CanUpdPropertyName #>  && (<#= CurrentNavigationContextPropertyName #> != null) && ((PermissionMask & 4) == 4);
        }
        #endregion

        #region <#= SformDelItemCommandPropertyName #>
        public void Executed<#= SformDelItemCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) {
            e.Handled = true;
            UIElement dest = e.OriginalSource as UIElement;
            if (dest == null) return;
            <#= modelInterfaceClassName #> selected = e.Parameter as  <#= modelInterfaceClassName #>;
            if ((!<#= CanDelPropertyName #>) || (selected == null) || (<#= CurrentNavigationContextPropertyName #> == null) ) return;
            if((PermissionMask & 2) != 2) {
                <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= AccessDeniedUserControlClassName #>", UriKind.Relative));
                return;
            }

            NavigationParameters navigationParameters = new NavigationParameters();
            foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf in <#= HiddenFiltersVMPropertyName #>) {
                navigationParameters.Add(hf.fltrName, hf.fltrValue);
            }
            navigationParameters.Add("<#= EformModeEnumClassName #>", <#= EformModeEnumClassName #>.DeleteMode);
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
            navigationParameters.Add("<#= GetPrimKeyVarName(pk) #>", selected.<#= GetModelPropertyName(pk, Model) #>);
<#
            }
#>
            <#= CurrentNavigationContextPropertyName #>.NavigationService.RequestNavigate(new Uri("<#= ReditUserControlClassName #>", UriKind.Relative), 
                OnNavigationResult, 
                navigationParameters);
        }
        public void CanExecute<#= SformDelItemCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
           <#= modelInterfaceClassName #> prm = e.Parameter as  <#= modelInterfaceClassName #>;
            e.CanExecute = (prm != null) && <#= CanDelPropertyName #> && (<#= CurrentNavigationContextPropertyName #> != null) && ((PermissionMask & 2) == 2);
        }
        #endregion

        #region <#= ShowBackBtnPropertyName #>
        public bool <#= ShowBackBtnPropertyName #> {
            get {
                return (<#= CurrentNavigationContextPropertyName #> == null) ?  false : <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack;
            }
        }
        #endregion

        #region INavigationAware
        public bool IsNavigationTarget(NavigationContext navigationContext) {
            return true;
        }
        public void OnNavigatedFrom(NavigationContext navigationContext) {
            <#= CurrentNavigationContextPropertyName #> = navigationContext;
            OnPropertyChanged("<#= ShowBackBtnPropertyName #>");
       }
       public void OnNavigatedTo(NavigationContext navigationContext) {
            <#= CurrentNavigationContextPropertyName #> = navigationContext;
            OnPropertyChanged("<#= ShowBackBtnPropertyName #>");
            if ((<#= AppSettingServicePropertyName #>.GetViewModelMask("<#= Model.ViewName #>") & 1) != 1) {
                throw new Exception("Access Denied to navigate <#= Model.ViewName #>");
            }
            ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> hf = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
            NavigationParameters prms = navigationContext.Parameters;
<#
            foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>          
            if(prms.ContainsKey("<#= GetModelPropertyName(sclrProp, Model) #>")) {
                    hf.Add(new <#= WebServiceFilterRsltViewModelClassName #>() {
                        fltrName = "<#= GetModelPropertyName(sclrProp, Model) #>",
                        fltrDataType = "<#= GetCCharpDatatype(sclrProp, Model) #>",
                        fltrOperator = "eq",
                        fltrValue = prms.GetValue<<#= GetPropertyTypeName(sclrProp) #>>("<#= GetModelPropertyName(sclrProp, Model) #>"),
                        fltrError = null
                    });
            }
<#
            }
#>          
            ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> chf = <#= HiddenFiltersVMPropertyName #> as ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>;
            bool resetHF = chf.Count != hf.Count;
            if ((!resetHF) && (hf.Count > 0)) {
                foreach(<#= IWebServiceFilterRsltInterfaceClassName #> citm in chf) {
                    <#= IWebServiceFilterRsltInterfaceClassName #> itm = hf.Where(h => h.fltrName == citm.fltrName).FirstOrDefault();
                    if(itm == null)
                    {
                        resetHF = true;
                        break;
                    }
                    if (!(itm.fltrValue == citm.fltrValue))
                    {
                        resetHF = true;
                        break;
                    }
                }
            } 
            if (resetHF) { <#= HiddenFiltersVMPropertyName #> = hf; }

          
            if(prms.ContainsKey("<#= EformModeEnumClassName #>") &&  (SformViewModel != null)) {
                <#= EformModeEnumClassName #> mode = prms.GetValue<<#= EformModeEnumClassName #>>("<#= EformModeEnumClassName #>");
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
                <#= GetPropertyTypeName(pk) #> <#= GetPrimKeyVarName(pk) #> = default(<#= GetPropertyTypeName(pk) #>);
                if(prms.ContainsKey("<#= GetPrimKeyVarName(pk) #>")) {
                    <#= GetPrimKeyVarName(pk) #> = prms.GetValue<<#= GetPropertyTypeName(pk) #>>("<#= GetPrimKeyVarName(pk) #>");
                }
<#
            }
#>
            
                if ((mode == <#= EformModeEnumClassName #>.AddMode) || (mode == <#= EformModeEnumClassName #>.UpdateMode)) {
                    Task<<#= GetInterfaceName(Model) #>> tdata = <#= FormServicePrefix #><#= Model.ViewName #>.<#= GetOneMethodName #>(
<#
            {
                bool isFirst= true;
                foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
                    if (isFirst) {
                        isFirst = false;
#>
                            <#= GetPrimKeyVarName(pk) #>
<#
                    } else {
#>
                          , <#= GetPrimKeyVarName(pk) #>
<#
                    }
                }
            }
#>
                        );
                    tdata.Await(
                        () => {
                            <#= UIDispatcherInvokePropertyName #>(() =>
                                {
                                    if (mode == <#= EformModeEnumClassName #>.AddMode)
                                        SformViewModel.<#= SformAfterAddItemCommandPropertyName #>(tdata.Result);
                                    else 
                                        SformViewModel.<#= SformAfterUpdItemCommandPropertyName #>(tdata.Result);
                                });
                        },
                        (e) => { }
                     );
                } else {
                    <#= GetInterfaceName(Model) #> data = <#= FormServicePrefix #><#= Model.ViewName #>.<#= CopyToModelMethodName #>(null,null);
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
                    data.<#= GetModelPropertyName(pk, Model) #> = <#= GetPrimKeyVarName(pk) #>;
<#
            }
#>
                    SformViewModel.<#= SformAfterDelItemCommandPropertyName #>(data);
                }
            }
        }
        #endregion

        #region <#= NavigationBackCommandPropertyName #>
        public void Executed<#= NavigationBackCommandPropertyName #>(object sender, ExecutedRoutedEventArgs e) { 
            e.Handled = true;
            if(<#= CurrentNavigationContextPropertyName #> == null) return;
            if(!<#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack) return;
            <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.GoBack();
        } 
        public void CanExecute<#= NavigationBackCommandPropertyName #>(object sender, CanExecuteRoutedEventArgs e) {
            e.Handled = true;
            e.CanExecute = (<#= CurrentNavigationContextPropertyName #> == null) ? false : <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack;
        }
        #endregion

    }
}



<#+
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetFilterInterfaceName(ModelViewSerializable model) {
        return "I" + GetFilterName(model);
    }
    string GetFilterName(ModelViewSerializable model) {
        return GetModelName(model) + "Filter";
    }
    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }

    string GetModelServiceInterfaceName(ModelViewSerializable model) {
        return "I" + GetModelServiceName(model);
    }
    string GetModelServiceName(ModelViewSerializable model) {
        return GetModelName(model) + "Service";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+GetModelName(model);
    }
    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }
    string GetPrimKeyVarName(ModelViewPropertyOfVwSerializable pkpModelViewUIFormPropertySerializable) {
        return "pkp" + pkpModelViewUIFormPropertySerializable.ViewPropertyName;
    }
    List<string> GetDetailViews(ModelViewSerializable model, DbContextSerializable context, List<string> result)
    {
        if (result == null)
        {
            result = new List<string>();
        }
        if ((model == null) || (context == null))
        {
            return result;
        }
        if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (context.ModelViews == null)) {
            return result;
        }
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
        {
            return result;
        }
        List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
        if(primKeys == null)
        {
            return result;
        }
        if (primKeys.Count != model.PrimaryKeyProperties.Count)
        {
            return result;
        }
        string RootEntityFullClassName = model.RootEntityFullClassName;
        string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
        List<ModelViewSerializable> details =
            context.ModelViews.Where(m => m.ForeignKeys.Any(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName))).ToList();
        if(details.Count < 1)
        {
            return result;
        }
        foreach(ModelViewSerializable detail in details)
        {
            if (detail.ScalarProperties == null) continue;
            if (detail.ForeignKeys == null) continue;
            if (detail.ForeignKeys.Count < 1) continue;
            List<ModelViewForeignKeySerializable> ForeignKeys =
                detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
            if (ForeignKeys.Count < 1) continue;
            bool canBeUsed = false;
            foreach(ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
            {
                bool hasForeignKeyProps = true;
                if (ForeignKey.ForeignKeyProps != null)
                {
                    for(int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                    {
                        ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                        if (!(detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)))))
                        {
                            hasForeignKeyProps = false;
                        }
                        if(!hasForeignKeyProps)
                        {
                            ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                            if (detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName)))
                            {
                                hasForeignKeyProps = true;
                            } else
                            {
                                break;
                            }
                        }
                    }
                } else
                {
                    hasForeignKeyProps = false;
                }
                if (hasForeignKeyProps)
                {
                    canBeUsed = true;
                    break;
                }
            }
            if(canBeUsed)
            {
                if(!result.Contains(detail.ViewName))
                {
                    result.Add(detail.ViewName);
                }
            }
        }
        return result;
    }
    ModelViewSerializable GetModelViewByName(DbContextSerializable context, string viewName) {
        if ((context == null) || (string.IsNullOrEmpty(viewName))) {
            return null;
        }
        if (context.ModelViews == null) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
    }
    List<ModelViewForeignKeySerializable> GetDetailViewForeignKeys(ModelViewSerializable model, ModelViewSerializable detail, List<ModelViewForeignKeySerializable> result)
    {
        if (result == null) result = new List<ModelViewForeignKeySerializable>();
        if ((model == null) || (detail == null))
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (detail.ScalarProperties == null) || (detail.ForeignKeys == null))
        {
            return result;
        }
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
        {
            return result;
        }
        List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
        if (primKeys == null)
        {
            return result;
        }
        if (primKeys.Count != model.PrimaryKeyProperties.Count)
        {
            return result;
        }
        string RootEntityFullClassName = model.RootEntityFullClassName;
        string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
        List<ModelViewForeignKeySerializable> ForeignKeys =
            detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
        if (ForeignKeys.Count < 1)
        {
            return result;
        }
        foreach (ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
        {
            bool hasForeignKeyProps = true;
            if (ForeignKey.ForeignKeyProps != null)
            {
                for (int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                {
                    ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                    hasForeignKeyProps =
                        detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)));
                    if (!hasForeignKeyProps)
                    {
                        ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                        hasForeignKeyProps = detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName));
                        {
                            hasForeignKeyProps = true;
                        }
                        if(!hasForeignKeyProps)
                        {
                            break;
                        }
                    }
                }
            }
            else
            {
                hasForeignKeyProps = false;
            }
            if (hasForeignKeyProps)
            {
                result.Add(ForeignKey);
                break;
            }
        }
        return result;
    }
    List<ModelViewPropertyOfVwSerializable> GetDetailViewForeignKeyProps(ModelViewSerializable model, ModelViewPropertyOfVwSerializable primKey, ModelViewSerializable detail, ModelViewForeignKeySerializable ForeignKey, List<ModelViewPropertyOfVwSerializable> result)
    {
        if (result == null)
        {
            result = new List<ModelViewPropertyOfVwSerializable>();
        }
        if ((model == null) || (detail == null) || (primKey == null) || (ForeignKey == null))
        {
            return result;
        }
        if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (detail.ScalarProperties == null) || (detail.ForeignKeys == null) || (ForeignKey == null))
        {
            return result;
        }
        List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
        if(primKeys == null)
        {
            return result;
        }
        if (primKeys.Count < 1)
        {
            return result;
        }
        if(!primKeys.Any(p => (p.ViewPropertyName == primKey.ViewPropertyName) && (p.OriginalPropertyName == primKey.OriginalPropertyName)))
        {
            return result;
        }
        ModelViewForeignKeySerializable fk = detail.ForeignKeys.Where(f => f.NavigationName == ForeignKey.NavigationName).FirstOrDefault();
        if(fk == null)
        {
            return result;
        }
        ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable =
            detail.ScalarProperties.Where(s => (s.OriginalPropertyName == primKey.OriginalPropertyName) && (s.ForeignKeyNameChain == fk.NavigationName)).FirstOrDefault();
        if (modelViewPropertyOfVwSerializable != null)
        {
            result.Add(modelViewPropertyOfVwSerializable);
        }
        if (fk.ForeignKeyProps == null)
        {
            return result;
        }

        int ind = fk.PrincipalKeyProps.FindIndex(p => p.OriginalPropertyName == primKey.OriginalPropertyName);
        if(ind < 0)
        {
            return result;
        }
        ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[ind];
        ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializableEx =
            detail.ScalarProperties.FirstOrDefault(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)));
        if(modelViewPropertyOfVwSerializableEx != null) {
            if(modelViewPropertyOfVwSerializableEx != modelViewPropertyOfVwSerializable)
            {
                result.Add(modelViewPropertyOfVwSerializableEx);
            }
        }
        return result;
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>
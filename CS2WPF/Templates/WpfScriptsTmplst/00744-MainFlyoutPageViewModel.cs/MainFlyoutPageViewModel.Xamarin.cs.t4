<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using Xamarin.Forms;
using Prism.Mvvm;
using Prism.Navigation;
using Xamarin.Essentials;
using Prism.Services.Dialogs;
using System.Windows.Input;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Prism.Ioc;
using System.Collections.Generic;

<#


    string IAppGlblSettingsServiceFolder            = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName         = GetModelClassName(Model, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace         = GetModelNameSpace(Model, IAppGlblSettingsServiceFolder);

    string PageNotFoundPageFolder                   = "00685-PageNotFoundPage.xaml.cs";
    string PageNotFoundPageClassName                = GetModelClassName(Model, PageNotFoundPageFolder);
    string PageNotFoundPageNameSpace                = GetModelNameSpace(Model, PageNotFoundPageFolder);

    string MainFlyoutPageFolder     = "00740-MainFlyoutPage.xaml.cs";
    string MainFlyoutPageClassName  = GetModelClassName(Model, MainFlyoutPageFolder);
    string MainFlyoutPageNameSpace  = GetModelNameSpace(Model, MainFlyoutPageFolder);


    string MainFlyoutPageViewModelFolder      = "00744-MainFlyoutPageViewModel.cs";
    string MainFlyoutPageViewModelClassName   = GetModelClassName(Model, MainFlyoutPageViewModelFolder);
    string MainFlyoutPageViewModelNameSpace   = GetModelNameSpace(Model, MainFlyoutPageViewModelFolder);
    string MainFlyoutPageViewModelProject     = GetModelProjectName(Model, MainFlyoutPageViewModelFolder);


    string AppSettingServicePropertyName            = "GlblSettingsSrv";
    string NavigateCommandPropertyName              = "NavigateCommand";
    string ShowDialogCommandPropertyName            = "ShowDialogCommand";
    string NavigateToMethodName                     = "NavigateTo";
    string OnNavigateToNotificationPropertyName     = "OnNavigateToNotification";
    string DelayFromMillisecondsPropertyName        = "DelayFromMilliseconds";
    string ShowErrorMethodName                      = "ShowErrorMessage";
    string OnMessageNotificationPropertyName        = "OnMessageNotification";

    List<string> nmSpaces = new List<string>();
    if ((MainFlyoutPageViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>


namespace <#= MainFlyoutPageViewModelNameSpace #> {
    public class <#= MainFlyoutPageViewModelClassName #>: INotifyPropertyChanged, IDestructible  
    {
        protected <#= IAppGlblSettingsServiceClassName #> _<#= AppSettingServicePropertyName #>=null;
        protected INavigationService _navigationService;
        protected IDialogService _dialogService;
        protected IContainerProvider _containerProvider;
        public <#= MainFlyoutPageViewModelClassName #>(<#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>, INavigationService navigationService, IDialogService dialogService, IContainerProvider containerProvider) {
            _<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
            _<#= AppSettingServicePropertyName #>.<#= OnNavigateToNotificationPropertyName #> += <#= NavigateToMethodName #>;
            _<#= AppSettingServicePropertyName #>.<#= OnMessageNotificationPropertyName #> += <#= ShowErrorMethodName #>;
            _<#= AppSettingServicePropertyName #>.OnUserChangedNotification += OnUserChangedNotification;
            _navigationService = navigationService;
            _dialogService = dialogService;
            _containerProvider = containerProvider;
        }

        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        #region <#= NavigateCommandPropertyName #>
        protected ICommand _<#= NavigateCommandPropertyName #> = null;
        public ICommand <#= NavigateCommandPropertyName #>
        {
            get
            {
                return _<#= NavigateCommandPropertyName #> ?? (_<#= NavigateCommandPropertyName #> = new Command<string>((p) => <#= NavigateCommandPropertyName #>Execute(p), (p) => <#= NavigateCommandPropertyName #>CanExecute(p)));
            }
        }
        protected async void <#= NavigateCommandPropertyName #>Execute(string navPath)
        {
            INavigationService ns = _navigationService;
            IAppGlblSettingsService gss = _GlblSettingsSrv;
            if(gss.CurrNavPath == navPath) return; // static region trows exception if to navigate to the same Feature-Page
                                                   // bindable region names trow exception as well
                                                   // so it's the only way: do not navigate to the same page
            if (ns != null)  {
                //
                //  ns.GoBackToRootAsync();
                //  returns error
                //
                INavigationResult nrslt = await ns.NavigateAsync(name: $"/<#= MainFlyoutPageClassName #>/NavigationPage/{navPath}");
                if (!nrslt.Success)
                {
                    string msg = "Navigation Error";
                    if (nrslt.Exception != null) msg = ": " + nrslt.Exception.Message;
                    await ns.NavigateAsync(name: $"/<#= MainFlyoutPageClassName #>/NavigationPage/<#= PageNotFoundPageClassName #>");
                    if (gss != null) gss.ShowErrorMessage("Navigation Error", msg);
                } else {
                    gss.CurrNavPath = navPath;
                }
            }
        }
        protected bool <#= NavigateCommandPropertyName #>CanExecute(string navPath)
        {
            return true;
        }
        #endregion

        #region <#= ShowDialogCommandPropertyName #>
        protected ICommand _<#= ShowDialogCommandPropertyName #> = null;
        public ICommand <#= ShowDialogCommandPropertyName #>
        {
            get
            {
                return _<#= ShowDialogCommandPropertyName #> ?? (_<#= ShowDialogCommandPropertyName #> = new Command<string>((p) => <#= ShowDialogCommandPropertyName #>Execute(p), (p) => <#= ShowDialogCommandPropertyName #>CanExecute(p)));
            }
        }
        protected void <#= ShowDialogCommandPropertyName #>Execute(string navPath)
        {
            if (string.IsNullOrEmpty(navPath)) return;
            DialogParameters parameters = new DialogParameters();
            _dialogService.ShowDialog(navPath, parameters, (outprm) => { });
        }
        protected bool <#= ShowDialogCommandPropertyName #>CanExecute(string navPath)
        {
            return true;
        }
        #endregion

        #region IDestructible  
        public virtual void Destroy()
        {
            if( _<#= AppSettingServicePropertyName #> != null ) {
                _<#= AppSettingServicePropertyName #>.<#= OnNavigateToNotificationPropertyName #> -= <#= NavigateToMethodName #>;
                _<#= AppSettingServicePropertyName #>.<#= OnMessageNotificationPropertyName #> -= <#= ShowErrorMethodName #>;
                _<#= AppSettingServicePropertyName #>.OnUserChangedNotification -= OnUserChangedNotification;
            }
            _<#= AppSettingServicePropertyName #> = null;
            _navigationService = null;
            _dialogService = null;
        }
        #endregion

        private async void <#= NavigateToMethodName #>(object sender, string navPath)
        {
            INavigationService ns = _navigationService;
            IAppGlblSettingsService gss = _GlblSettingsSrv;
            if (ns != null) {
                await MainThread.InvokeOnMainThreadAsync(async () => {
                    //
                    // next line returns (Success == false)
                    // await ns.GoBackToRootAsync();
                    //
                    INavigationResult nrslt = await ns.NavigateAsync(name: $"/<#= MainFlyoutPageClassName #>/NavigationPage/{navPath}");
                    if (!nrslt.Success)
                    {
                        string msg = "Navigation Error";
                        if (nrslt.Exception != null) msg = ": " + nrslt.Exception.Message;
                        await ns.NavigateAsync(name: $"/<#= MainFlyoutPageClassName #>/NavigationPage/<#= PageNotFoundPageClassName #>");
                        if (gss != null) gss.ShowErrorMessage("Navigation Error", msg);
                    }
                });
            }
        }
        private void <#= ShowErrorMethodName #>(object sender, string errorMessage)
        {
            <#= IAppGlblSettingsServiceClassName #> gss = _<#= AppSettingServicePropertyName #>;
            if (gss == null) return;
            if (gss.DelayActivated) return;
            gss.DelayActivated = true;
            MainThread.BeginInvokeOnMainThread(() => {
                DialogParameters parameters = new DialogParameters();
                parameters.Add("Title", "Error");
                parameters.Add("Message", errorMessage);
                parameters.Add("<#= DelayFromMillisecondsPropertyName #>", 4000);
                if(_dialogService != null) _dialogService.ShowDialog("MessageDlg", parameters, (r) => { gss.DelayActivated = false; });
            });
        }
        private async void OnUserChangedNotification(object sender, string uname)
        {
            
            /* Uncomment to turn ON Authorization 
            if (string.IsNullOrEmpty(uname))
            {
                (sender as IAppGlblSettingsService).Permissions = (sender as IAppGlblSettingsService).GetEmptyPermissions();
                (sender as IAppGlblSettingsService).NavigateTo("HomePage");
                return;
            }
            else
            {
                IAspnetuserpermsViewService ServicePermission = _containerProvider.Resolve<IAspnetuserpermsViewService>();
                await MainThread.InvokeOnMainThreadAsync(async () => 
                {
                    IList<IAspnetuserpermsView> rslt = await ServicePermission.getall();
                    var Permissions = (sender as IAppGlblSettingsService).GetEmptyPermissions();
                    if (rslt != null)
                    {
                        foreach(var itm in rslt)
                        {
                            Permissions.Add(itm.ModelName, itm.UserPerms);
                        }
                    }
                    (sender as IAppGlblSettingsService).Permissions = Permissions;
                    (sender as IAppGlblSettingsService).NavigateTo("HomePage");
                });
                return;
            }
            */ 
            (sender as IAppGlblSettingsService).NavigateTo("HomePage");
        }
    }
}

<#+
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>
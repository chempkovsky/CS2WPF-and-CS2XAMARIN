<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="php" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ import namespace="CS2WPF.Helpers" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    string AppPrefix                                = "App";
    string SrcPrefix                                = "src";


    string entityUpdFolder                          = "01142-EntityUpd.php";
    string entityUpdClassName                       = GetModelClassName(Model, entityUpdFolder);
    string entityUpdNameSpace                       = GetSymfonyModelNameSpace(Model, entityUpdFolder, AppPrefix);
    string entityUpdRepositoryClassName             = entityUpdClassName + "Repository";

    string entitySelFolder                          = "01144-EntitySel.php";
    string entitySelClassName                       = GetModelClassName(Model, entitySelFolder);
    string entitySelNameSpace                       = GetSymfonyModelNameSpace(Model, entitySelFolder, AppPrefix);

    string keyAuthenticatorFolder                   = "01360-KeyAuthenticator.php";
    string keyAuthenticatorClassName                = GetModelClassName(Model, keyAuthenticatorFolder);
    string keyAuthenticatorNameSpace                = GetSymfonyModelNameSpace(Model, keyAuthenticatorFolder, AppPrefix);
    

    string DoctrineEntityTableName                  = GetDoctrineEntityTableName(Model); 
    string DoctrineEntityConnection                 = (Context.DbContextClassName + "Connection").ToLower();
    string DoctrineEntityManager                    = (Context.DbContextClassName + "Manager").ToLower();
    string DoctrineEntityMapping                    = FirstLetterToUpper(Context.DbContextClassName.ToLower());
    string DoctrineEntityUrl                        = ("DATABASE_" + Context.DbContextClassName + "_URL").ToUpper();
    

    string OperatorSufix            = "Oprtr";

    string GetAllMethodName         = "getall";
    string GetWithFilterMethodName  = "getwithfilter";
    string GetOneMethodName         = "getone";
    string UpdateOneMethodName      = "updateone";
    string AddOneMethodName         = "addone";
    string DeleteOneMethodName      = "deleteone";



    string UserEntityName       = "aspnetuser";
    string UserRolesEntityName  = "aspnetuserroles";
    string RoleEntityName       = "aspnetrole";

    ModelViewSerializable UserRolesModel    =  Context.ModelViews.Where(f => f.RootEntityClassName == UserRolesEntityName).FirstOrDefault();
    ModelViewSerializable RoleModel         =  Context.ModelViews.Where(f => f.RootEntityClassName == RoleEntityName).FirstOrDefault();

    if(UserRolesModel == null) {
        throw new Exception("Could not find ModelView with RootEntityClassName = aspnetuserroles. Make sure that such a ModelView exists in the current context, or change the UserRolesEntityName-var value in the current script if the name for the UserRoles Entity has changed in your modeling infrastructure.");
    }
    if(RoleModel == null) {
        throw new Exception("Could not find ModelView with RootEntityClassName = aspnetrole. Make sure that such a ModelView exists in the current context, or change the RoleEntityName-var value in the current script if the name for the Role Entity has changed in your modeling infrastructure.");
    }

    string roleEntitySelClassName               = GetModelClassName(RoleModel, entitySelFolder);
    string roleEntitySelNameSpace               = GetSymfonyModelNameSpace(RoleModel, entitySelFolder, AppPrefix);

    string DoctrineUserRolesEntityTableName     = GetDoctrineEntityTableName(UserRolesModel); 
    string DoctrineRoleEntityTableName          = GetDoctrineEntityTableName(RoleModel); 

    ModelViewForeignKeySerializable UserRoles2UserFK =  UserRolesModel.ForeignKeys.Where(f => f.NavigationEntityName == UserEntityName).FirstOrDefault();
    if(UserRoles2UserFK == null) {
        throw new Exception("Could not find ForeignKey with NavigationEntityName == " + UserEntityName + " for ModelView with a name " + UserRolesModel.ViewName);
    }
    if(UserRolesModel.ForeignKeys == null) {
        throw new Exception("The list of Foreign Keys is empty for aspnetuserroles-entity.");
    }

    ModelViewForeignKeySerializable UserRoles2RoleFK =  UserRolesModel.ForeignKeys.Where(f => f.NavigationEntityName == RoleEntityName).FirstOrDefault();
    if(UserRoles2RoleFK == null) {
        throw new Exception("Could not find ForeignKey with NavigationEntityName == " + RoleEntityName + " for ModelView with a name " + UserRolesModel.ViewName);
    }

    string selForRolesClause = "select ";
    {
        int navChainCnt = 0;
        foreach (ModelViewKeyPropertySerializable prop in RoleModel.AllProperties) {
            ModelViewPropertyOfVwSerializable sclrProp = GetScalarProperty(prop, RoleModel);
            if(sclrProp == null) continue;
            if(navChainCnt==0) { selForRolesClause += " "; navChainCnt = 1; } else { selForRolesClause += ", "; }
            selForRolesClause += "t0001." + sclrProp.OriginalPropertyName + " as " + sclrProp.ViewPropertyName;
        } 
    }
    selForRolesClause += " from " + DoctrineUserRolesEntityTableName + " t0000 INNER JOIN " + DoctrineRoleEntityTableName + " as t0001 on (t0000."
        + UserRoles2RoleFK.ForeignKeyProps[0].OriginalPropertyName + " = t0001." 
        + UserRoles2RoleFK.PrincipalKeyProps[0].OriginalPropertyName + ")"  // ---- this line is correct: the column names are the same in both tables
        + " where t0000." + UserRoles2UserFK.ForeignKeyProps[0].OriginalPropertyName + " = :UserId";


#>
<?php

namespace <#= keyAuthenticatorNameSpace #>;

use <#= entityUpdNameSpace + "\\" + entityUpdClassName #>;
use <#= roleEntitySelNameSpace + "\\" + roleEntitySelClassName #>;

use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException;
use Symfony\Component\Security\Core\Exception\AccountExpiredException;
use Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\PassportInterface;
use Symfony\Component\Security\Http\Authenticator\Passport\SelfValidatingPassport;
use Firebase\JWT\JWT as JWT;

// ///////////////////////////////////////////////////////////////////////////////
// Important note
//
// <#= DoctrineEntityConnection #> and <#= DoctrineEntityManager #> must be declared as "default_connection" and "default_entity_manager"
//
// ///////////////////////////////////////////////////////////////////////////////
// the generated code expects "config/packages/doctrine.yaml"-file to have the following config parameters
// ///////////////////////////////////////////////////////////////////////////////
// doctrine:
//    dbal:
//       default_connection: here is a name of default connection (for instance, default_connection: <#= DoctrineEntityConnection #>)
//
//       connections:
//       ...
//          <#= DoctrineEntityConnection #>:
//                # configure these for your database server 
//                url: '%env(resolve:<#= DoctrineEntityUrl #>)%'
//                # driver: 'pdo_mysql'
//                # server_version: '5.7'
//                # charset: utf8mb4
//    orm:
//       default_entity_manager: here is a name of default manager (for instance, default_entity_manager: <#= DoctrineEntityManager #>)
//
//       entity_managers:
//       ...
//          <#= DoctrineEntityManager #>:
//              connection: <#= DoctrineEntityConnection #>
//              mappings:
//                  <#= DoctrineEntityMapping #>:
//                      is_bundle: false
//                      type: annotation 
//                      dir: '%kernel.project_dir%/<#= GetSymfonyModelNameSpace(Model, entityUpdFolder, SrcPrefix).Replace("\\","/") #>'
//                      prefix: '<#= GetSymfonyModelNameSpace(Model, entityUpdFolder, AppPrefix) #>'
//                      alias: <#= DoctrineEntityManager #>  
//
// ///////////////////////////////////////////////////////////////////////////////
// "config/packages/doctrine.yaml"-file  expects ".env"-file to have the following config parameters like below
// ///////////////////////////////////////////////////////////////////////////////
// ...
// ### > doctrine/doctrine-bundle ###
// # Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url
// # IMPORTANT: You MUST configure your server version, either here or in config/packages/doctrine.yaml
// #
// <#= DoctrineEntityUrl #>="mysql://root:password_here@127.0.0.1:3306/schema_name_here?serverVersion=8.0"
// ### < doctrine/doctrine-bundle ###
// ...
// ///////////////////////////////////////////////////////////////////////////////
// Important note:
// the generated code expects "config/services.yaml"-file to have the following config parameters
// ///////////////////////////////////////////////////////////////////////////////
// ...
//  parameters:
//    jwt_secret: SOME_SECRET
// ...
// ///////////////////////////////////////////////////////////////////////////////
// Important note:
// the generated code expects "config/packages/security.yaml"-file to have the following config parameters
// ///////////////////////////////////////////////////////////////////////////////
//
//security:
//    # https://symfony.com/doc/current/security/authenticator_manager.html
//    enable_authenticator_manager: true
//    # https://symfony.com/doc/current/security.html#c-hashing-passwords
//    password_hashers:
//        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
//        App\Entity\AspnetuserViewEntityUpd:
//            algorithm: auto
//
//    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
//    providers:
//        # used to reload user from session & other features (e.g. switch_user)
//        app_user_provider:
//            entity:
//                class: <#= entityUpdNameSpace + "\\" + entityUpdClassName #>
//                property: username
//    firewalls:
//        main:
//            custom_authenticators:
//                - <#= keyAuthenticatorNameSpace #> +"\\"+ <#= keyAuthenticatorClassName #>
//                               
//            # activate different ways to authenticate
//            # https://symfony.com/doc/current/security.html#firewalls-authentication
//
//            # https://symfony.com/doc/current/security/impersonating_user.html
//            # switch_user: true
//
//    # Easy way to control access for large sections of your site
//    # Note: Only the *first* access control that matches will be used
//    access_control:
//        - { path: ^/token, roles: PUBLIC_ACCESS }
//        - { path: ^/api/Account/Register, roles: PUBLIC_ACCESS }
//        - { path: ^/api/Account/ChangePassword, roles: IS_AUTHENTICATED_FULLY }
//        - { path: ^/api/Account/Logout, roles: IS_AUTHENTICATED_FULLY }
//
// ///////////////////////////////////////////////////////////////////////////////



class <#= keyAuthenticatorClassName #> extends AbstractAuthenticator
{
    private $em;
    private $params;
    public function __construct(EntityManagerInterface $em, ContainerBagInterface $params)
    {
        $this->em = $em;
        $this->params = $params;
    }    

    /**
     * Called on every request to decide if this authenticator should be
     * used for the request. Returning `false` will cause this authenticator
     * to be skipped.
     */
    public function supports(Request $request): ?bool
    {
        return $request->headers->has('Authorization');
    }


    public function authenticate(Request $request): PassportInterface
    {
        $token = $request->headers->get('Authorization');
        if (null === $token) {
            // The token header was empty, authentication fails with HTTP Status
            // Code 401 "Unauthorized"
            throw new CustomUserMessageAuthenticationException('No API token provided');
        }
        $bearer = str_replace('Bearer ', '', str_replace('bearer ', '', $token));
        $usrIdentifier = null;
        try {
            $jwt = (array) JWT::decode(
                $bearer, 
                $this->params->get('jwt_secret'),
                ['HS256']
            );
            $today = (new \DateTime())->getTimestamp();
            $expires = (int) ($jwt['expires']);
            if($expires < $today) {
                throw new AccountExpiredException('API token is expired');
            }
            $usrIdentifier = $jwt['user'];
        }catch (\Exception $exception) {
            throw new CustomUserMessageAuthenticationException($exception->getMessage());
        }            
        if (null === $usrIdentifier) {
            // The token header was empty, authentication fails with HTTP Status
            // Code 401 "Unauthorized"
            throw new CustomUserMessageAuthenticationException('No API token provided');
        }
        return new SelfValidatingPassport(new UserBadge($usrIdentifier, function ($userIdentifier) {
            $auser = $this->em->getRepository(<#= entityUpdClassName #>::class)->findOneBy(['username' => $userIdentifier]);
            if($auser !== null) {
                $rsm = new ResultSetMapping($this->em);
                $rsm->addEntityResult(<#= roleEntitySelClassName #>::class, "er");
<#
                foreach(ModelViewPropertyOfVwSerializable sclrProp in RoleModel.ScalarProperties) {
#>
                    $rsm->addFieldResult("er", "<#= sclrProp.ViewPropertyName #>", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>");
<#
                }
#>
                $query = $em->createNativeQuery("<#= selForRolesClause #>", $rsm);
                $query->setParameter("UserId", $auser->getId());
                $queryrslt = $query->getResult();
                if ($queryrslt !== null) {
                    $rls = [];
                    foreach ($queryrslt as $v) {
                       $rls[]  = $v->getName();
                    }
                    $auser->setRoles($rls);
                }
            }
            return $auser; 
        }));
    }


    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
        // on success, let the request continue
        return null;
    }   

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response
    {
        $data = [
            // you may want to customize or obfuscate the message first
            'message' => strtr($exception->getMessageKey(), $exception->getMessageData())

            // or to translate this message
            // $this->translator->trans($exception->getMessageKey(), $exception->getMessageData())
        ];
        return new JsonResponse($data, Response::HTTP_UNAUTHORIZED);
    }     

}

<#+
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        result = sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
        return result.Replace(".php", "").Replace(".Php", "").Replace(".PHP", "");
    }
    string GetSymfonyContextNameSpace(DbContextSerializable context, string fileType, string appPrefix) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "\\";
        string filePath = "";
        string defaultNameSpace = (string.IsNullOrEmpty(appPrefix)) ? "" : appPrefix;
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            if (string.IsNullOrEmpty(appPrefix))
                filePath = refItem.FileFolder;
            else 
                filePath = delim + refItem.FileFolder;
        }
        return defaultNameSpace + filePath;
    }

    string GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }

    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+ GetModelName(model);
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '_' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        result = sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
        return result.Replace(".php", "").Replace(".Php", "").Replace(".PHP", "");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string AttribToString(ModelViewAttributeSerializable attr) {
        if(attr == null) return "";
        string result= "[" + attr.AttrName; 
        if (attr.VaueProperties == null) {
            return result + "]";
        }
        if (attr.VaueProperties.Count < 1) {
            return result + "]";
        }
        result = result + "(";
        bool insComma= false;
        foreach(ModelViewAttributePropertySerializable valProp in attr.VaueProperties) {
            if (insComma) {
                result =  result + ",";
            } else {
                insComma = true;
            }
            if(! string.IsNullOrEmpty(valProp.PropName) ) {
                if (! valProp.PropName.Contains("...") ) {
                    result =  result + valProp.PropName + "=";
                }
            }
            result =  result + valProp.PropValue;
        }
        return result + ")]";
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        } else if( prop.UnderlyingTypeName.ToLower() == "system.guid" ) {
            return "36";
        }
        return "";
    }
    string GetMinLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "MinLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        } else if( prop.UnderlyingTypeName.ToLower() == "system.guid" ) {
            return "36";
        }
        return "";
    }
    string GetMaxLenEx(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinLenEx(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        return GetMinLen(sclrProp, model);
    }
    bool HasAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasFluentAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.FAPIAttributes != null) {
                foreach(ModelViewFAPIAttributeSerializable a in sclrProp.FAPIAttributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewFAPIAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasFluentAtribute(ModelViewPropertyOfVwSerializable sclrProp, string[] attrName) {
        if ((sclrProp != null) && (attrName != null)  ) {
            if ((sclrProp.FAPIAttributes != null) && (attrName.Length > 0)) {
                return sclrProp.FAPIAttributes.Any(a => attrName.Contains(a.AttrName));
            }
        }
        return false;
    }
    bool IsIdentityProperty(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (HasAtributeWithValue(prop, "DatabaseGenerated", "identity") || HasAtributeWithValue(prop, "DatabaseGenerated", "computed")) {
            return true;
        }
        if(HasFluentAtribute(prop, new string[] {"UseSqlServerIdentityColumn", "ForSqlServerUseSequenceHiLo", "ValueGeneratedOnAdd", "ValueGeneratedOnAddOrUpdate", "IsConcurrencyToken", "IsRowVersion"} )) {
            return true;
        }
        return HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "identity") || HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "computed");
    }
    bool IsIdentityPropertyKey(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null)||(prop == null)) return false;
        // it is correct: only for string.IsNullOrEmpty(p.ForeignKeyName)
        // it is correct: we do not look for ModelViewPropertyOfVwSerializable as GetScalarProperty()-method does
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
        if(sclrProp == null) return false;
        return IsIdentityProperty(sclrProp, model);
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue ;
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue ;
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "";
    }
    string GetFilterPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetLowerCasePropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string result = GetModelPropertyName(prop, model);
        if (!string.IsNullOrEmpty(result)) {
            result = result.ToLower();
        }
        return result;
    }

    string GetSymfonyModelNameSpace(ModelViewSerializable model, string fileType, string appPrefix) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "\\";
        string filePath = "";
        string defaultNameSpace = (string.IsNullOrEmpty(appPrefix)) ? "" : appPrefix;
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            if (string.IsNullOrEmpty(appPrefix))
                filePath = refItem.FileFolder;
            else 
                filePath = delim + refItem.FileFolder;
        }
        return defaultNameSpace + filePath;
    }
    string GetDoctrineEntityClassNameForStr(string ViewClassName) {
        if (string.IsNullOrEmpty(ViewClassName)) return "";
        return FirstLetterToUpper(ViewClassName + "Entity");
    }
    string GetDoctrineEntityClassName(ModelViewSerializable model) {
        
        if (model == null) return "";
        return GetDoctrineEntityClassNameForStr(model.ViewName);
    }
    string GetDoctrineEntityUpdClassNameForStr(string RootEntityClassName) {
        if (string.IsNullOrEmpty(RootEntityClassName)) return "";
        return RootEntityClassName + "EntityUpd";
    }
    string GetDoctrineEntityUpdClassName(ModelViewSerializable model) {
        
        if (model == null) return "";
        return GetDoctrineEntityUpdClassNameForStr(model.RootEntityClassName);
    }
    string GetDoctrineEntitySelClassNameForStr(string ViewName) {
        if (string.IsNullOrEmpty(ViewName)) return "";
        return ViewName + "EntitySel";
    }
    string GetDoctrineEntitySelClassName(ModelViewSerializable model) {
        if (model == null) return "";
        return GetDoctrineEntitySelClassNameForStr(model.ViewName);
    }
    string GetDoctrinePageClassNameForStr(string ViewName) {
        if (string.IsNullOrEmpty(ViewName)) return "";
        return ViewName + "Page";
    }
    string GetDoctrinePageClassName(ModelViewSerializable model) {
        
        if (model == null) return "";
        return GetDoctrinePageClassNameForStr(model.ViewName);
    }
    string GetSymfonyControllerClassNameForStr(string ViewName) {
        if (string.IsNullOrEmpty(ViewName)) return "";
        return ViewName + "Controller";
    }
    string GetSymfonyControllerClassName(ModelViewSerializable model) {
        if (model == null) return "";
        return GetSymfonyControllerClassNameForStr(model.ViewName);
    }
    string GetDoctrineEntityTableName(ModelViewSerializable model) { 
        string rslt = "";
        if (model == null) return rslt;
        return CS2WPF.Helpers.CustomPluralization.Pluralize(model.RootEntityClassName).ToLower();
    }
    string GetDoctrineEntityTableColumnName(ModelViewKeyPropertySerializable prop) {
        string rslt = "";
        if (prop == null) return rslt;
        return prop.OriginalPropertyName;
    }
    string GetDoctrineEntityGetSetSuffixForStr(string rslt) {
        if (string.IsNullOrEmpty(rslt)) return "";
        rslt = rslt.ToLower();
        StringBuilder rsltSb = new StringBuilder();
        bool nextIsUpper = false;
        foreach (char ch in rslt)
        {
            if (ch == '_') { 
                nextIsUpper = true; 
            } else {
                char chl = ch;
                if(nextIsUpper) chl = char.ToUpper(ch);
                rsltSb.Append(chl);
                nextIsUpper = false; 
            }
        }
        return FirstLetterToUpper(rsltSb.ToString());
    }
    string GetDoctrineEntityGetMethodNameForStr(string rslt) {
        return "get" + GetDoctrineEntityGetSetSuffixForStr(rslt);
    }
    string GetDoctrineEntitySetMethodNameForStr(string rslt) {
        return "set" + GetDoctrineEntityGetSetSuffixForStr(rslt);
    }
    string GetDoctrineEntityFieldNameForStr(string rslt) {
        return GetDoctrineEntityGetSetSuffixForStr(rslt).ToLower();
    }
    string GetDoctrineEntityGetSetSuffix(ModelViewKeyPropertySerializable prop) {
        string rslt = "";
        if (prop == null) return rslt;
        return GetDoctrineEntityGetSetSuffixForStr( GetDoctrineEntityTableColumnName(prop));
    }
    string GetDoctrineEntityGetMethodName(ModelViewKeyPropertySerializable prop) {
        return "get" + GetDoctrineEntityGetSetSuffix(prop);
    }
    string GetDoctrineEntitySetMethodName(ModelViewKeyPropertySerializable prop) {
        return "set" + GetDoctrineEntityGetSetSuffix(prop);
    }
    string GetDoctrineEntityFieldName(ModelViewKeyPropertySerializable prop) {
        return GetDoctrineEntityGetSetSuffix(prop).ToLower();
    }
    string GetDoctrinePhpType(string csharptype) {
        if(string.IsNullOrEmpty(csharptype)) return "string";
        string rslt;
        switch (csharptype.ToLower()) {
            case "system.int32": // type="integer"
                rslt = "int";
                break;
            case "system.sbyte": // type="boolean"
                rslt = "bool";
                break;
            case "system.byte": // type="boolean"
                rslt = "bool";
                break;
            case "system.int16": // type="smallint"
                rslt = "int";
                break;
            case "system.uint16": // type="smallint"
                rslt = "int";
                break;
            case "system.uint32": // type="integer"
                rslt = "int";
                break;
            case "system.int64": // type="bigint"
                rslt = "int";
                break;
            case "system.uint64": // type="bigint"
                rslt = "int";
                break;
            case "system.char": // type="boolean"
                rslt = "bool";
                break;
            case "system.single": // type="float", precision=10, scale=0
                rslt = "float";
                break;
            case "system.double": // type="float", precision=10, scale=0
                rslt = "float";
                break;
            case "system.boolean": // type="boolean"
                rslt = "bool";
                break;
            case "system.decimal": // type="decimal", precision=18, scale=2
                rslt = "string";
                break;
            case "system.string": // type="text", length=0; type="string", length=20
                rslt = "string";
                break;
            case "system.guid":  // type="string", length=36, nullable=false/true, options={"fixed"=true}
                rslt = "string";
                break;
            case "system.datetime": // type="datetime"
                rslt = "DateTime";
                break;
                
            default:
                rslt = "string";
                break;
        }
        return rslt;
    }
    string GetDoctrineEntityFieldPhpType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        return GetDoctrinePhpType(prop.UnderlyingTypeName);
    }
    string GetDoctrineDataBaseType(string csharptype, string maxLen) {
        if(string.IsNullOrEmpty(csharptype)) return "string";
        string rslt;
        switch (csharptype.ToLower()) {
            case "system.int32": 
                rslt = "integer"; //"int";
                break;
            case "system.sbyte": 
                rslt = "boolean"; // "bool";
                break;
            case "system.byte": 
                rslt = "boolean"; // "bool";
                break;
            case "system.int16": 
                rslt = "smallint"; // "int";
                break;
            case "system.uint16": 
                rslt = "smallint"; // "int";
                break;
            case "system.uint32": 
                rslt = "integer"; // "int";
                break;
            case "system.int64": 
                rslt = "bigint"; // "int";
                break;
            case "system.uint64": 
                rslt = "bigint"; // "int";
                break;
            case "system.char": 
                rslt = "boolean"; // "bool";
                break;
            case "system.single": // type="float", precision=10, scale=0
                rslt = "float"; // "float";
                break;
            case "system.double": // type="float", precision=10, scale=0
                rslt = "float"; // "float";
                break;
            case "system.boolean": // type="boolean"
                rslt = "boolean";// "bool";
                break;
            case "system.decimal": // type="decimal", precision=18, scale=2
                rslt = "decimal"; // "string";
                break;
            case "system.string": // type="text", length=0; type="string", length=20
               if (string.IsNullOrEmpty(maxLen))
                    rslt = "text";
                else
                    rslt = "string";
                break;
            case "system.guid":  // type="string", length=36, nullable=false/true, options={"fixed"=true}
                rslt = "string";
                break;
            case "system.datetime": // type="datetime"
                rslt = "datetime"; // "DateTime";
                break;
            default:
                rslt = "string";
                break;
        }
        return rslt;
    }
    string GetDoctrineEntityFieldDataBaseType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        return GetDoctrineDataBaseType(prop.UnderlyingTypeName, GetMaxLenEx(prop, model));
    }
    bool   GetDoctrineEntityFieldIsId(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName)).Any();
    }
    bool   GetDoctrineEntityFieldIsGuid(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        if(string.IsNullOrEmpty( prop.UnderlyingTypeName )) return false;
        return prop.UnderlyingTypeName.ToLower() == "system.guid";
    }
    string GetDoctrineEntityGetSetPhpType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        string tpName = GetDoctrineEntityFieldPhpType(prop, model);
        if(tpName == "DateTime") tpName = "\\DateTimeInterface";
        return tpName;
    }

    ModelViewPropertyOfVwSerializable GetScalarProperty(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if((model == null) || (prop == null)) return null;
        ModelViewPropertyOfVwSerializable rslt =
            model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
        if (rslt != null) return rslt;
        if(model.ForeignKeys == null) return null;
        foreach(ModelViewForeignKeySerializable foreignKey in model.ForeignKeys) {
            if ((foreignKey.ForeignKeyProps != null) && (foreignKey.PrincipalKeyProps != null)) {
                string navigationName = foreignKey.NavigationName;
                int cnt = foreignKey.ForeignKeyProps.Count;
                if (foreignKey.PrincipalKeyProps.Count < cnt) cnt = foreignKey.PrincipalKeyProps.Count;
                for(int i = 0; i < cnt; i++) {
                    if(foreignKey.ForeignKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) {
                        ModelViewKeyPropertySerializable pkp = foreignKey.PrincipalKeyProps[i];
                        rslt =
                            model.ScalarProperties.Where(p => (p.OriginalPropertyName == pkp.OriginalPropertyName) && (p.ForeignKeyNameChain == navigationName)).FirstOrDefault();
                        if(rslt != null) return rslt;
                    }
                }
            }
        }
        return null;
    }
    string GetDoctrineEntityViewFieldPhpType(ModelViewPropertyOfVwSerializable prop) {
        return GetDoctrinePhpType(prop.UnderlyingTypeName);
    }
    string GetDoctrineEntityViewFieldDataBaseType(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        return GetDoctrineDataBaseType(prop.UnderlyingTypeName, GetMaxLen(prop, model));
    }
    string GetDoctrineEntityViewFieldName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return GetDoctrineEntityGetSetSuffixForStr( prop.ViewPropertyName ).ToLower();
    }
    string GetDoctrineEntityViewGetMethodName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return "get" + GetDoctrineEntityGetSetSuffixForStr( prop.ViewPropertyName );
    }
    string GetDoctrineEntityViewSetMethodName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return "set" + GetDoctrineEntityGetSetSuffixForStr( prop.ViewPropertyName );
    }
    string GetDoctrineEntityViewGetSetPhpType(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string tpName = GetDoctrineEntityViewFieldPhpType(prop);
        if(tpName == "DateTime") tpName = "\\DateTimeInterface";
        return tpName;
    }
    bool   GetDoctrineEntityViewFieldIsId(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        if(string.IsNullOrEmpty(prop.ForeignKeyNameChain)) {
            return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName)).Any();
        }
        if(prop.ForeignKeyName != prop.ForeignKeyNameChain) return false;
        if(model.ForeignKeys == null) return false;
        ModelViewForeignKeySerializable foreignKey = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyNameChain).FirstOrDefault();
        if(foreignKey == null) return false;
        if ((foreignKey.ForeignKeyProps == null) || (foreignKey.PrincipalKeyProps == null)) return false;
        int cnt = foreignKey.ForeignKeyProps.Count;
        if (foreignKey.PrincipalKeyProps.Count < cnt) cnt = foreignKey.PrincipalKeyProps.Count;
        for(int i = 0; i < cnt; i++) {
            if(foreignKey.PrincipalKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) {
                return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == foreignKey.ForeignKeyProps[i].OriginalPropertyName)).Any();
            }
        }
        return false;
    }
    string GetDoctrineEntityViewTableColumnName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return prop.ViewPropertyName;
    }
    string GetDoctrineAssertType(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        string rslt = GetDoctrineEntityViewFieldPhpType(prop);
        if(string.IsNullOrEmpty(rslt)) return "";
        switch(rslt) {
            case "string":
                string tn = prop.UnderlyingTypeName;
                if (string.IsNullOrEmpty(tn)) {
                    rslt = "";
                } else if ("system.decimal" == tn.ToLower()) {
                    rslt = "numeric";
                }
                break;
            case "int":
            case "bool":
            case "float":
            case "DateTime":
                break;
            default:
                rslt="";
                break;
        }
        return rslt;
    }
    bool   GetDoctrineEntityFieldViewIsGuid(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        if(string.IsNullOrEmpty( prop.UnderlyingTypeName )) return false;
        return prop.UnderlyingTypeName.ToLower() == "system.guid";
    }

#>
<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using Xamarin.Forms;
using System.Linq;
using System.ComponentModel;
using Prism.Regions.Navigation;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using Prism.Navigation;
using Xamarin.Essentials;

<#

    string EformModeEnumFolder                      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName                   = GetContextModelClassName(Context, EformModeEnumFolder);
    string EformModeEnumNameSpace                   = GetContextModelNameSpace(Context, EformModeEnumFolder);

    string IAppGlblSettingsServiceFolder            = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName         = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace         = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string IWebServiceFilterRsltInterfaceFolder     = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder     = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterMenuInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string WebServiceFilterMenuViewModelFolder      = "00217-WebServiceFilterMenuViewModel.cs";
    string WebServiceFilterMenuViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterMenuViewModelFolder);
    string WebServiceFilterMenuViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterMenuViewModelFolder);

    string RegionAwareViewModelBaseFolder           = "00648-RegionAwareViewModelBase.cs";
    string RegionAwareViewModelBaseClassName        = GetContextModelClassName(Context, RegionAwareViewModelBaseFolder);
    string RegionAwareViewModelBaseNameSpace        = GetContextModelNameSpace(Context, RegionAwareViewModelBaseFolder);


    string modelInterfaceFolder                     = "01100-Interface.cs";
    string modelInterfaceClassName                  = GetInterfaceName(Model);
    string modelInterfaceNameSpace                  = GetModelNameSpace(Model, modelInterfaceFolder);

    string EformUserControlFolder                   = "01496-EformUserControl.xaml.cs";
    string EformUserControlClassName                = GetModelClassName(Model, EformUserControlFolder);
    string EformUserControlNameSpace                = GetModelNameSpace(Model, EformUserControlFolder);
    string EformUserControlProject                  = GetModelProjectName(Model, EformUserControlFolder);


    string ReditUserControlFolder                   = "01816-ReditUserControl.xaml.cs";
    string ReditUserControlClassName                = GetModelClassName(Model, ReditUserControlFolder);
    string ReditUserControlNameSpace                = GetModelNameSpace(Model, ReditUserControlFolder);
    string ReditUserControlProject                  = GetModelProjectName(Model, ReditUserControlFolder);

    string ReditViewModelFolder                     = "01820-ReditViewModel.cs";
    string ReditViewModelClassName                  = GetModelClassName(Model, ReditViewModelFolder);
    string ReditViewModelNameSpace                  = GetModelNameSpace(Model, ReditViewModelFolder);
    string ReditViewModelProject                    = GetModelProjectName(Model, ReditViewModelFolder);


    string HiddenFiltersPropertyName                = "HiddenFilters";
    string OnHiddenFiltersChangedPropertyName       = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName = "HiddenFiltersPropertyChanged";



    string IsOnLoadedCalledPropertyName         = "IsOnLoadedCalled";
    string IsCanceledPropertyName               = "IsCanceled";

    string RegionPropertyName                       = "Region";
    string ReditReditUserControlRegionPropertyName  = "ReditUserControlRegion";

    string DisplayLabelProperty                 = "Name";
    string DisplayHintProperty                  = "Prompt";

    string FormRootServicePropertyName          = "FrmRootSrv";
    string AppSettingServicePropertyName        = "GlblSettingsSrv";
    string GetWithFilterMethodName              = "getwithfilter";
    string ColumnSelectorDlgPropertyName        = "ColumnSelectorDlg";


    string FormControlModelPropertyName         = "FormControlModel";
    string CaptionPropertyName                  = "Caption";
    string EformModePropertyName                = "EformMode";
    string ShowSubmitPropertyName               = "ShowSubmit";
    string FormServicePrefix                    = "FrmSrv";

    string RowMIPrefixPropertyName              = "RowMI";
    string NavigationBackCommandPropertyName    = "NavigationBackCommand";


    string UIDispatcherInvokePropertyName       = "Application.Current.Dispatcher.Invoke";
    string GetOneMethodName                     = "getone";
    string CopyToModelNotifyMethodName          = "CopyToModelNotify";

    string SubmitCommandPropertyName            = "SubmitCommand";
    string CancelCommandPropertyName            = "CancelCommand";
    string IsParentLoadedPropertyName           = "IsParentLoaded";
    
    string CanAddPropertyName                   = "CanAdd";
    string CanUpdPropertyName                   = "CanUpdate";
    string CanDelPropertyName                   = "CanDelete";
    string CanAddParentPropertyName             = "CanAddParent";
    string CanUpdParentPropertyName             = "CanUpdateParent";
    string CanDelParentPropertyName             = "CanDeleteParent";

    string CanAddDetailPropertyName             = "CanAddDetail"; 
    string CanUpdDetailPropertyName             = "CanUpdateDetail"; 
    string CanDelDetailPropertyName             = "CanDeleteDetail"; 
    string CanAddDetailParentPropertyName       = "CanAddDetailParent"; 
    string CanUpdDetailParentPropertyName       = "CanUpdateDetailParent"; 
    string CanDelDetailParentPropertyName       = "CanDeleteDetailParent"; 

    string CurrentNavigationContextPropertyName = "CurrentNavigationContext";
    string IsDestroyedPropertyName              = "IsDestroyed";
    string OnDestroyPropertyName                = "OnDestroy";

    List<string> detailViews = GetDetailViews(Model, Context, null);
    List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(Model);


    List<string> nmSpaces = new List<string>();
    if ((ReditViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((ReditViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((ReditViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((ReditViewModelNameSpace != WebServiceFilterMenuViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterMenuViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterMenuViewModelNameSpace);
    if ((ReditViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((ReditViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((ReditViewModelNameSpace != EformModeEnumNameSpace) && (nmSpaces.IndexOf(EformModeEnumNameSpace) < 0)) 
        nmSpaces.Add(EformModeEnumNameSpace);
    if ((ReditViewModelNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
    if ((ReditViewModelNameSpace != RegionAwareViewModelBaseNameSpace) && (nmSpaces.IndexOf(RegionAwareViewModelBaseNameSpace) < 0)) 
        nmSpaces.Add(RegionAwareViewModelBaseNameSpace);
    
    bool IsInTheSameModule = (EformUserControlProject == ReditUserControlProject);
    
    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>
/*

<#
    if(!IsInTheSameModule) {
#>
    "<#= EformUserControlClassName #>"-UserControl is defined in the "<#= EformUserControlProject #>"-project.
    In the file of IModule-class of "<#= EformUserControlProject #>"-project the following line of code must be inserted:

        public void OnInitialized(IContainerProvider containerProvider)
        {
            ...
            IRegionManager regionManager = containerProvider.Resolve(typeof(IRegionManager)) as IRegionManager;
            if (regionManager != null)
            {
                ...
                // According to requirements of the "<#= ReditViewModelClassName #>.cs"-file of "<#= ReditViewModelProject #>"-project. 
                regionManager.RegisterViewWithRegion("<#= EformUserControlClassName #><#= ReditReditUserControlRegionPropertyName #>", typeof(<#= EformUserControlClassName #>));
                ...
            }
            ...
        }
<#       
    }
#>


    "<#= ReditUserControlClassName #>" UserControl is defined in the "<#= ReditUserControlProject #>"-project.
    In the file of IModule-class of "<#= ReditUserControlProject #>"-project the following line of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            // According to requirements of the "<#= ReditViewModelClassName #>.cs"-file of "<#= ReditViewModelProject #>"-project. 
            ViewModelLocationProvider.Register<<#= ReditUserControlClassName #>, <#= ReditViewModelClassName #>>();
            // According to requirements of the "<#= ReditViewModelClassName #>.cs"-file of "<#= ReditViewModelProject #>"-project. 
            containerRegistry.RegisterForRegionNavigation<<#= ReditUserControlClassName #>, <#= ReditViewModelClassName #>>("<#= ReditUserControlClassName #>");
            // According to requirements of the "<#= ReditViewModelClassName #>.cs"-file of "<#= ReditViewModelProject #>"-project. 
            containerRegistry.Register<ContentView, <#= ReditUserControlClassName #>>("<#= ReditUserControlClassName #>");
            ...
        }
*/

namespace <#= ReditViewModelNameSpace #> {
    public class <#= ReditViewModelClassName #>: <#= RegionAwareViewModelBaseClassName #>, IRegionAware 
    {
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected <#= GetModelServiceInterfaceName(Model) #> <#= FormServicePrefix #><#= Model.ViewName #> = null;

        public <#= ReditViewModelClassName #>(<#= GetModelServiceInterfaceName(Model) #> _<#= FormServicePrefix #><#= Model.ViewName #>, <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName  #>) {
            this.<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
            this.<#= FormServicePrefix #><#= Model.ViewName #> = _<#= FormServicePrefix #><#= Model.ViewName #>;
            PermissionMask = <#= AppSettingServicePropertyName #>.GetViewModelMask("<#= Model.ViewName #>");
        }


        protected int PermissionMask = 0; 


        protected bool <#= IsCanceledPropertyName #> = true;
        protected <#= modelInterfaceClassName #> modelToReturn = null;


        public bool <#= CanAddPropertyName #>
        { 
            get
            {
                return ((PermissionMask & 8) == 8) && <#= CanAddParentPropertyName #>;
            }
        }
        public bool <#= CanUpdPropertyName #>
        { 
            get
            {
                return ((PermissionMask & 4) == 4) && <#= CanUpdParentPropertyName #>;
            }
        }
        public bool <#= CanDelPropertyName #>
        { 
            get
            {
                return ((PermissionMask & 2) == 2) && <#= CanDelParentPropertyName #>;
            }
        }

        public bool <#= CanAddDetailPropertyName #>
        { 
            get
            {
                return <#= CanAddDetailParentPropertyName #>;
            }
        }
        public bool <#= CanUpdDetailPropertyName #>
        { 
            get
            {
                return <#= CanUpdDetailParentPropertyName #>;
            }
        }
        public bool <#= CanDelDetailPropertyName #>
        { 
            get
            {
                return <#= CanDelDetailParentPropertyName #>;
            }
        }

        #region <#= CaptionPropertyName #>
        string _<#= CaptionPropertyName #> = "Delete item for <#= Model.Title #>";
        public string <#= CaptionPropertyName #>
        { 
            get
            {
                return _<#= CaptionPropertyName #>;
            }
            set {
                if(_<#= CaptionPropertyName #> != value) {
                    _<#= CaptionPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= EformModePropertyName #>
        protected <#= EformModeEnumClassName #> _<#= EformModePropertyName #> = <#= EformModeEnumClassName #>.DeleteMode;
        public <#= EformModeEnumClassName #> <#= EformModePropertyName #>
        {
            get
            {
                return _<#= EformModePropertyName #>;
            }
            set
            {
                if (_<#= EformModePropertyName #> != value) {
                    _<#= EformModePropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= FormControlModelPropertyName #>
        protected <#= modelInterfaceClassName #> _<#= FormControlModelPropertyName #> = null;
        public <#= modelInterfaceClassName #> <#= FormControlModelPropertyName #>
        {
            get
            {
                return _<#= FormControlModelPropertyName #>;
            }
            set
            {
                if (_<#= FormControlModelPropertyName #> != value) {
                    _<#= FormControlModelPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion


        #region <#= HiddenFiltersPropertyName #>
        IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersPropertyName #> = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
        public IEnumerable<IWebServiceFilterRsltInterface> <#= HiddenFiltersPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersPropertyName #> != value)
                {
                    _<#= HiddenFiltersPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= IsParentLoadedPropertyName #>
        bool _<#= IsParentLoadedPropertyName #> = false;
        public bool <#= IsParentLoadedPropertyName #>
        { 
            get
            {
                return _<#= IsParentLoadedPropertyName #>;
            }
            set {
                if(_<#= IsParentLoadedPropertyName #> != value) {
                    _<#= IsParentLoadedPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region IRegionAware

        public bool IsNavigationTarget(INavigationContext navigationContext) {
            return true;
        }
        public void OnNavigatedFrom(INavigationContext navigationContext) {
            if (<#= IsDestroyedPropertyName #>) return;
            if(!<#= IsCanceledPropertyName #>) {
                INavigationParameters prms = navigationContext.Parameters;
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
                prms.Add("<#= GetPrimKeyVarName(pk) #>", modelToReturn.<#= GetModelPropertyName(pk, Model) #>);
<#
            }
#>
                prms.Add("<#= EformModeEnumClassName #>", <#= EformModePropertyName #>);
            }
            <#= CurrentNavigationContextPropertyName #> = null;
            <#= IsParentLoadedPropertyName #> = false; // important to set
        }
        public void OnNavigatedTo(INavigationContext navigationContext) {
            if (<#= IsDestroyedPropertyName #>) return;
            INavigationParameters prms = navigationContext.Parameters;
            <#= IsCanceledPropertyName #> = true;
            <#= EformModeEnumClassName #> modeToCheck = <#= EformModeEnumClassName #>.DeleteMode;
            if(prms.ContainsKey("<#= EformModeEnumClassName #>")) {
                modeToCheck = prms.GetValue<<#= EformModeEnumClassName #>>("<#= EformModeEnumClassName #>");
            }
            if ((modeToCheck == <#= EformModeEnumClassName #>.DeleteMode) && (!<#= CanDelPropertyName #>)) {
                throw new Exception("Access denied to delete <#= Model.ViewName #>");
            } else if ((modeToCheck == <#= EformModeEnumClassName #>.UpdateMode) && (!<#= CanUpdPropertyName #>)) {
                throw new Exception("Access denied to update <#= Model.ViewName #>");
            } else if ((modeToCheck == <#= EformModeEnumClassName #>.AddMode) && (!<#= CanAddPropertyName #>)) {
                throw new Exception("Access denied to add <#= Model.ViewName #>");
            }
            <#= CurrentNavigationContextPropertyName #> = navigationContext;

            ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> hf = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
<#
            foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>          
            if(prms.ContainsKey("<#= GetModelPropertyName(sclrProp, Model) #>")) {
                    hf.Add(new <#= WebServiceFilterRsltViewModelClassName #>() {
                        fltrName = "<#= GetModelPropertyName(sclrProp, Model) #>",
                        fltrDataType = "<#= GetCCharpDatatype(sclrProp, Model) #>",
                        fltrOperator = "eq",
                        fltrValue = prms.GetValue<<#= GetPropertyTypeName(sclrProp) #>>("<#= GetModelPropertyName(sclrProp, Model) #>"),
                        fltrError = null
                    });
            }
<#
            }
#>          
            ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> chf = <#= HiddenFiltersPropertyName #> as ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>;
            bool resetHF = chf.Count != hf.Count;
            if ((!resetHF) && (hf.Count > 0)) {
                foreach(<#= IWebServiceFilterRsltInterfaceClassName #> citm in chf) {
                    <#= IWebServiceFilterRsltInterfaceClassName #> itm = hf.Where(h => h.fltrName == citm.fltrName).FirstOrDefault();
                    if(itm == null)
                    {
                        resetHF = true;
                        break;
                    }
                    if (!(itm.fltrValue == citm.fltrValue))
                    {
                        resetHF = true;
                        break;
                    }
                }
            } 

            if(prms.ContainsKey("<#= EformModeEnumClassName #>")) {
                string locCaption = null;
                <#= EformModeEnumClassName #> locmode = prms.GetValue<<#= EformModeEnumClassName #>>("<#= EformModeEnumClassName #>");
                if (locmode != <#= EformModeEnumClassName #>.AddMode) {
                    if (locmode == <#= EformModeEnumClassName #>.DeleteMode) {
                        locCaption = "Delete item for <#= Model.Title #>";
                    } else {
                        locCaption = "Update item for <#= Model.Title #>";
                    }
<#
            foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
#>
                    <#= GetPropertyTypeName(pk) #> <#= GetPrimKeyVarName(pk) #> = default(<#= GetPropertyTypeName(pk) #>);
                    if(prms.ContainsKey("<#= GetPrimKeyVarName(pk) #>")) {
                        <#= GetPrimKeyVarName(pk) #> = prms.GetValue<<#= GetPropertyTypeName(pk) #>>("<#= GetPrimKeyVarName(pk) #>");
                    }
<#
            }
#>
                    // <#= GetInterfaceName(Model) #> data
                    _ = <#= FormServicePrefix #><#= Model.ViewName #>.<#= GetOneMethodName #>(
<#
            {
                bool isFirst= true;
                foreach(ModelViewPropertyOfVwSerializable pk in primKeys) {
                    if (isFirst) {
                        isFirst = false;
#>
                            <#= GetPrimKeyVarName(pk) #>
<#
                    } else {
#>
                          , <#= GetPrimKeyVarName(pk) #>
<#
                    }
                }
            }
#>
                        ).ContinueWith((data) => {
                                MainThread.InvokeOnMainThreadAsync(() =>
                                {
                                    <#= CaptionPropertyName #> = locCaption;
                                    if (resetHF) { <#= HiddenFiltersPropertyName #> = hf; }
                                    <#= EformModePropertyName #> = locmode;
                                    <#= FormControlModelPropertyName #> = <#= FormServicePrefix #><#= Model.ViewName #>.<#= CopyToModelNotifyMethodName #>(data.Result, null);
                                    <#= IsParentLoadedPropertyName #> = true;
                                });
                        });
                } else {
                    <#= CaptionPropertyName #> = "Add item for <#= Model.Title #>";
                    if (resetHF) { <#= HiddenFiltersPropertyName #> = hf; }
                    <#= FormControlModelPropertyName #> = <#= FormServicePrefix #><#= Model.ViewName #>.<#= CopyToModelNotifyMethodName #>(null,null); // this is correct: cleanup twice
                    <#= EformModePropertyName #> = <#= EformModeEnumClassName #>.AddMode;
                    <#= FormControlModelPropertyName #> = null; // since DateTime-issue this is correct: <#= FormServicePrefix #><#= Model.ViewName #>.<#= CopyToModelNotifyMethodName #>(null,null);
                    <#= IsParentLoadedPropertyName #> = true;
                }
            } else {
                if (resetHF) { <#= HiddenFiltersPropertyName #> = hf; }
                <#= IsParentLoadedPropertyName #> = true;
            }
        }
        #endregion
        #region NavigationBackCommand
        public void  <#= NavigationBackCommandPropertyName #>() { 
            if (<#= IsDestroyedPropertyName #>) return;
            if (<#= CurrentNavigationContextPropertyName #> != null) {
                if(<#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.CanGoBack) {
                    <#= CurrentNavigationContextPropertyName #>.NavigationService.Journal.GoBack();
                }
            }
        } 
        #endregion


        #region <#= SubmitCommandPropertyName #>
        private ICommand _<#= SubmitCommandPropertyName #>;
        public ICommand <#= SubmitCommandPropertyName #>
        {
            get
            {
                return _<#= SubmitCommandPropertyName #> ?? (_<#= SubmitCommandPropertyName #> = new Command((param) => <#= SubmitCommandPropertyName #>Action(param), (param) => <#= SubmitCommandPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= SubmitCommandPropertyName #>Action(object param)
        {
            if (<#= IsDestroyedPropertyName #>) return;
            modelToReturn = param as <#= modelInterfaceClassName #>;
            <#= IsCanceledPropertyName #> = false;
            <#= NavigationBackCommandPropertyName #>();
        }
        protected bool <#= SubmitCommandPropertyName #>CanExecute(object param)
        {
            return true;
        }
        #endregion

        #region <#= CancelCommandPropertyName #>
        private ICommand _<#= CancelCommandPropertyName #>;
        public ICommand <#= CancelCommandPropertyName #>
        {
            get
            {
                return _<#= CancelCommandPropertyName #> ?? (_<#= CancelCommandPropertyName #> = new Command((param) => <#= CancelCommandPropertyName #>Action(param), (param) => <#= CancelCommandPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= CancelCommandPropertyName #>Action(object param)
        {
            <#= IsCanceledPropertyName #> = true;
            <#= NavigationBackCommandPropertyName #>();
        }
        protected bool <#= CancelCommandPropertyName #>CanExecute(object param)
        {
            return true;
        }
        #endregion

        public override void <#= OnDestroyPropertyName #>() {
            base.<#= OnDestroyPropertyName #>();
            _<#= HiddenFiltersPropertyName #> = null;
            _<#= FormControlModelPropertyName #> = null;
            _<#= CaptionPropertyName #> = null;
        }

    }
}



<#+
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetFilterInterfaceName(ModelViewSerializable model) {
        return "I" + GetFilterName(model);
    }
    string GetFilterName(ModelViewSerializable model) {
        return GetModelName(model) + "Filter";
    }
    string GetPageInterfaceName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }

    string GetModelServiceInterfaceName(ModelViewSerializable model) {
        return "I" + GetModelServiceName(model);
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+GetModelName(model);
    }
    string GetModelServiceName(ModelViewSerializable model) {
        return GetModelName(model) + "Service";
    }

    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date(\"" + propValue + "\")";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }
    List<string> GetDetailViews(ModelViewSerializable model, DbContextSerializable context, List<string> result)
    {
        if (result == null)
        {
            result = new List<string>();
        }
        if ((model == null) || (context == null))
        {
            return result;
        }
        if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (context.ModelViews == null)) {
            return result;
        }
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
        {
            return result;
        }
        List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
        if(primKeys == null)
        {
            return result;
        }
        if (primKeys.Count != model.PrimaryKeyProperties.Count)
        {
            return result;
        }
        string RootEntityFullClassName = model.RootEntityFullClassName;
        string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
        List<ModelViewSerializable> details =
            context.ModelViews.Where(m => m.ForeignKeys.Any(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName))).ToList();
        if(details.Count < 1)
        {
            return result;
        }
        foreach(ModelViewSerializable detail in details)
        {
            if (detail.ScalarProperties == null) continue;
            if (detail.ForeignKeys == null) continue;
            if (detail.ForeignKeys.Count < 1) continue;
            List<ModelViewForeignKeySerializable> ForeignKeys =
                detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
            if (ForeignKeys.Count < 1) continue;
            bool canBeUsed = false;
            foreach(ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
            {
                bool hasForeignKeyProps = true;
                if (ForeignKey.ForeignKeyProps != null)
                {
                    for(int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                    {
                        ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                        if (!(detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)))))
                        {
                            hasForeignKeyProps = false;
                        }
                        if(!hasForeignKeyProps)
                        {
                            ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                            if (detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName)))
                            {
                                hasForeignKeyProps = true;
                            } else
                            {
                                break;
                            }
                        }
                    }
                } else
                {
                    hasForeignKeyProps = false;
                }
                if (hasForeignKeyProps)
                {
                    canBeUsed = true;
                    break;
                }
            }
            if(canBeUsed)
            {
                if(!result.Contains(detail.ViewName))
                {
                    result.Add(detail.ViewName);
                }
            }
        }
        return result;
    }
    ModelViewSerializable GetModelViewByName(DbContextSerializable context, string viewName) {
        if ((context == null) || (string.IsNullOrEmpty(viewName))) {
            return null;
        }
        if (context.ModelViews == null) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
    }
    List<ModelViewForeignKeySerializable> GetDetailViewForeignKeys(ModelViewSerializable model, ModelViewSerializable detail, List<ModelViewForeignKeySerializable> result)
    {
        if (result == null) result = new List<ModelViewForeignKeySerializable>();
        if ((model == null) || (detail == null))
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (detail.ScalarProperties == null) || (detail.ForeignKeys == null))
        {
            return result;
        }
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
        {
            return result;
        }
        List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
        if (primKeys == null)
        {
            return result;
        }
        if (primKeys.Count != model.PrimaryKeyProperties.Count)
        {
            return result;
        }
        string RootEntityFullClassName = model.RootEntityFullClassName;
        string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
        List<ModelViewForeignKeySerializable> ForeignKeys =
            detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
        if (ForeignKeys.Count < 1)
        {
            return result;
        }
        foreach (ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
        {
            bool hasForeignKeyProps = true;
            if (ForeignKey.ForeignKeyProps != null)
            {
                for (int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                {
                    ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                    hasForeignKeyProps =
                        detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)));
                    if (!hasForeignKeyProps)
                    {
                        ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                        hasForeignKeyProps = detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName));
                        {
                            hasForeignKeyProps = true;
                        }
                        if(!hasForeignKeyProps)
                        {
                            break;
                        }
                    }
                }
            }
            else
            {
                hasForeignKeyProps = false;
            }
            if (hasForeignKeyProps)
            {
                result.Add(ForeignKey);
                break;
            }
        }
        return result;
    }
    List<ModelViewPropertyOfVwSerializable> GetDetailViewForeignKeyProps(ModelViewSerializable model, ModelViewPropertyOfVwSerializable primKey, ModelViewSerializable detail, ModelViewForeignKeySerializable ForeignKey, List<ModelViewPropertyOfVwSerializable> result)
    {
        if (result == null)
        {
            result = new List<ModelViewPropertyOfVwSerializable>();
        }
        if ((model == null) || (detail == null) || (primKey == null) || (ForeignKey == null))
        {
            return result;
        }
        if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (detail.ScalarProperties == null) || (detail.ForeignKeys == null) || (ForeignKey == null))
        {
            return result;
        }
        List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
        if(primKeys == null)
        {
            return result;
        }
        if (primKeys.Count < 1)
        {
            return result;
        }
        if(!primKeys.Any(p => (p.ViewPropertyName == primKey.ViewPropertyName) && (p.OriginalPropertyName == primKey.OriginalPropertyName)))
        {
            return result;
        }
        ModelViewForeignKeySerializable fk = detail.ForeignKeys.Where(f => f.NavigationName == ForeignKey.NavigationName).FirstOrDefault();
        if(fk == null)
        {
            return result;
        }
        ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable =
            detail.ScalarProperties.Where(s => (s.OriginalPropertyName == primKey.OriginalPropertyName) && (s.ForeignKeyNameChain == fk.NavigationName)).FirstOrDefault();
        if (modelViewPropertyOfVwSerializable != null)
        {
            result.Add(modelViewPropertyOfVwSerializable);
        }
        if (fk.ForeignKeyProps == null)
        {
            return result;
        }

        int ind = fk.PrincipalKeyProps.FindIndex(p => p.OriginalPropertyName == primKey.OriginalPropertyName);
        if(ind < 0)
        {
            return result;
        }
        ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[ind];
        ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializableEx =
            detail.ScalarProperties.FirstOrDefault(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)));
        if(modelViewPropertyOfVwSerializableEx != null) {
            if(modelViewPropertyOfVwSerializableEx != modelViewPropertyOfVwSerializable)
            {
                result.Add(modelViewPropertyOfVwSerializableEx);
            }
        }
        return result;
    }
    string GetPrimKeyVarName(ModelViewPropertyOfVwSerializable pkpModelViewUIFormPropertySerializable) {
        return "pkp" + pkpModelViewUIFormPropertySerializable.ViewPropertyName;
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>
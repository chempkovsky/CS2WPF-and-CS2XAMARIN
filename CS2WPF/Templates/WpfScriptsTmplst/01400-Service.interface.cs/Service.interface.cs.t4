<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using System.Collections.Generic;
using System.Threading.Tasks;
<#

    string modelInterfaceFolder             = "01100-Interface.cs";
    string modelInterfaceClassName          = GetInterfaceName(Model);
    string modelInterfaceNameSpace          = GetModelNameSpace(Model, modelInterfaceFolder);

    string NotifyInterfaceFolder            = "01104-NotifyInterface.cs";
    string NotifyInterfaceClassName         = GetNotifyInterfaceName(Model);
    string NotifyInterfaceNameSpace         = GetModelNameSpace(Model, NotifyInterfaceFolder);

    string modelPageInterfaceFolder         = "01200-Page.interface.cs";
    string modelPageInterfaceClassName      = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace      = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelFilterInterfaceFolder       = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName    = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace    = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelServiceInterfaceFolder       = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName    = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace    = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string FilterOperatorSuffix = "Oprtr";

    string GetAllMethodName             = "getall";
    string GetWithFilterMethodName      = "getwithfilter";
    string GetOneMethodName             = "getone";
    string UpdateOneMethodName          = "updateone";
    string AddOneMethodName             = "addone";
    string DeleteOneMethodName          = "deleteone";
    string CopyToModelMethodName        = "CopyToModel";
    string CopyToModelNotifyMethodName  = "CopyToModelNotify";


    List<ModelViewPropertyOfVwSerializable> primKeys= new List<ModelViewPropertyOfVwSerializable>();
    {
        // collect primkey props
        if ((Model.PrimaryKeyProperties != null) && (Model.ScalarProperties != null)) {
            foreach(ModelViewKeyPropertySerializable pk in Model.PrimaryKeyProperties) {
                ModelViewPropertyOfVwSerializable scProp= 
                    Model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
                if(scProp == null) {
                    if (Model.ForeignKeys != null) {
                        foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
                            if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                                int cnt = fk.ForeignKeyProps.Count;
                                if (cnt < fk.PrincipalKeyProps.Count)
                                {
                                    cnt = fk.PrincipalKeyProps.Count;
                                }
                                for(int i = 0; i < cnt; i++)
                                {
                                    if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                                    {
                                        scProp=
                                            Model.ScalarProperties.Where(p =>
                                            ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                                    }
                                    if(scProp != null) {
                                        break;
                                    }
                                }
                            }
                            if(scProp != null) {
                                break;
                            }
                        }
                    }
                }
                if(scProp != null) {
                    primKeys.Add(scProp);
                }
            }
        }
    }



    List<string> nmSpaces = new List<string>();
    if (modelServiceInterfaceNameSpace != modelInterfaceNameSpace) nmSpaces.Add(modelInterfaceNameSpace);
    if ((modelServiceInterfaceNameSpace != modelPageInterfaceNameSpace) && (nmSpaces.IndexOf(modelPageInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelPageInterfaceNameSpace);
    if ((modelServiceInterfaceNameSpace != modelFilterInterfaceNameSpace) && (nmSpaces.IndexOf(modelFilterInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelFilterInterfaceNameSpace);
    if ((modelServiceInterfaceNameSpace != NotifyInterfaceNameSpace) && (nmSpaces.IndexOf(NotifyInterfaceNameSpace) < 0)) 
        nmSpaces.Add(NotifyInterfaceNameSpace);

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= modelServiceInterfaceNameSpace #> {
    public interface <#= modelServiceInterfaceClassName #>
    {
<# 
    if (Model.IsWebApiSelectAll) { 
#>
        Task<IList<<#= modelInterfaceClassName #>>> <#= GetAllMethodName #>();
<#
    }
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
        Task<<#= modelPageInterfaceClassName #>> <#= GetWithFilterMethodName #>(<#= modelFilterInterfaceClassName #> filter);
<#
    }
    if (Model.IsWebApiSelectOneByPrimarykey) { 
#>
        Task<<#= modelInterfaceClassName #>> <#= GetOneMethodName #>(<# 
        {
            bool isNotFirst = false;
            foreach(ModelViewPropertyOfVwSerializable prop in primKeys) { 
                 if(isNotFirst){#>, <#} else {isNotFirst = true;} #><#=  GetPropertyTypeName(prop) #> <#= GetModelPropertyName(prop, Model) #> <#
            }
        }
        #>);
<#
    }
    if (Model.IsWebApiUpdate) { 
#>
        Task<<#= modelInterfaceClassName #>> <#= UpdateOneMethodName #>(<#= modelInterfaceClassName #> item);
<#
    }
    if (Model.IsWebApiAdd) { 
#>
        Task<<#= modelInterfaceClassName #>> <#= AddOneMethodName #>(<#= modelInterfaceClassName #> item);
<#
    }
    if (Model.IsWebApiDelete) { 
#>
        Task<<#= modelInterfaceClassName #>> <#= DeleteOneMethodName #>(<# 
        {
            bool isNotFirst = false;
            foreach(ModelViewPropertyOfVwSerializable prop in primKeys) { 
                 if(isNotFirst){#>, <#} else {isNotFirst = true;} #><#=  GetPropertyTypeName(prop) #> <#= GetModelPropertyName(prop, Model) #> <#
            }
        }
        #>);
<#
    }
#>
        <#= NotifyInterfaceClassName #> <#= CopyToModelNotifyMethodName #>(<#= modelInterfaceClassName #>  src, <#= NotifyInterfaceClassName #> dest = null);
        <#= modelInterfaceClassName #> <#= CopyToModelMethodName #>(<#= modelInterfaceClassName #>  src, <#= modelInterfaceClassName #> dest = null);
        <#= modelFilterInterfaceClassName #> GetFilter();
    }
}


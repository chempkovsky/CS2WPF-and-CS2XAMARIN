<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
<#

    string IWebServiceFilterRsltInterfaceFolder      = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string modelInterfaceFolder             = "01100-Interface.cs";
    string modelInterfaceClassName          = GetInterfaceName(Model);
    string modelInterfaceNameSpace          = GetModelNameSpace(Model, modelInterfaceFolder);

    string NotifyInterfaceFolder            = "01104-NotifyInterface.cs";
    string NotifyInterfaceClassName         = GetNotifyInterfaceName(Model);
    string NotifyInterfaceNameSpace         = GetModelNameSpace(Model, NotifyInterfaceFolder);

    string modelPageInterfaceFolder         = "01200-Page.interface.cs";
    string modelPageInterfaceClassName      = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace      = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelFilterInterfaceFolder       = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName    = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace    = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelServiceInterfaceFolder       = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName    = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace    = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string FilterOperatorSuffix = "Oprtr";

    string GetAllMethodName             = "getall";
    string GetWithFilterMethodName      = "getwithfilter";
    string GetOneMethodName             = "getone";
    string UpdateOneMethodName          = "updateone";
    string AddOneMethodName             = "addone";
    string DeleteOneMethodName          = "deleteone";
    string CopyToModelMethodName        = "CopyToModel";
    string CopyToModelNotifyMethodName  = "CopyToModelNotify";

    string MasterToClientKeyFieldsMapFieldName  = "M2cKeyfm";
    string MasterToClientFieldsMapFieldName     = "M2cfm";
    string HiddenFilterByRowSuffix              = "HiddenFilterByRow";
    string LengthSuffix                         = "Length";
    string KeysSuffix                           = "Keys";
    string ValuesSuffix                         = "Values";
    string ValueSuffix                          = "Value";
    string HiddenFilterAsFltRsltSuffix          = "HiddenFilterAsFltRslt";
    string HiddenFilterFieldName                = "HiddenFilter";
    string HiddenFilterByFltRsltSuffix          = "HiddenFilterByFltRslt";
    string ClientToMasterFieldsMapFieldName     = "C2mfm";
    string GetManyByRepPrimMethodNamePrefix     = "getmanybyrepprim";
    string GetOneByMethodNamePrefix             = "getoneby";
    string GetManyByRepUnqMethodNamePrefix      = "getmanybyrepunq";
    string row2FilterRsltMethodName             = "Row2FilterRslt";
    string Dict2TupleMethodName                 = "Dict2Tuple";
    string Tuple2DictMethodName                 = "Tuple2Dict";

    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = new List<ModelViewUniqueKeyOfVwSerializable>();
    {
        ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
        if (pk != null) uniqueKeys.Add(pk);
        GetModelUniqueKeys(Model, uniqueKeys);
    } 


    List<string> nmSpaces = new List<string>();
    if (modelServiceInterfaceNameSpace != modelInterfaceNameSpace) nmSpaces.Add(modelInterfaceNameSpace);
    if ((modelServiceInterfaceNameSpace != modelPageInterfaceNameSpace) && (nmSpaces.IndexOf(modelPageInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelPageInterfaceNameSpace);
    if ((modelServiceInterfaceNameSpace != modelFilterInterfaceNameSpace) && (nmSpaces.IndexOf(modelFilterInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelFilterInterfaceNameSpace);
    if ((modelServiceInterfaceNameSpace != NotifyInterfaceNameSpace) && (nmSpaces.IndexOf(NotifyInterfaceNameSpace) < 0)) 
        nmSpaces.Add(NotifyInterfaceNameSpace);
    if ((modelServiceInterfaceNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);

        

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= modelServiceInterfaceNameSpace #> {
    public interface <#= modelServiceInterfaceClassName #>
    {
        Dictionary<(string viewNm, string navNm, string propNm), (bool isMstrReq, string propNm)> get<#= MasterToClientKeyFieldsMapFieldName #>();
        Dictionary<(string viewNm, string navNm, string propNm), string> get<#= MasterToClientFieldsMapFieldName #>();
        Dictionary<(string viewNm, string navNm, string propNm), object> get<#= HiddenFilterByRowSuffix #>(<#= GetInterfaceName(Model) #> rw, string nvNm);
        int get<#= LengthSuffix #>();
        Dictionary<string, (string org, string fk, string fkchain , bool isinprimkey, bool isinunqkey, bool required, bool dbgenerated, string dttp)>.KeyCollection get<#= KeysSuffix #>();
        string getDtTp<#= ValueSuffix #>(string key);
        string getFk<#= ValueSuffix #>(string key);
        bool required<#= ValueSuffix #>(string key);
        bool dbgenerated<#= ValueSuffix #>(string key);
        bool isInPrimkey<#= ValueSuffix #>(string key);
        bool IsInUnkKey<#= ValueSuffix #>(string key);
        string getKeyByOrg<#= ValueSuffix #>(string org, string fkchain);
        IList<<#= IWebServiceFilterRsltInterfaceClassName #>> get<#= HiddenFilterAsFltRsltSuffix #>(Dictionary<(string viewNm, string navNm, string propNm), object> <#= HiddenFilterFieldName #>);
        Dictionary<(string viewNm, string navNm, string propNm), object> get<#= HiddenFilterByFltRsltSuffix #>(IList<<#= IWebServiceFilterRsltInterfaceClassName #>> fr);
        Dictionary<(string viewNm, string navNm, string propNm), string> get<#= ClientToMasterFieldsMapFieldName #>();
        Dictionary<(string viewNm, string navNm, string propNm), object> <#= Dict2TupleMethodName #>(Dictionary<string, object> src);
        Dictionary<string, object> <#= Tuple2DictMethodName #>(Dictionary<(string viewNm, string navNm, string propNm), object> src);


<# 
    if (Model.IsWebApiSelectAll) { 
#>
        Task<IList<<#= modelInterfaceClassName #>>> <#= GetAllMethodName #>();
<#
    }
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
        Task<<#= modelPageInterfaceClassName #>> <#= GetWithFilterMethodName #>(<#= modelFilterInterfaceClassName #> filter);
<#
    }
    if (Model.IsWebApiSelectOneByPrimarykey) { 
        foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) {
            List<ModelViewPropertyOfVwSerializable> primKeys = null;
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, pk, out indErrrorText);
            string localRouteName = GetOneMethodName;
            string localRouteManyName = GetManyByRepPrimMethodNamePrefix;
            if (!pk.IsPrimary) {
                    
                localRouteName = GetOneByMethodNamePrefix + pk.UniqueKeyName;
                localRouteManyName = GetManyByRepUnqMethodNamePrefix + pk.UniqueKeyName;
            }
            if (!indIsCorrect) {
#>

//
// Could not generate <#= localRouteName #>
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//

<#
            } else {
                primKeys = pk.UniqueKeyProperties;
#>
        Task<<#= modelInterfaceClassName #>> <#= localRouteName #>(
<# 
        {
            bool isNotFirst = false;
            foreach(ModelViewPropertyOfVwSerializable prop in primKeys) { 
                if(isNotFirst){
#>
        , <#=  GetPropertyTypeName(prop) #> <#= GetModelPropertyName(prop, Model) #> 
<#                 
                } else {
                    isNotFirst = true;
#>
        <#=  GetPropertyTypeName(prop) #> <#= GetModelPropertyName(prop, Model) #> 
<#
                } 
            }
        }
#>
        );
        Task<<#= modelPageInterfaceClassName #>> <#= localRouteManyName #>(<#= modelFilterInterfaceClassName #> filter);

<#
            } // the end of: if (!indIsCorrect) {...} else {}
        } // the end of: foreach(ModelViewUniqueKeyOfVwSerializable pk uniqueKeys) {}
    } // if (Model.IsWebApiSelectOneByPrimarykey) { ... }
    if (Model.IsWebApiUpdate) { 
#>
        Task<<#= modelInterfaceClassName #>> <#= UpdateOneMethodName #>(<#= modelInterfaceClassName #> item);
<#
    }
    if (Model.IsWebApiAdd) { 
#>
        Task<<#= modelInterfaceClassName #>> <#= AddOneMethodName #>(<#= modelInterfaceClassName #> item);
<#
    }
    if (Model.IsWebApiDelete) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= DeleteOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;


#>
        Task<<#= modelInterfaceClassName #>> <#= DeleteOneMethodName #>(<# 
        {
            bool isNotFirst = false;
            foreach(ModelViewPropertyOfVwSerializable prop in primKeys) { 
                 if(isNotFirst){#>, <#} else {isNotFirst = true;} #><#=  GetPropertyTypeName(prop) #> <#= GetModelPropertyName(prop, Model) #> <#
            }
        }
        #>);
<#
        }
    } // the end of if (Model.IsWebApiDelete) { ... }
#>
        <#= NotifyInterfaceClassName #> <#= CopyToModelNotifyMethodName #>(<#= modelInterfaceClassName #>  src, <#= NotifyInterfaceClassName #> dest = null);
        <#= modelInterfaceClassName #> <#= CopyToModelMethodName #>(<#= modelInterfaceClassName #>  src, <#= modelInterfaceClassName #> dest = null);
        <#= modelFilterInterfaceClassName #> GetFilter();
        IList<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= row2FilterRsltMethodName #>(<#= GetInterfaceName(Model) #> r);
    }
}


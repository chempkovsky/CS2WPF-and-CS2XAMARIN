<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using System.Collections.Generic;
using System.Net.Http;
<#

    string IBearerTokenModelFolder      = "00496-IBearerTokenModel.cs";
    string IBearerTokenModelClassName   = GetModelClassName(Model, IBearerTokenModelFolder);
    string IBearerTokenModelNameSpace   = GetModelNameSpace(Model, IBearerTokenModelFolder);

    string IAppGlblSettingsServiceFolder      = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName   = GetModelClassName(Model, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace   = GetModelNameSpace(Model, IAppGlblSettingsServiceFolder);
    
    string ShowErrorMethodName                  = "ShowErrorMessage";
    string NavigateToMethodName                 = "NavigateTo";
    string OnNavigateToNotificationPropertyName = "OnNavigateToNotification";

    List<string> nmSpaces = new List<string>();
    if ((IAppGlblSettingsServiceNameSpace != IBearerTokenModelNameSpace) && (nmSpaces.IndexOf(IBearerTokenModelNameSpace) < 0)) 
        nmSpaces.Add(IBearerTokenModelNameSpace);

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= IAppGlblSettingsServiceNameSpace #> {
    public interface  <#= IAppGlblSettingsServiceClassName #>
    {
        string CurrNavPath { get; set; }
        double FilterHeightAddition { get; set; }
        double FilterHeightFactor { get; set; }
        double TableHeightAddition { get; set; }
        double TableHeightFactor { get; set; }
        event Action<object, string> OnMessageNotification;
        event Action<object, string> OnUserChangedNotification;
        event Action<object, string> <#= OnNavigateToNotificationPropertyName #>;
        string GetWebApiPrefix(string ViewName);
        string GetSecurityWebApiPrefix();
        double getDialogWidth(string ViewName);
        string UserName { get; set; }
        <#= IBearerTokenModelClassName #> AuthInfo { get; set; }
        List<KeyValuePair<string, string>> GetAuthInfoHeader();
        int[] Permissions { get; set; }
        int[] GetEmptyPermissions();
        int GetViewModelMask(string vwModel);
        int GetDashBrdMask(string dshBrd);
        HttpClient Client  { get; }
        void <#= ShowErrorMethodName #>(string errorType, string errorMsg);
        void <#= NavigateToMethodName #>(string navigationPath);

        double DefaultGridRows(string fileType);
        double DefaultFilterRows(string fileType);
        double ExpandedGridRows(string fileType);
        double ExpandedFilterRows(string fileType);
        double DefaultGridHeight(string fileType);
        double DefaultFilterHeight(string fileType);
        double ExpandedGridHeight(string fileType);
        double ExpandedFilterHeight(string fileType);
        bool   DelayActivated { get; set; }
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>
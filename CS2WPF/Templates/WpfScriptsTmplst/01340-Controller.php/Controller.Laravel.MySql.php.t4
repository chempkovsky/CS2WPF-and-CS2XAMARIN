<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="php" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ import namespace="CS2WPF.Helpers" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    string AppPrefix                                = "App";
    string SrcPrefix                                = "src";




    string controllerFolder                         = "01340-Controller.php";
    string controllerClassName                      = GetModelClassName(Model, controllerFolder);
    string controllerNameSpace                      = GetLaravelModelNameSpace(Model, controllerFolder, AppPrefix);
    string controllerPrefix                         = GetWebApiServicePrefix(Model);
    string connectionName                           = GetLaravelConnectionName(Context);

    string DoctrineEntityTableName                  = GetDoctrineEntityTableName(Model); 
    string DoctrineEntityConnection                 = (Context.DbContextClassName + "Connection").ToLower();
    string DoctrineEntityManager                    = (Context.DbContextClassName + "Manager").ToLower();
    string DoctrineEntityMapping                    = FirstLetterToUpper(Context.DbContextClassName.ToLower());
    string DoctrineEntityUrl                        = ("DATABASE_" + Context.DbContextClassName + "_URL").ToUpper();
    

    string OperatorSufix            = "Oprtr";

    string GetAllMethodName         = "getall";
    string GetWithFilterMethodName  = "getwithfilter";
    string GetOneMethodName         = "getone";
    string UpdateOneMethodName      = "updateone";
    string AddOneMethodName         = "addone";
    string DeleteOneMethodName      = "deleteone";

    // navigationChain, (curModel, inverseForeignKey, curTableName, curAlias, inverseAlias)
    Dictionary<string, ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>> navChains = new Dictionary<string, ValueTuple<ModelViewSerializable,ModelViewForeignKeySerializable, string, string, string>>();
    {
        int navChainCnt = 0;
        navChains.Add("", ValueTuple.Create<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>( Model, null, DoctrineEntityTableName, "t000"+navChainCnt.ToString(), null) );
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) continue;
            string[] chainNames = sclrProp.ForeignKeyNameChain.Split('.');
            string curPath = "";
            for(int i = 0; i < chainNames.Count(); i++) {
                string newPath = (i == 0) ?  chainNames[i] : curPath + "." + chainNames[i];
                if(!navChains.ContainsKey(newPath)) {
                    ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
                    ModelViewSerializable curModel = curTp.Item1;
                    ModelViewForeignKeySerializable curForeignKey = curModel.ForeignKeys.Where(f => f.NavigationName == chainNames[i]).FirstOrDefault();
                    ModelViewSerializable newModel = Context.ModelViews.Where(m => m.ViewName == curForeignKey.ViewName).FirstOrDefault();
                    navChainCnt++;
                    navChains.Add(newPath, ValueTuple.Create<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>( newModel, curForeignKey, GetDoctrineEntityTableName(newModel), "t000"+navChainCnt.ToString(), curTp.Item4) );
                }
                curPath = newPath;
            }
        }
    }
    List<ModelViewPropertyOfVwSerializable> primKeys= new List<ModelViewPropertyOfVwSerializable>();
    {
        // collect primkey props
        if ((Model.PrimaryKeyProperties != null) && (Model.ScalarProperties != null)) {
            foreach(ModelViewKeyPropertySerializable pk in Model.PrimaryKeyProperties) {
                ModelViewPropertyOfVwSerializable scProp= 
                    Model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
                if(scProp == null) {
                    if (Model.ForeignKeys != null) {
                        foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
                            if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                                int cnt = fk.ForeignKeyProps.Count;
                                if (cnt < fk.PrincipalKeyProps.Count)
                                {
                                    cnt = fk.PrincipalKeyProps.Count;
                                }
                                for(int i = 0; i < cnt; i++)
                                {
                                    if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                                    {
                                        scProp=
                                            Model.ScalarProperties.Where(p =>
                                            ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                                    }
                                    if(scProp != null) {
                                        break;
                                    }
                                }
                            }
                            if(scProp != null) {
                                break;
                            }
                        }
                    }
                }
                if(scProp != null) {
                    primKeys.Add(scProp);
                }
            }
        }
    }
    bool hasDatetimePropperties = false;

#>
<?php

namespace <#= controllerNameSpace #>;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Carbon;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\JsonResponse;
use Illuminate\Validation\ValidationException;
use Illuminate\Database\Query\Builder;

// ///////////////////////////////////////////////////////////////////////////////
// the generated code expects "config/database.php"-file to have the following config parameters
// ///////////////////////////////////////////////////////////////////////////////
//     ...
//     'connections' => [
//        ...
//
//        '<#= connectionName #>' => [
//            'url' => 'mysql://root:your_password_here@127.0.0.1:3306/database_name_here?serverVersion=8.0&charset=utf8mb4',
//        ],
//        ...
// ///////////////////////////////////////////////////////////////////////////////
// Laravel: the generated code expects "routes/api.php"-file to have the following config parameters
// ///////////////////////////////////////////////////////////////////////////////
//        ...
// use <#= controllerNameSpace + "\\" + controllerClassName #>;
//        ...
<# 
    if (Model.IsWebApiSelectAll) { 
#>
// Route::get('<#= "/" + controllerPrefix + "/" + GetAllMethodName #>', [<#= controllerClassName #>::class,'<#= GetAllMethodName #>']);
<# 
    }
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
// Route::get('<#= "/" + controllerPrefix + "/" + GetWithFilterMethodName #>', [<#= controllerClassName #>::class,'<#= GetWithFilterMethodName #>']);
<# 
    }
    if (Model.IsWebApiSelectOneByPrimarykey) { 
#>
// Route::get('<#= "/" + controllerPrefix + "/" + GetOneMethodName #>', [<#= controllerClassName #>::class,'<#= GetOneMethodName #>']);
<# 
    }
    if (Model.IsWebApiAdd) { 
#>
// Route::post('<#= "/" + controllerPrefix + "/" + AddOneMethodName #>', [<#= controllerClassName #>::class,'<#= AddOneMethodName #>']);
<# 
    }
    if (Model.IsWebApiUpdate) { 
#>
// Route::put('<#= "/" + controllerPrefix + "/" + UpdateOneMethodName #>', [<#= controllerClassName #>::class,'<#= UpdateOneMethodName #>']);
<# 
    }
    if (Model.IsWebApiDelete) { 
#>
// Route::delete('<#= "/" + controllerPrefix + "/" + DeleteOneMethodName #>', [<#= controllerClassName #>::class,'<#= DeleteOneMethodName #>']);
<# 
    }
#>
//        ...
// ///////////////////////////////////////////////////////////////////////////////
// Lumen: the generated code expects "routes/web.php"-file to have the following config parameters
// ///////////////////////////////////////////////////////////////////////////////
//        ...
// 
//  //$router->group(['prefix' => 'api'], function () use ($router) {
//  $router->group([], function () use ($router) {
<# 
    if (Model.IsWebApiSelectAll) { 
#>
//   $router->get('<#= "/" + controllerPrefix + "/" + GetAllMethodName #>', ['uses' => '<#= controllerClassName #>@<#= GetAllMethodName #>']);
<# 
    }
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
//   $router->get('<#= "/" + controllerPrefix + "/" + GetWithFilterMethodName #>', ['uses' => '<#= controllerClassName #>@<#= GetWithFilterMethodName #>']);
<# 
    }
    if (Model.IsWebApiSelectOneByPrimarykey) { 
#>
//   $router->get('<#= "/" + controllerPrefix + "/" + GetOneMethodName #>', ['uses' => '<#= controllerClassName #>@<#= GetOneMethodName #>']);
<# 
    }
    if (Model.IsWebApiAdd) { 
#>
//   $router->post('<#= "/" + controllerPrefix + "/" + AddOneMethodName #>', ['uses' => '<#= controllerClassName #>@<#= AddOneMethodName #>']);
<# 
    }
    if (Model.IsWebApiUpdate) { 
#>
//   $router->put('<#= "/" + controllerPrefix + "/" + UpdateOneMethodName #>', ['uses' => '<#= controllerClassName #>@<#= UpdateOneMethodName #>']);
<# 
    }
    if (Model.IsWebApiDelete) { 
#>
//   $router->delete('<#= "/" + controllerPrefix + "/" + DeleteOneMethodName #>', ['uses' => '<#= controllerClassName #>@<#= DeleteOneMethodName #>']);
<# 
    }
#>
//  });
//        ...
// ///////////////////////////////////////////////////////////////////////////////




class <#= controllerClassName #> extends Controller
{
        protected int $defaultPageSize = 50;
        protected int $minPageSize = 5;
        protected int $maxPageSize = 150;

    protected function getQueryBuilder(): Builder
    {
        return DB::connection('<#= connectionName #>')
<#
        foreach(KeyValuePair<string, ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>>  curChain in navChains) {
            if(curChain.Value.Item2 == null) {
#>
                       ->table('<#= curChain.Value.Item3 #>', '<#= curChain.Value.Item4 #>')
<#
            } else {
                if(curChain.Value.Item2.NavigationType == NavigationTypeEnum.OptionalToMany) {
#>
                        ->leftJoin('<#= curChain.Value.Item3 #> as <#= curChain.Value.Item4 #>',  function($join) {
<#
                } else {
#>
                       ->join('<#= curChain.Value.Item3 #> as <#= curChain.Value.Item4 #>',  function($join) {
<#
                }
                for(int i = 0; i < curChain.Value.Item2.PrincipalKeyProps.Count; i++) {
#>
                            $join->on('<#= curChain.Value.Item4 #>.<#= curChain.Value.Item2.PrincipalKeyProps[i].OriginalPropertyName #>', '=', '<#= curChain.Value.Item5 #>.<#= curChain.Value.Item2.ForeignKeyProps[i].OriginalPropertyName #>');
<#
                }
#>
                         })
<#
            }

        }
#>
                       ->select(

<#
        {
            int navChainCnt = 0;
            foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
                hasDatetimePropperties = ("System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName)) || hasDatetimePropperties;
            
                string curPath = string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain) ? "" : sclrProp.ForeignKeyNameChain;
                ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
                if(navChainCnt==0) { 
#>
                         '<#= curTp.Item4 + "." + sclrProp.OriginalPropertyName + " as " + GetOutputPropertyName(sclrProp, Model) #>'
<#
                    navChainCnt = 1; 
                } else { 
#>
                        ,'<#= curTp.Item4 + "." + sclrProp.OriginalPropertyName + " as " + GetOutputPropertyName(sclrProp, Model) #>'
<#
                }
            }
        }
#>
                         );

    }
<#
    if(hasDatetimePropperties) {
#>
    protected function resetDateTime(array $row) {
        if(isset($row)) {
            if(!($row === null)) {
<#
            foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
                if ("System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName)) {
#>
                    $row['<#= GetOutputPropertyName(sclrProp, Model) #>'] = ($row-><#= GetOutputPropertyName(sclrProp, Model) #> === null) ? null : Carbon::make($row-><#= GetOutputPropertyName(sclrProp, Model) #>)->toJSON();
<#
                }
            }
#>
            }
        }
    }
<#
    }
#>



<# 
    if (Model.IsWebApiSelectAll) { 
#>
    public function <#= GetAllMethodName #>(): JsonResponse
    {
        $queryResult = $this->getQueryBuilder()->get();
<#
        if(hasDatetimePropperties) {
#>
        foreach ($queryResult as $r) {
            $this->resetDateTime($r);
        }
<#
        }
#>
        return response()->json($queryResult);
    }
<#
    } // end of if (Model.IsWebApiSelectAll) { }
#>


<# 
    if (Model.IsWebApiSelectOneByPrimarykey) { 
#>

    public function <#= GetOneMethodName #>(Request $request): JsonResponse
    {
        $prms = $request->query->all();
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        $<#= GetModelPropertyName(sclrProp, Model) #> = null;
        if (array_key_exists("<#= GetFilterPropertyName(sclrProp, Model) #>", $prms)) {
            $<#= GetModelPropertyName(sclrProp, Model) #> = $prms["<#= GetFilterPropertyName(sclrProp, Model) #>"];
<#
            if(sclrProp.IsRequiredInView) {
#>
        } else {
            return response()->json([
                'message' => 'Input param with <#= GetFilterPropertyName(sclrProp, Model) #> is required'
            ], 404);
<#
            }
#>
        }
<#
        } // the end of foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {}
#>
        $queryBuilder = $this->getQueryBuilder();
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        if(is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) {
            $queryBuilder->whereNull('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>');
        } else {
            $queryBuilder->where('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>', '=', $<#= GetModelPropertyName(sclrProp, Model) #>);
        }
<#
        }
#>        
        $queryResult = $queryBuilder->first();
        if ($queryResult === null) {
            return response()->json([
                'message' => 'Data base row does not exists'
            ], 404);
        }
<#
        if(hasDatetimePropperties) {
#>
            $this->resetDateTime($queryResult);
<#
        }
#>
        return response()->json($queryResult); 
    }
<#
    } // the end of if (Model.IsWebApiSelectOneByPrimarykey) { }
#>

<#
    if (Model.IsWebApiDelete) { 
#>
    public function <#= DeleteOneMethodName #>(Request $request): JsonResponse
    {
        $prms = $request->query->all();
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        $<#= GetModelPropertyName(sclrProp, Model) #> = null;
        if (array_key_exists("<#= GetFilterPropertyName(sclrProp, Model) #>", $prms)) {
            $<#= GetModelPropertyName(sclrProp, Model) #> = $prms["<#= GetFilterPropertyName(sclrProp, Model) #>"];
<#
            if(sclrProp.IsRequiredInView) {
#>
        } else {
            return response()->json([
                'message' => 'Input param with <#= GetFilterPropertyName(sclrProp, Model) #> is required'
            ], 404);
<#
            }
#>
        }
<#
        } // the end of foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {}
#>
        $queryBuilder = $this->getQueryBuilder();
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        if(is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) {
            $queryBuilder->whereNull('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>');
        } else {
            $queryBuilder->where('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>', '=', $<#= GetModelPropertyName(sclrProp, Model) #>);
        }
<#
        }
#>        
        $queryResult = $queryBuilder->first();
        if ($queryResult === null) {
            return response()->json([
                'message' => 'Data base row does not exists'
            ], 404);
        }
<#
        if(hasDatetimePropperties) {
#>
            $this->resetDateTime($queryResult);
<#
        }
        ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curChain =  navChains[""];
#>
        $queryBuilder = DB::connection('<#= connectionName #>')
                       ->table('<#= curChain.Item3 #>');
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        if(is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) {
            $queryBuilder->whereNull('<#= sclrProp.OriginalPropertyName #>');
        } else {
            $queryBuilder->where('<#= sclrProp.OriginalPropertyName #>', '=', $<#= GetModelPropertyName(sclrProp, Model) #>);
        }
<#
        }
#>        
        $cnt = $queryBuilder->delete();
        if($cnt < 1) {
            return response()->json([
                'message' => 'Could not delete selected row'
            ], 404);
        }
        return response()->json($queryResult); 
    }
<#
    } // the end of if (Model.IsWebApiDelete) { }
#>

<#
    if (Model.IsWebApiUpdate) { 
#>
    public function <#= UpdateOneMethodName #>(Request $request): JsonResponse
    {
        if(!$request->isJson()) {
            return response()->json([
                'message' => 'The content of the request is not defined or is not JSON'
            ], 404);
        }
        $content =  json_decode($request->getContent(), true);
        if($content === null) {
            return response()->json([
                'message' => 'Could not decode JSON content of the request'
            ], 404);
        }
        $validatorRules = [];
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            string validRules = "nullable";
            if(sclrProp.IsRequiredInView) validRules = "required"; 
            if(IsDateTimeInput(sclrProp, Model)) {
                validRules += "|date";
            }
            if(IsIntegerInput(sclrProp, Model)) {
                validRules += "|integer|numeric";
            }
            if(IsStringInput(sclrProp, Model)) {
                validRules += "|string";
                string ml = GetMaxLen(sclrProp, Model);
                if(!string.IsNullOrEmpty( ml )) validRules += "|max:"+ml;
            }
            if(IsBooleanInput(sclrProp, Model)) {
                validRules += "|boolean";
            }
#>
            $validatorRules['<#= GetOutputPropertyName(sclrProp, Model) #>'] = '<#= validRules #>';
<#
        }
#>
        $validator = Validator::make($content,$validatorRules);
        if ($validator->fails()) {
            return response()->json([
                'message' => $validator->errors()->first()
            ], 404);
        }        
<#
        ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>  primChain = navChains[""];
#>
        $queryBuilder = DB::connection('<#= connectionName #>')
                        ->table('<#= primChain.Item3 #>');
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        if(is_null($content['<#= GetOutputPropertyName(sclrProp, Model) #>'])) {
            $queryBuilder->whereNull('<#= sclrProp.OriginalPropertyName #>');
        } else {
            $queryBuilder->where('<#= sclrProp.OriginalPropertyName #>', '=', $content['<#= GetOutputPropertyName(sclrProp, Model) #>']);
        }
<#
        }
#>        
        $updList = [];
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if( primKeys.Contains(sclrProp)) continue;
            if(!string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) continue;
            if(IsComputedProperty(sclrProp, Model)) continue;
#>
            $updList['<#= sclrProp.OriginalPropertyName #>'] = $content['<#= GetOutputPropertyName(sclrProp, Model) #>'];
<#
        }                        
#>
        $queryBuilder->update($updList);
// ///////////////////////////////////////
// do not check the count of updated rows: 
// $cnt will be 0 if the user calls "save"-method without real modification of the record 
// instead check for existance with $queryBuilder->first();
// //////////////////////////////////////
//        $cnt = $queryBuilder->update($updList);
//        if($cnt < 1) {
//            return response()->json([
//                'message' => 'Could not update selected row'
//            ], 404);
//        }
//
        
        $queryBuilder = $this->getQueryBuilder();
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        if(is_null($content['<#= GetOutputPropertyName(sclrProp, Model) #>'])) {
            $queryBuilder->whereNull('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>');
        } else {
            $queryBuilder->where('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>', '=', $content['<#= GetOutputPropertyName(sclrProp, Model) #>']);
        }
<#
        }
#>        
        $queryResult = $queryBuilder->first();
        if ($queryResult === null) {
            return response()->json([
                'message' => 'Data base row does not exists'
            ], 404);
        }
<#
        if(hasDatetimePropperties) {
#>
            $this->resetDateTime($queryResult);
<#
        }
#>
        return response()->json($queryResult); 
    }
<#
    } // the end of if (Model.IsWebApiUpdate) { }
#>

<#
    if (Model.IsWebApiAdd) { 
#>
    public function <#= AddOneMethodName #>(Request $request): JsonResponse
    {
        if(!$request->isJson()) {
            return response()->json([
                'message' => 'The content of the request is not defined or is not JSON'
            ], 404);
        }
        $content =  json_decode($request->getContent(), true);
        if($content === null) {
            return response()->json([
                'message' => 'Could not decode JSON content of the request'
            ], 404);
        }
        $validatorRules = [];
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            string validRules = "nullable";
            if(sclrProp.IsRequiredInView) validRules = "required"; 
            if(IsDateTimeInput(sclrProp, Model)) {
                validRules += "|date";
            }
            if(IsIntegerInput(sclrProp, Model)) {
                validRules += "|integer|numeric";
            }
            if(IsStringInput(sclrProp, Model)) {
                validRules += "|string";
                string ml = GetMaxLen(sclrProp, Model);
                if(!string.IsNullOrEmpty( ml )) validRules += "|max:"+ml;
            }
            if(IsBooleanInput(sclrProp, Model)) {
                validRules += "|boolean";
            }
#>
            $validatorRules['<#= GetOutputPropertyName(sclrProp, Model) #>'] = '<#= validRules #>';
<#
        }
#>
        $validator = Validator::make($content,$validatorRules);
        if ($validator->fails()) {
            return response()->json([
                'message' => $validator->errors()->first()
            ], 404);
        }        
<#
        ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>  primChain = navChains[""];
#>
        $queryBuilder = DB::connection('<#= connectionName #>')
                        ->table('<#= primChain.Item3 #>');
        $insList = [];
<#
        bool hasIdentity = false;
        string identityColumn = "";
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if( primKeys.Contains(sclrProp)) {
                 if ( IsIdentityProperty(sclrProp, Model) ) {
                     hasIdentity = true;
                     identityColumn =  GetOutputPropertyName(sclrProp, Model);
                 }
                if (IsGuidInput(sclrProp, Model)) {
#>
            $insList['<#= sclrProp.OriginalPropertyName #>'] = Str::uuid();
<#
                }
            }
            if(!string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) continue;
            if(IsComputedProperty(sclrProp, Model)) continue;
#>
            $insList['<#= sclrProp.OriginalPropertyName #>'] = $content['<#= GetOutputPropertyName(sclrProp, Model) #>'];
<#
        }      
        if (hasIdentity) {
#>
        $cnt = $queryBuilder->insertGetId($insList, '<#= identityColumn #>');
        $content['<#= identityColumn #>'] = $cnt;

<#
        } else {
#>
        $cnt = $queryBuilder->insert($insList);

<#
        }
#>        
        if (($cnt === 0) || ($cnt === false)) {
            return response()->json([
                'message' => 'Could not insert current row in the database'
            ], 404);
        }        
        $queryBuilder = $this->getQueryBuilder();
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        if(is_null($content['<#= GetOutputPropertyName(sclrProp, Model) #>'])) {
            $queryBuilder->whereNull('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>');
        } else {
            $queryBuilder->where('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>', '=', $content['<#= GetOutputPropertyName(sclrProp, Model) #>']);
        }
<#
        }
#>        
        $queryResult = $queryBuilder->first();
        if ($queryResult === null) {
            return response()->json([
                'message' => 'Could not get inserted database row from the DB'
            ], 404);
        }
<#
        if(hasDatetimePropperties) {
            foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
                if ("System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName)) {

#>
            $this->resetDateTime($queryResult);
<#
                }
            }
        }
#>
        return response()->json($queryResult); 
    }
<#
    } // the end of if (Model.IsWebApiAdd) { }
#>

<# 
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
    public function <#= GetWithFilterMethodName #>(Request $request): JsonResponse
    {
        $equalOperators = [ "eq" => "=", "lk" => "like"]; // array_key_exists("eq", $equalOperators)
        $expectedOperators = [ "eq" => "=", "lk" => "like", "gt" => ">=", "lt" => "<=", "ne" => "<>" ];

        $currentPageSize = $this->defaultPageSize;
        $currentPage = 1;
        $currentOrderBy = null;
        $prms = $request->query->all();
        if (array_key_exists("pagesize", $prms)) {
            $currentPageSize =(int) $prms["pagesize"];
            if ($currentPageSize < $this->minPageSize) $currentPageSize = $this->minPageSize;
            if ($currentPageSize > $this->maxPageSize) $currentPageSize = $this->maxPageSize;
        }
        if (array_key_exists("page", $prms)) {
            $currentPage = (int)$prms["page"];
            if ($currentPage < 1) { $currentPage = 1; } else { $currentPage = $currentPage + 1; }
        }
        if (array_key_exists("orderby", $prms)) {
            $tmpval = $prms["orderby"];
            if (is_array($tmpval)) {
                $currentOrderBy = $tmpval;
            } else {
                $currentOrderBy = []; $currentOrderBy[] = $tmpval;
            }
            
        }
        $queryBuilder = $this->getQueryBuilder();
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if (sclrProp.IsUsedByfilter) {
                string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
                ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];

#>
        $<#= GetModelPropertyName(sclrProp, Model) #> = null;
        if (array_key_exists("<#= GetFilterPropertyName(sclrProp, Model) #>", $prms)) {
            $tmpval = $prms["<#= GetFilterPropertyName(sclrProp, Model) #>"];
            if (is_array($tmpval)) {
                $<#= GetModelPropertyName(sclrProp, Model) #> = $tmpval;
            } else {
                $<#= GetModelPropertyName(sclrProp, Model) #> = []; $<#= GetModelPropertyName(sclrProp, Model) #>[] = $tmpval;
            }
        }
        if(is_array($<#= GetModelPropertyName(sclrProp, Model) #>)) {
            $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #> = [];
            if (array_key_exists("<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>", $prms)) {
                $tmpval = $prms["<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>"];
                if (is_array($tmpval)) {
                    $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #> = $tmpval;
                } else {
                    $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>[] = $tmpval;
                }
            }
            foreach ($<#= GetModelPropertyName(sclrProp, Model) #> as $k => $v) {
                if(!($v === null)) {
                    $op = "eq";
                    if(array_key_exists($k, $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>)) {
                        $op = $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>[$k];
                        if($op == null) { 
                            $op = "eq"; 
                         } else {
                            if(!array_key_exists($op, $expectedOperators)) $op = "eq"; 
                         }
                    }
                    $val = $v;
                    if($op === "lk") $val =  '%'.$v.'%';
                    $queryBuilder->where('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>', $expectedOperators[$op], $val);
                }
            }
            unset($k);unset($v);
        }
<#
            }
        }
#>
        $totals = $queryBuilder->count();
        if($totals > 0) {
            $pageCount = (int) ceil( $totals / $currentPageSize );
        } else {
            if($currentPage > 0) $currentPage = $currentPage - 1;
            return response()->json([
                'page' => $currentPage,
                'pagesize' => $currentPageSize,
                'pagecount' => 0,
                'total' => 0,
                'items' => []
            ]);
        }
        $offset = ($currentPage - 1) * $currentPageSize;
        if($offset > $totals) {
            if($currentPage > 0) $currentPage = $currentPage - 1;
            return response()->json([
                'page' => $currentPage,
                'pagesize' => $currentPageSize,
                'pagecount' => $pageCount,
                'total' => $totals,
                'items' => []
            ]);
        }
        $orderByNotSet = true;
        
        $wasInUseOrderBy = [];
<#
        if(Model.ScalarProperties.Any(p => p.IsUsedByfilter)) {
#>
        if(is_array($currentOrderBy)) {
            foreach ($currentOrderBy as $v) {
                $sv =  strtolower($v);
                if (in_array($sv, $wasInUseOrderBy)) continue;
                switch ($sv) {
<#
            foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
                if (!sclrProp.IsUsedBySorting) continue;
                string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
                ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];

#>
                    case "<#= GetLowerCasePropertyName(sclrProp, Model)#>" :
                        $queryBuilder->orderBy('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>', 'asc');
                        $orderByNotSet = false;
                        $wasInUseOrderBy[] = "<#= GetLowerCasePropertyName(sclrProp, Model)#>";
                        $wasInUseOrderBy[] = "-<#= GetLowerCasePropertyName(sclrProp, Model)#>";
                        break;
                    case "-<#= GetLowerCasePropertyName(sclrProp, Model)#>" :
                        $orderByNotSet = false;
                        $queryBuilder->orderBy('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>', 'desc');
                        $wasInUseOrderBy[] = "<#= GetLowerCasePropertyName(sclrProp, Model)#>";
                        $wasInUseOrderBy[] = "-<#= GetLowerCasePropertyName(sclrProp, Model)#>";
                        break;
<#
            }
#>
                } // end of switch ($sv) {}
            } // end of foreach ($currentOrderBy as $v) {}
        } // end of if(is_array($currentOrderBy)) {}
        unset($v);
<#
        } // the end of if(Model.ScalarProperties.Any(p => p.IsUsedByfilter)) {}
#>
        if($orderByNotSet) {
<#
        {
            ModelViewPropertyOfVwSerializable sclrProp = primKeys[0];
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
            $queryBuilder->orderBy('<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>', 'asc');
<#
        }
#>
        }
        $offset = ($currentPage - 1) * $currentPageSize;
        $queryResult = $queryBuilder->skip($offset)->take($currentPageSize)->get();
<#
        if(hasDatetimePropperties) {
#>
        foreach ($queryResult as $r) {
            $this->resetDateTime($r);
        }
<#
        }
#>
        if($currentPage > 0) $currentPage = $currentPage - 1;
        return response()->json([
            'page' => $currentPage,
            'pagesize' => $currentPageSize,
            'pagecount' => $pageCount,
            'total' => $totals,
            'items' => $queryResult
        ]);
    }
<#
    } // the end of if (Model.IsWebApiSelectManyWithPagination) { }
#>

}

<#+

    string GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }

    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+ GetModelName(model);
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '_' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        result = sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
        return result.Replace(".php", "").Replace(".Php", "").Replace(".PHP", "");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string AttribToString(ModelViewAttributeSerializable attr) {
        if(attr == null) return "";
        string result= "[" + attr.AttrName; 
        if (attr.VaueProperties == null) {
            return result + "]";
        }
        if (attr.VaueProperties.Count < 1) {
            return result + "]";
        }
        result = result + "(";
        bool insComma= false;
        foreach(ModelViewAttributePropertySerializable valProp in attr.VaueProperties) {
            if (insComma) {
                result =  result + ",";
            } else {
                insComma = true;
            }
            if(! string.IsNullOrEmpty(valProp.PropName) ) {
                if (! valProp.PropName.Contains("...") ) {
                    result =  result + valProp.PropName + "=";
                }
            }
            result =  result + valProp.PropValue;
        }
        return result + ")]";
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        } else if( prop.UnderlyingTypeName.ToLower() == "system.guid" ) {
            return "36";
        }
        return "";
    }
    string GetMinLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "MinLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        } else if( prop.UnderlyingTypeName.ToLower() == "system.guid" ) {
            return "36";
        }
        return "";
    }
    string GetMaxLenEx(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinLenEx(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        return GetMinLen(sclrProp, model);
    }
    bool HasAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasFluentAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.FAPIAttributes != null) {
                foreach(ModelViewFAPIAttributeSerializable a in sclrProp.FAPIAttributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewFAPIAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasFluentAtribute(ModelViewPropertyOfVwSerializable sclrProp, string[] attrName) {
        if ((sclrProp != null) && (attrName != null)  ) {
            if ((sclrProp.FAPIAttributes != null) && (attrName.Length > 0)) {
                return sclrProp.FAPIAttributes.Any(a => attrName.Contains(a.AttrName));
            }
        }
        return false;
    }
    bool IsIdentityProperty(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (HasAtributeWithValue(prop, "DatabaseGenerated", "identity") || HasAtributeWithValue(prop, "DatabaseGenerated", "computed")) {
            return true;
        }
        if(HasFluentAtribute(prop, new string[] {"UseSqlServerIdentityColumn", "ForSqlServerUseSequenceHiLo", "ValueGeneratedOnAdd", "ValueGeneratedOnAddOrUpdate", "IsConcurrencyToken", "IsRowVersion"} )) {
            return true;
        }
        return HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "identity") || HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "computed");
    }
    bool IsIdentityPropertyKey(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null)||(prop == null)) return false;
        // it is correct: only for string.IsNullOrEmpty(p.ForeignKeyName)
        // it is correct: we do not look for ModelViewPropertyOfVwSerializable as GetScalarProperty()-method does
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
        if(sclrProp == null) return false;
        return IsIdentityProperty(sclrProp, model);
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue ;
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue ;
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "";
    }
    string GetFilterPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetLowerCasePropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string result = GetModelPropertyName(prop, model);
        if (!string.IsNullOrEmpty(result)) {
            result = result.ToLower();
        }
        return result;
    }

    string GetSymfonyModelNameSpace(ModelViewSerializable model, string fileType, string appPrefix) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "\\";
        string filePath = "";
        string defaultNameSpace = (string.IsNullOrEmpty(appPrefix)) ? "" : appPrefix;
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            if (string.IsNullOrEmpty(appPrefix))
                filePath = refItem.FileFolder;
            else 
                filePath = delim + refItem.FileFolder;
        }
        return defaultNameSpace + filePath;
    }

    string GetLaravelModelNameSpace(ModelViewSerializable model, string fileType, string appPrefix) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "\\";
        string filePath = "";
        string defaultNameSpace = (string.IsNullOrEmpty(appPrefix)) ? "" : appPrefix;
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            if (string.IsNullOrEmpty(appPrefix))
                filePath = refItem.FileFolder;
            else 
                filePath = delim + refItem.FileFolder;
        }
        return defaultNameSpace + filePath;
    }

    string GetDoctrineEntityClassNameForStr(string ViewClassName) {
        if (string.IsNullOrEmpty(ViewClassName)) return "";
        return FirstLetterToUpper(ViewClassName + "Entity");
    }
    string GetDoctrineEntityClassName(ModelViewSerializable model) {
        
        if (model == null) return "";
        return GetDoctrineEntityClassNameForStr(model.ViewName);
    }
    string GetDoctrineEntityUpdClassNameForStr(string RootEntityClassName) {
        if (string.IsNullOrEmpty(RootEntityClassName)) return "";
        return RootEntityClassName + "EntityUpd";
    }
    string GetDoctrineEntityUpdClassName(ModelViewSerializable model) {
        
        if (model == null) return "";
        return GetDoctrineEntityUpdClassNameForStr(model.RootEntityClassName);
    }
    string GetDoctrineEntitySelClassNameForStr(string ViewName) {
        if (string.IsNullOrEmpty(ViewName)) return "";
        return ViewName + "EntitySel";
    }
    string GetDoctrineEntitySelClassName(ModelViewSerializable model) {
        if (model == null) return "";
        return GetDoctrineEntitySelClassNameForStr(model.ViewName);
    }
    string GetDoctrinePageClassNameForStr(string ViewName) {
        if (string.IsNullOrEmpty(ViewName)) return "";
        return ViewName + "Page";
    }
    string GetDoctrinePageClassName(ModelViewSerializable model) {
        
        if (model == null) return "";
        return GetDoctrinePageClassNameForStr(model.ViewName);
    }
    string GetSymfonyControllerClassNameForStr(string ViewName) {
        if (string.IsNullOrEmpty(ViewName)) return "";
        return ViewName + "Controller";
    }
    string GetSymfonyControllerClassName(ModelViewSerializable model) {
        if (model == null) return "";
        return GetSymfonyControllerClassNameForStr(model.ViewName);
    }
    string GetDoctrineEntityTableName(ModelViewSerializable model) { 
        string rslt = "";
        if (model == null) return rslt;
        return CS2WPF.Helpers.CustomPluralization.Pluralize(model.RootEntityClassName).ToLower();
    }
    string GetDoctrineEntityTableColumnName(ModelViewKeyPropertySerializable prop) {
        string rslt = "";
        if (prop == null) return rslt;
        return prop.OriginalPropertyName;
    }
    string GetDoctrineEntityGetSetSuffixForStr(string rslt) {
        if (string.IsNullOrEmpty(rslt)) return "";
        rslt = rslt.ToLower();
        StringBuilder rsltSb = new StringBuilder();
        bool nextIsUpper = false;
        foreach (char ch in rslt)
        {
            if (ch == '_') { 
                nextIsUpper = true; 
            } else {
                char chl = ch;
                if(nextIsUpper) chl = char.ToUpper(ch);
                rsltSb.Append(chl);
                nextIsUpper = false; 
            }
        }
        return FirstLetterToUpper(rsltSb.ToString());
    }
    string GetDoctrineEntityGetMethodNameForStr(string rslt) {
        return "get" + GetDoctrineEntityGetSetSuffixForStr(rslt);
    }
    string GetDoctrineEntitySetMethodNameForStr(string rslt) {
        return "set" + GetDoctrineEntityGetSetSuffixForStr(rslt);
    }
    string GetDoctrineEntityFieldNameForStr(string rslt) {
        return GetDoctrineEntityGetSetSuffixForStr(rslt).ToLower();
    }
    string GetDoctrineEntityGetSetSuffix(ModelViewKeyPropertySerializable prop) {
        string rslt = "";
        if (prop == null) return rslt;
        return GetDoctrineEntityGetSetSuffixForStr( GetDoctrineEntityTableColumnName(prop));
    }
    string GetDoctrineEntityGetMethodName(ModelViewKeyPropertySerializable prop) {
        return "get" + GetDoctrineEntityGetSetSuffix(prop);
    }
    string GetDoctrineEntitySetMethodName(ModelViewKeyPropertySerializable prop) {
        return "set" + GetDoctrineEntityGetSetSuffix(prop);
    }
    string GetDoctrineEntityFieldName(ModelViewKeyPropertySerializable prop) {
        return GetDoctrineEntityGetSetSuffix(prop).ToLower();
    }
    string GetDoctrinePhpType(string csharptype) {
        if(string.IsNullOrEmpty(csharptype)) return "string";
        string rslt;
        switch (csharptype.ToLower()) {
            case "system.int32": // type="integer"
                rslt = "int";
                break;
            case "system.sbyte": // type="boolean"
                rslt = "bool";
                break;
            case "system.byte": // type="boolean"
                rslt = "bool";
                break;
            case "system.int16": // type="smallint"
                rslt = "int";
                break;
            case "system.uint16": // type="smallint"
                rslt = "int";
                break;
            case "system.uint32": // type="integer"
                rslt = "int";
                break;
            case "system.int64": // type="bigint"
                rslt = "int";
                break;
            case "system.uint64": // type="bigint"
                rslt = "int";
                break;
            case "system.char": // type="boolean"
                rslt = "bool";
                break;
            case "system.single": // type="float", precision=10, scale=0
                rslt = "float";
                break;
            case "system.double": // type="float", precision=10, scale=0
                rslt = "float";
                break;
            case "system.boolean": // type="boolean"
                rslt = "bool";
                break;
            case "system.decimal": // type="decimal", precision=18, scale=2
                rslt = "string";
                break;
            case "system.string": // type="text", length=0; type="string", length=20
                rslt = "string";
                break;
            case "system.guid":  // type="string", length=36, nullable=false/true, options={"fixed"=true}
                rslt = "string";
                break;
            case "system.datetime": // type="datetime"
                rslt = "DateTime";
                break;
                
            default:
                rslt = "string";
                break;
        }
        return rslt;
    }
    string GetDoctrineEntityFieldPhpType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        return GetDoctrinePhpType(prop.UnderlyingTypeName);
    }
    string GetDoctrineDataBaseType(string csharptype, string maxLen) {
        if(string.IsNullOrEmpty(csharptype)) return "string";
        string rslt;
        switch (csharptype.ToLower()) {
            case "system.int32": 
                rslt = "integer"; //"int";
                break;
            case "system.sbyte": 
                rslt = "boolean"; // "bool";
                break;
            case "system.byte": 
                rslt = "boolean"; // "bool";
                break;
            case "system.int16": 
                rslt = "smallint"; // "int";
                break;
            case "system.uint16": 
                rslt = "smallint"; // "int";
                break;
            case "system.uint32": 
                rslt = "integer"; // "int";
                break;
            case "system.int64": 
                rslt = "bigint"; // "int";
                break;
            case "system.uint64": 
                rslt = "bigint"; // "int";
                break;
            case "system.char": 
                rslt = "boolean"; // "bool";
                break;
            case "system.single": // type="float", precision=10, scale=0
                rslt = "float"; // "float";
                break;
            case "system.double": // type="float", precision=10, scale=0
                rslt = "float"; // "float";
                break;
            case "system.boolean": // type="boolean"
                rslt = "boolean";// "bool";
                break;
            case "system.decimal": // type="decimal", precision=18, scale=2
                rslt = "decimal"; // "string";
                break;
            case "system.string": // type="text", length=0; type="string", length=20
               if (string.IsNullOrEmpty(maxLen))
                    rslt = "text";
                else
                    rslt = "string";
                break;
            case "system.guid":  // type="string", length=36, nullable=false/true, options={"fixed"=true}
                rslt = "string";
                break;
            case "system.datetime": // type="datetime"
                rslt = "datetime"; // "DateTime";
                break;
            default:
                rslt = "string";
                break;
        }
        return rslt;
    }
    string GetDoctrineEntityFieldDataBaseType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        return GetDoctrineDataBaseType(prop.UnderlyingTypeName, GetMaxLenEx(prop, model));
    }
    bool   GetDoctrineEntityFieldIsId(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName)).Any();
    }
    bool   GetDoctrineEntityFieldIsGuid(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        if(string.IsNullOrEmpty( prop.UnderlyingTypeName )) return false;
        return prop.UnderlyingTypeName.ToLower() == "system.guid";
    }
    string GetDoctrineEntityGetSetPhpType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        string tpName = GetDoctrineEntityFieldPhpType(prop, model);
        if(tpName == "DateTime") tpName = "\\DateTimeInterface";
        return tpName;
    }

    ModelViewPropertyOfVwSerializable GetScalarProperty(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if((model == null) || (prop == null)) return null;
        ModelViewPropertyOfVwSerializable rslt =
            model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
        if (rslt != null) return rslt;
        if(model.ForeignKeys == null) return null;
        foreach(ModelViewForeignKeySerializable foreignKey in model.ForeignKeys) {
            if ((foreignKey.ForeignKeyProps != null) && (foreignKey.PrincipalKeyProps != null)) {
                string navigationName = foreignKey.NavigationName;
                int cnt = foreignKey.ForeignKeyProps.Count;
                if (foreignKey.PrincipalKeyProps.Count < cnt) cnt = foreignKey.PrincipalKeyProps.Count;
                for(int i = 0; i < cnt; i++) {
                    if(foreignKey.ForeignKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) {
                        ModelViewKeyPropertySerializable pkp = foreignKey.PrincipalKeyProps[i];
                        rslt =
                            model.ScalarProperties.Where(p => (p.OriginalPropertyName == pkp.OriginalPropertyName) && (p.ForeignKeyNameChain == navigationName)).FirstOrDefault();
                        if(rslt != null) return rslt;
                    }
                }
            }
        }
        return null;
    }
    string GetDoctrineEntityViewFieldPhpType(ModelViewPropertyOfVwSerializable prop) {
        return GetDoctrinePhpType(prop.UnderlyingTypeName);
    }
    string GetDoctrineEntityViewFieldDataBaseType(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        return GetDoctrineDataBaseType(prop.UnderlyingTypeName, GetMaxLen(prop, model));
    }
    string GetDoctrineEntityViewFieldName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return GetDoctrineEntityGetSetSuffixForStr( prop.ViewPropertyName ).ToLower();
    }
    string GetDoctrineEntityViewGetMethodName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return "get" + GetDoctrineEntityGetSetSuffixForStr( prop.ViewPropertyName );
    }
    string GetDoctrineEntityViewSetMethodName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return "set" + GetDoctrineEntityGetSetSuffixForStr( prop.ViewPropertyName );
    }
    string GetDoctrineEntityViewGetSetPhpType(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string tpName = GetDoctrineEntityViewFieldPhpType(prop);
        if(tpName == "DateTime") tpName = "\\DateTimeInterface";
        return tpName;
    }
    bool   GetDoctrineEntityViewFieldIsId(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        if(string.IsNullOrEmpty(prop.ForeignKeyNameChain)) {
            return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName)).Any();
        }
        if(prop.ForeignKeyName != prop.ForeignKeyNameChain) return false;
        if(model.ForeignKeys == null) return false;
        ModelViewForeignKeySerializable foreignKey = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyNameChain).FirstOrDefault();
        if(foreignKey == null) return false;
        if ((foreignKey.ForeignKeyProps == null) || (foreignKey.PrincipalKeyProps == null)) return false;
        int cnt = foreignKey.ForeignKeyProps.Count;
        if (foreignKey.PrincipalKeyProps.Count < cnt) cnt = foreignKey.PrincipalKeyProps.Count;
        for(int i = 0; i < cnt; i++) {
            if(foreignKey.PrincipalKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) {
                return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == foreignKey.ForeignKeyProps[i].OriginalPropertyName)).Any();
            }
        }
        return false;
    }
    string GetDoctrineEntityViewTableColumnName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return prop.ViewPropertyName;
    }
    string GetDoctrineAssertType(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        string rslt = GetDoctrineEntityViewFieldPhpType(prop);
        if(string.IsNullOrEmpty(rslt)) return "";
        switch(rslt) {
            case "string":
                string tn = prop.UnderlyingTypeName;
                if (string.IsNullOrEmpty(tn)) {
                    rslt = "";
                } else if ("system.decimal" == tn.ToLower()) {
                    rslt = "numeric";
                }
                break;
            case "int":
            case "bool":
            case "float":
            case "DateTime":
                break;
            default:
                rslt="";
                break;
        }
        return rslt;
    }
    bool   GetDoctrineEntityFieldViewIsGuid(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        if(string.IsNullOrEmpty( prop.UnderlyingTypeName )) return false;
        return prop.UnderlyingTypeName.ToLower() == "system.guid";
    }

    string GetLaravelConnectionName(DbContextSerializable context) {
        string result = "";
        if(context != null) {
            result = context.DbContextClassName;
            if(!string.IsNullOrEmpty(context.DbContextClassName)) {
                result = context.DbContextClassName.ToLower(); 
            }
        }
        return result; 
    }
    string GetLaravelMigrationName(DbContextSerializable context) {
        string result = "Migration";
        if(context != null) {
            if(!string.IsNullOrEmpty(context.DbContextClassName)) {
                result = context.DbContextClassName + result; 
            }
        }
        return result; 
    }
    string GetOutputPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    bool IsDateTimeInput(ModelViewPropertyOfVwSerializable sclrProp, ModelViewSerializable model) {
        if (sclrProp == null)
        {
            return false;
        }
        return ("System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName));
    }
    bool IsIntegerInput(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if(prop == null) return false;
        if(string.IsNullOrEmpty( prop.TypeFullName )) return false;
        string tpNm = prop.TypeFullName.ToLower();
        return 
            "system.int16".Equals(tpNm) ||
            "system.int32".Equals(tpNm) ||
            "system.int64".Equals(tpNm) ||
            "system.uint16".Equals(tpNm) ||
            "system.uint32".Equals(tpNm) ||
            "system.uint64".Equals(tpNm);
    }
    bool IsFloatInput(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if(prop == null) return false;
        if(string.IsNullOrEmpty( prop.TypeFullName )) return false;
        string tpNm = prop.TypeFullName.ToLower();
        return 
            "system.single".Equals(tpNm) ||
            "system.double".Equals(tpNm) ||
            "system.decimal".Equals(tpNm);
    }
    bool IsStringInput(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if(prop == null) return false;
        if(string.IsNullOrEmpty( prop.TypeFullName )) return false;
        string tpNm = prop.TypeFullName.ToLower();
        return  "system.string".Equals(tpNm);
    }
    bool IsBooleanInput(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if(prop == null) return false;
        if(string.IsNullOrEmpty( prop.TypeFullName )) return false;
        string tpNm = prop.TypeFullName.ToLower();
        return  "system.boolean".Equals(tpNm);
    }
    bool IsGuidInput(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if(prop == null) return false;
        if(string.IsNullOrEmpty( prop.TypeFullName )) return false;
        string tpNm = prop.TypeFullName.ToLower();
        return  "system.guid".Equals(tpNm);
    }
    bool HasAtribute(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName))) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool IsComputedProperty(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (HasAtribute(prop, "ConcurrencyCheck") || HasAtribute(prop, "Timestamp")) {
            return true;
        }
        if (HasAtributeWithValue(prop, "DatabaseGenerated", "identity") || HasAtributeWithValue(prop, "DatabaseGenerated", "computed")) {
            return true;
        }
        if(HasFluentAtribute(prop, new string[] {"UseSqlServerIdentityColumn", "ForSqlServerUseSequenceHiLo", "ValueGeneratedOnAdd", "ValueGeneratedOnAddOrUpdate", "IsConcurrencyToken", "IsRowVersion"} )) {
            return true;
        }
        return HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "identity") || HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "computed");
    }

    

#>
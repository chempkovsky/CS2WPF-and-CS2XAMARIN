<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="php" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ import namespace="CS2WPF.Helpers" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    string AppPrefix                                = "App";


    string entityUpdFolder                          = "01142-EntityUpd.php";
    string entityUpdClassName                       = GetModelClassName(Model, entityUpdFolder);
    string entityUpdNameSpace                       = GetSymfonyModelNameSpace(Model, entityUpdFolder, AppPrefix);

    string entitySelFolder                          = "01144-EntitySel.php";
    string entitySelClassName                       = GetModelClassName(Model, entitySelFolder);
    string entitySelNameSpace                       = GetSymfonyModelNameSpace(Model, entitySelFolder, AppPrefix);

    string entityTotalFolder                        = "01146-EntityTotal.php";
    string entityTotalClassName                     = GetModelClassName(Model, entityTotalFolder);
    string entityTotalNameSpace                     = GetSymfonyModelNameSpace(Model, entityTotalFolder, AppPrefix);

    string pageFolder                               = "01240-Page.php";
    string pageClassName                            = GetModelClassName(Model, pageFolder);
    string pageNameSpace                            = GetSymfonyModelNameSpace(Model, pageFolder, AppPrefix);

    string controllerFolder                         = "01340-Controller.php";
    string controllerClassName                      = GetModelClassName(Model, controllerFolder);
    string controllerNameSpace                      = GetSymfonyModelNameSpace(Model, controllerFolder, AppPrefix);
    string controllerPrefix                         = GetWebApiServicePrefix(Model);

    string DoctrineEntityTableName                  = GetDoctrineEntityTableName(Model); 

    string OperatorSufix            = "Oprtr";

    string GetAllMethodName         = "getall";
    string GetWithFilterMethodName  = "getwithfilter";
    string GetOneMethodName         = "getone";
    string UpdateOneMethodName      = "updateone";
    string AddOneMethodName         = "addone";
    string DeleteOneMethodName      = "deleteone";

    // navigationChain, (curModel, inverseForeignKey, curTableName, curAlias, inverseAlias)
    Dictionary<string, ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>> navChains = new Dictionary<string, ValueTuple<ModelViewSerializable,ModelViewForeignKeySerializable, string, string, string>>();
    {
        int navChainCnt = 0;
        navChains.Add("", ValueTuple.Create<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>( Model, null, DoctrineEntityTableName, "t000"+navChainCnt.ToString(), null) );
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) continue;
            string[] chainNames = sclrProp.ForeignKeyNameChain.Split('.');
            string curPath = "";
            for(int i = 0; i < chainNames.Count(); i++) {
                string newPath = (i == 0) ?  chainNames[i] : curPath + "." + chainNames[i];
                if(!navChains.ContainsKey(newPath)) {
                    ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
                    ModelViewSerializable curModel = curTp.Item1;
                    ModelViewForeignKeySerializable curForeignKey = curModel.ForeignKeys.Where(f => f.NavigationName == chainNames[i]).FirstOrDefault();
                    ModelViewSerializable newModel = Context.ModelViews.Where(m => m.ViewName == curForeignKey.ViewName).FirstOrDefault();
                    navChainCnt++;
                    navChains.Add(newPath, ValueTuple.Create<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>( newModel, curForeignKey, GetDoctrineEntityTableName(newModel), "t000"+navChainCnt.ToString(), curTp.Item4) );
                }
                curPath = newPath;
            }
        }
    }
    string selectClause = "select";
    string selForUpdateClause = "select";
    string fromClause = " from";
    string fromForUpdateClause = " from " + DoctrineEntityTableName + " t0000";
    {
        int navChainCnt = 0;
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
            ModelViewPropertyOfVwSerializable sclrProp = GetScalarProperty(prop, Model);
            if(sclrProp == null) continue;
            if(navChainCnt==0) { selForUpdateClause += " "; navChainCnt = 1; } else { selForUpdateClause += ", "; }
            selForUpdateClause += "t0000." + GetDoctrineEntityTableColumnName(prop) + " as " + GetDoctrineEntityViewFieldName(sclrProp);
        }
        navChainCnt = 0;
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            string curPath = string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
            if(navChainCnt==0) { selectClause += " "; navChainCnt = 1; } else { selectClause += ", "; }
            selectClause += curTp.Item4 + "." + sclrProp.OriginalPropertyName + " as " + sclrProp.ViewPropertyName;
        }
        foreach(KeyValuePair<string, ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string>>  curChain in navChains) {
            if(curChain.Value.Item2 == null) {
                fromClause += " " + curChain.Value.Item3 + " as " + curChain.Value.Item4;
            } else {
                if(curChain.Value.Item2.NavigationType == NavigationTypeEnum.OptionalToMany) {
                    fromClause += " LEFT JOIN ";
                } else {
                    fromClause += " INNER JOIN ";
                }
                fromClause += curChain.Value.Item3 + " as " + curChain.Value.Item4 + " on (";
                for(int i = 0; i < curChain.Value.Item2.PrincipalKeyProps.Count; i++) {
                    if(i > 0) fromClause += " AND ";
                    fromClause += 
                    curChain.Value.Item4 + "." +
                    curChain.Value.Item2.PrincipalKeyProps[i].OriginalPropertyName + " = " +
                    curChain.Value.Item5 + "." +
                    curChain.Value.Item2.ForeignKeyProps[i].OriginalPropertyName;  
                }
                fromClause += ")";
            }
        }
    }
    List<ModelViewPropertyOfVwSerializable> primKeys= new List<ModelViewPropertyOfVwSerializable>();
    {
        // collect primkey props
        if ((Model.PrimaryKeyProperties != null) && (Model.ScalarProperties != null)) {
            foreach(ModelViewKeyPropertySerializable pk in Model.PrimaryKeyProperties) {
                ModelViewPropertyOfVwSerializable scProp= 
                    Model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
                if(scProp == null) {
                    if (Model.ForeignKeys != null) {
                        foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
                            if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                                int cnt = fk.ForeignKeyProps.Count;
                                if (cnt < fk.PrincipalKeyProps.Count)
                                {
                                    cnt = fk.PrincipalKeyProps.Count;
                                }
                                for(int i = 0; i < cnt; i++)
                                {
                                    if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                                    {
                                        scProp=
                                            Model.ScalarProperties.Where(p =>
                                            ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                                    }
                                    if(scProp != null) {
                                        break;
                                    }
                                }
                            }
                            if(scProp != null) {
                                break;
                            }
                        }
                    }
                }
                if(scProp != null) {
                    primKeys.Add(scProp);
                }
            }
        }
    }


#>
<?php

namespace <#= controllerNameSpace #>;
use <#= entityUpdNameSpace + "\\" + entityUpdClassName #>;
use <#= entitySelNameSpace + "\\" + entitySelClassName #>;
use <#= entityTotalNameSpace + "\\" + entityTotalClassName #>;
use <#= pageNameSpace + "\\" + pageClassName #>;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityManager;
use Doctrine\Persistence\ManagerRegistry;


class <#= controllerClassName #> extends AbstractController
{
        protected int $defaultPageSize = 50;
        protected int $minPageSize = 5;
        protected int $maxPageSize = 150;

<# 
    if (Model.IsWebApiSelectAll) { 
#>
    /**
     * @Route("<#= "/" + controllerPrefix + "/" + GetAllMethodName #>", name="<#= controllerPrefix + "_" + GetAllMethodName #>", methods={"GET"})
     */
    public function <#= GetAllMethodName #>(): Response
    {
        $rsm = new ResultSetMapping($this->getDoctrine()->getManager());
        $rsm->addEntityResult(<#= entitySelClassName #>::class, "er");
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>
        $rsm->addFieldResult("er", "<#= sclrProp.ViewPropertyName #>", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>");
<#
        }
#>
        $query = $this->getDoctrine()->getManager()->createNativeQuery("<#= selectClause + " " + fromClause #>", $rsm);
        $rslt = $query->getResult();
        if (!$rslt) {
            throw $this->createNotFoundException(); // error 404
        }
        return $this->json($rslt); 
    }
<#
    } // end of if (Model.IsWebApiSelectAll) { }
#>

<# 
    if (Model.IsWebApiSelectOneByPrimarykey) { 
#>
    /**
     * @Route("<#= "/" + controllerPrefix + "/" + GetOneMethodName #>", name="<#= controllerPrefix + "_" + GetOneMethodName #>", methods={"GET"})
     */
    public function <#= GetOneMethodName #>(Request $request): Response
    {
        $prms = $request->query->all();
        $whereClause = " where (";
<#
        bool isfirst = true;
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        $<#= GetModelPropertyName(sclrProp, Model) #> = null;
        if (array_key_exists("<#= GetFilterPropertyName(sclrProp, Model) #>", $prms)) {
            $<#= GetModelPropertyName(sclrProp, Model) #> = $prms["<#= GetFilterPropertyName(sclrProp, Model) #>"];
<#
            if(sclrProp.IsRequiredInView) {
#>
        } else {
            throw $this->createNotFoundException(); // error 404
<#
            }
#>
        }
        if(is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> is null)";
<#
            } else {
#>
            $whereClause = $whereClause." and (<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> is null)";
<#
            }
#>            
        } else {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            } else {
#>
            $whereClause = $whereClause." and (<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            }
#>            
        }
<#
                isfirst = false;
        } // the end of foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {}
#>
        $whereClause = $whereClause.")";
        $rsm = new ResultSetMapping($this->getDoctrine()->getManager());
        $rsm->addEntityResult(<#= entitySelClassName #>::class, "er");
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>
        $rsm->addFieldResult("er", "<#= sclrProp.ViewPropertyName #>", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>");
<#
        }
#>
        $query = $this->getDoctrine()->getManager()->createNativeQuery("<#= selectClause + " " + fromClause #>".$whereClause, $rsm);
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
#>
        if(!is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) { $query->setParameter("<#= GetModelPropertyName(sclrProp, Model) #>", $<#= GetModelPropertyName(sclrProp, Model) #>); }
<#
        }
#>
        $rslt = $query->getResult();
        if (!$rslt) {
            throw $this->createNotFoundException(); // error 404
        }
        if(count($rslt) < 1) {
            throw $this->createNotFoundException(); // error 404
        }
        return $this->json($rslt[0]); 
    }
<#
    } // the end of if (Model.IsWebApiSelectOneByPrimarykey) { }
#>

<#
    if (Model.IsWebApiDelete) { 
#>
    /**
     * @Route("<#= "/" + controllerPrefix + "/" + DeleteOneMethodName #>", name="<#= controllerPrefix + "_" + DeleteOneMethodName #>", methods={"DELETE"})
     */
    public function <#= DeleteOneMethodName #>(Request $request): Response
    {
        $prms = $request->query->all();
        $whereClause = " where (";
<#
        bool isfirst = true;
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        $<#= GetModelPropertyName(sclrProp, Model) #> = null;
        if (array_key_exists("<#= GetFilterPropertyName(sclrProp, Model) #>", $prms)) {
            $<#= GetModelPropertyName(sclrProp, Model) #> = $prms["<#= GetFilterPropertyName(sclrProp, Model) #>"];
<#
            if(sclrProp.IsRequiredInView) {
#>
        } else {
            throw $this->createNotFoundException(); // error 404
<#
            }
#>
        }
        if(is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> is null)";
<#
            } else {
#>
            $whereClause = $whereClause." and (<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> is null)";
<#
            }
#>            
        } else {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            } else {
#>
            $whereClause = $whereClause." and (<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            }
#>            
        }
<#
            isfirst = false;
        } // the end of foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {}
#>
        $whereClause = $whereClause.")";
        $rsm = new ResultSetMapping($this->getDoctrine()->getManager());
        $rsm->addEntityResult(<#= entitySelClassName #>::class, "er");
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>
        $rsm->addFieldResult("er", "<#= sclrProp.ViewPropertyName #>", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>");
<#
        }
#>
        $query = $this->getDoctrine()->getManager()->createNativeQuery("<#= selectClause + " " + fromClause #>".$whereClause, $rsm);
<#
        
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
#>
        if(!is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) { $query->setParameter("<#= GetModelPropertyName(sclrProp, Model) #>", $<#= GetModelPropertyName(sclrProp, Model) #>); }
<#
        }
#>
        $rslt = $query->getResult();
        if (!$rslt) {
            throw $this->createNotFoundException(); // error 404
        }
        if(count($rslt) != 1) {
            throw $this->createNotFoundException(); // error 404
        }
        $whereClause = " where (";
<#
        isfirst = true;
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
            ModelViewPropertyOfVwSerializable sclrProp = GetScalarProperty(prop, Model);
            if(sclrProp == null) continue;
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
#>
        if(is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(t0000.<#= GetDoctrineEntityTableColumnName(prop) #> is null)";
<#
            } else {
#>
            $whereClause = $whereClause." and (t0000.<#= GetDoctrineEntityTableColumnName(prop) #> is null)";
<#
            }
#>            
        } else {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(t0000.<#= GetDoctrineEntityTableColumnName(prop) #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            } else {
#>
            $whereClause = $whereClause." and (t0000.<#= GetDoctrineEntityTableColumnName(prop) #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            }
#>            
        }
<#
            isfirst = false;
        }
#>
        $whereClause = $whereClause.")";
        $rsm = new ResultSetMapping($this->getDoctrine()->getManager());
        $rsm->addEntityResult(<#= entityUpdClassName #>::class, "er");
<#
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
            ModelViewPropertyOfVwSerializable sclrProp = GetScalarProperty(prop, Model);
            if(sclrProp == null) continue;
#>
        $rsm->addFieldResult("er", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>");
<#                                                                                       
        }
#>
        $query = $this->getDoctrine()->getManager()->createNativeQuery("<#= selForUpdateClause + " " + fromForUpdateClause #>".$whereClause, $rsm);
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
#>
        if(!is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) { $query->setParameter("<#= GetModelPropertyName(sclrProp, Model) #>", $<#= GetModelPropertyName(sclrProp, Model) #>); }
<#
        }
#>
        $rsltEx = $query->getResult();
        if (!$rsltEx) {
            throw $this->createNotFoundException(); // error 404
        }
        if(count($rsltEx) != 1) {
            throw $this->createNotFoundException(); // error 404
        }
        $this->getDoctrine()->getManager()->remove($rsltEx[0]);
        $this->getDoctrine()->getManager()->flush();
        return $this->json($rslt[0]); 
    }
<#
    } // the end of if (Model.IsWebApiDelete) { }
#>

<#
    if (Model.IsWebApiUpdate) { 
#>
    /**
     * @Route("<#= "/" + controllerPrefix + "/" + UpdateOneMethodName #>", name="<#= controllerPrefix + "_" + UpdateOneMethodName #>", methods={"PUT"})
     */
    public function <#= UpdateOneMethodName #>(Request $request, SerializerInterface $serializer, ValidatorInterface $validator): Response
    {
        $content = $request->getContent();
        if (!$content) {
            throw $this->createNotFoundException(); // error 404
        }
        $viewToUpdate = $serializer->deserialize($content, <#= entitySelClassName #>::class, 'json');
        if (!$viewToUpdate) {
            throw $this->createNotFoundException(); // error 404
        }
        $errors = $validator->validate($viewToUpdate);
        if(count($errors) > 0) {
           // $errorsString = (string) $errors;
           throw $this->createNotFoundException(); // error 404
        }
        $whereClause = " where (";
<#
        bool isfirst = true;
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
            ModelViewPropertyOfVwSerializable sclrProp = GetScalarProperty(prop, Model);
            if(sclrProp == null) continue;
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
#>
        $<#= GetModelPropertyName(sclrProp, Model) #> = $viewToUpdate-><#= GetDoctrineEntityViewGetMethodName(sclrProp) #>();
        if(is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(t0000.<#= GetDoctrineEntityTableColumnName(prop) #> is null)";
<#
            } else {
#>
            $whereClause = $whereClause." and (t0000.<#= GetDoctrineEntityTableColumnName(prop) #> is null)";
<#
            }
#>            
        } else {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(t0000.<#= GetDoctrineEntityTableColumnName(prop) #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            } else {
#>
            $whereClause = $whereClause." and (t0000.<#= GetDoctrineEntityTableColumnName(prop) #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            }
#>            
        }
<#
            isfirst = false;
        }
#>
        $whereClause = $whereClause.")";
        $rsm = new ResultSetMapping($this->getDoctrine()->getManager());
        $rsm->addEntityResult(<#= entityUpdClassName #>::class, "er");
<#
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
            ModelViewPropertyOfVwSerializable sclrProp = GetScalarProperty(prop, Model);
            if(sclrProp == null) continue;
#>
        $rsm->addFieldResult("er", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>");
<#
        }
#>
        $query = $this->getDoctrine()->getManager()->createNativeQuery("<#= selForUpdateClause + " " + fromForUpdateClause #>".$whereClause, $rsm);
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
#>
        if(!is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) { $query->setParameter("<#= GetModelPropertyName(sclrProp, Model) #>", $<#= GetModelPropertyName(sclrProp, Model) #>); }
<#
        }
#>
        $rsltEx = $query->getResult();
        if (!$rsltEx) {
            throw $this->createNotFoundException(); // error 404
        }
        if(count($rsltEx) != 1) {
            throw $this->createNotFoundException(); // error 404
        }
<#
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
            ModelViewPropertyOfVwSerializable sclrProp = GetScalarProperty(prop, Model);
            if(sclrProp == null) continue;
            if(primKeys.Contains(sclrProp)) {
                continue;
            }
#>
        $rsltEx[0]-><#= GetDoctrineEntityViewSetMethodName(sclrProp) #>($viewToUpdate-><#= GetDoctrineEntityViewGetMethodName(sclrProp) #>());
<#
        }
#>
        $this->getDoctrine()->getManager()->flush();
//        deprecated
//        $this->getDoctrine()->getManager()->detach($rsltEx[0]);
        $whereClause = " where (";
<#
        isfirst = true;
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        if(is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) {
<#
            if(isfirst) {
                
#>
            $whereClause = $whereClause."(<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> is null)";
<#
            } else {
#>
            $whereClause = $whereClause." and (<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> is null)";
<#
            }
#>            
        } else {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            } else {
#>
            $whereClause = $whereClause." and (<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            }
#>            
        }
<#
            isfirst = false;
        } // the end of foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {}
#>
        $whereClause = $whereClause.")";
        $rsm = new ResultSetMapping($this->getDoctrine()->getManager());
        $rsm->addEntityResult(<#= entitySelClassName #>::class, "er");
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>
        $rsm->addFieldResult("er", "<#= sclrProp.ViewPropertyName #>", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>");
<#
        }
#>
        $query = $this->getDoctrine()->getManager()->createNativeQuery("<#= selectClause + " " + fromClause #>".$whereClause, $rsm);
<#
        
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
#>
        if(!is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) { $query->setParameter("<#= GetModelPropertyName(sclrProp, Model) #>", $<#= GetModelPropertyName(sclrProp, Model) #>); }
<#
        }
#>
        $rslt = $query->getResult();
        if (!$rslt) {
            throw $this->createNotFoundException(); // error 404
        }
        if(count($rslt) != 1) {
            throw $this->createNotFoundException(); // error 404
        }
        return $this->json($rslt[0]);
    }
<#
    } // the end of if (Model.IsWebApiUpdate) { }
#>

<#
    if (Model.IsWebApiAdd) { 
#>
    /**
     * @Route("<#= "/" + controllerPrefix + "/" + AddOneMethodName #>", name="<#= controllerPrefix + "_" + AddOneMethodName #>", methods={"POST"})
     */
    public function <#= AddOneMethodName #>(Request $request, SerializerInterface $serializer, ValidatorInterface $validator): Response
    {
        $content = $request->getContent();
        if (!$content) {
            throw $this->createNotFoundException(); // error 404
        }
        $viewToAdd = $serializer->deserialize($content, <#= entitySelClassName #>::class, 'json');
        if (!$viewToAdd) {
            throw $this->createNotFoundException(); // error 404
        }
        $errors = $validator->validate($viewToAdd);
        if(count($errors) > 0) {
           // $errorsString = (string) $errors;
           throw $this->createNotFoundException(); // error 404
        }
        $entityNew = new <#= entityUpdClassName #>();
<#
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
            ModelViewPropertyOfVwSerializable sclrProp = GetScalarProperty(prop, Model);
            if(sclrProp == null) continue;
            if (primKeys.Contains(sclrProp)) {
                if(string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) {
                    if(IsIdentityProperty(sclrProp, Model)) {
                        continue;
                    }
                }
            }
#>
        $entityNew-><#= GetDoctrineEntityViewSetMethodName(sclrProp) #>($viewToAdd-><#= GetDoctrineEntityViewGetMethodName(sclrProp) #>());
<#
        }
#>
        $this->getDoctrine()->getManager()->persist($entityNew);
        $this->getDoctrine()->getManager()->flush();
//        deprecated
//        $this->getDoctrine()->getManager()->detach($entityNew);
        $whereClause = " where (";
<#
        bool isfirst = true;
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
            ModelViewPropertyOfVwSerializable sclrProp = GetScalarProperty(prop, Model);
            if(sclrProp == null) continue;
            if(!(primKeys.Contains(sclrProp))) {
                continue;
            }
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
        $<#= GetModelPropertyName(sclrProp, Model) #> = $entityNew-><#= GetDoctrineEntityViewGetMethodName(sclrProp) #>();
        if(is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> is null)";
<#
            } else {
#>
            $whereClause = $whereClause." and (<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> is null)";
<#
            }
#>            
        } else {
<#
            if(isfirst) {
#>
            $whereClause = $whereClause."(<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            } else {
#>
            $whereClause = $whereClause." and (<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> = :<#= GetModelPropertyName(sclrProp, Model) #>)";
<#
            }
#>            
        }
<#
            isfirst = false;
        }
#>
        $whereClause = $whereClause.")";
        $rsm = new ResultSetMapping($this->getDoctrine()->getManager());
        $rsm->addEntityResult(<#= entitySelClassName #>::class, "er");
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>
        $rsm->addFieldResult("er", "<#= sclrProp.ViewPropertyName #>", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>");
<#
        }
#>
        $query = $this->getDoctrine()->getManager()->createNativeQuery("<#= selectClause + " " + fromClause #>".$whereClause, $rsm);
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if(! (primKeys.Contains(sclrProp))) {
                continue;
            }
#>
        if(!is_null($<#= GetModelPropertyName(sclrProp, Model) #>)) { $query->setParameter("<#= GetModelPropertyName(sclrProp, Model) #>", $<#= GetModelPropertyName(sclrProp, Model) #>); }
<#
        }
#>
        $rslt = $query->getResult();
        if (!$rslt) {
            throw $this->createNotFoundException(); // error 404
        }
        if(count($rslt) != 1) {
            throw $this->createNotFoundException(); // error 404
        }
        return $this->json($rslt[0]);
    }
<#
    } // the end of if (Model.IsWebApiAdd) { }
#>

<# 
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
    /**
     * @Route("<#= "/" + controllerPrefix + "/" + GetWithFilterMethodName #>", name="<#= controllerPrefix + "_" + GetWithFilterMethodName #>", methods={"GET"})
     */
    public function <#= GetWithFilterMethodName #>(Request $request): Response
    {
        $equalOperators = [ "eq" => " = ", "lk" => " like "]; // array_key_exists("eq", $equalOperators)
        $expectedOperators = [ "eq" => " = ", "lk" => " like ", "gt" => " >= ", "lt" => " <= ", "ne" => " <> " ];

        $currentPageSize = $this->defaultPageSize;
        $currentPage = 1;
        $currentOrderBy = null;
        $prms = $request->query->all();
        if (array_key_exists("pagesize", $prms)) {
            $currentPageSize =(int) $prms["pagesize"];
            if ($currentPageSize < $this->minPageSize) $currentPageSize = $this->minPageSize;
            if ($currentPageSize > $this->maxPageSize) $currentPageSize = $this->maxPageSize;
        }
        if (array_key_exists("page", $prms)) {
            $currentPage = (int)$prms["page"];
            if ($currentPage < 1) { $currentPage = 1; } else { $currentPage = $currentPage + 1; }
        }
        if (array_key_exists("orderby", $prms)) {
            $tmpval = $prms["orderby"];
            if (is_array($tmpval)) {
                $currentOrderBy = $tmpval;
            } else {
                $currentOrderBy = []; $currentOrderBy[] = $tmpval;
            }
            
        }
        $isFirst = true;
        $filters =  [];
        $whereClause = " where (";
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
            if (sclrProp.IsUsedByfilter) {
                string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
                ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];

#>
        $<#= GetModelPropertyName(sclrProp, Model) #> = null;
        if (array_key_exists("<#= GetFilterPropertyName(sclrProp, Model) #>", $prms)) {
            $tmpval = $prms["<#= GetFilterPropertyName(sclrProp, Model) #>"];
            if (is_array($tmpval)) {
                $<#= GetModelPropertyName(sclrProp, Model) #> = $tmpval;
            } else {
                $<#= GetModelPropertyName(sclrProp, Model) #> = []; $<#= GetModelPropertyName(sclrProp, Model) #>[] = $tmpval;
            }
        }
        if(is_array($<#= GetModelPropertyName(sclrProp, Model) #>)) {
            $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #> = [];
            if (array_key_exists("<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>", $prms)) {
                $tmpval = $prms["<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>"];
                if (is_array($tmpval)) {
                    $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #> = $tmpval;
                } else {
                    $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>[] = $tmpval;
                }
            }
            $cnt = 0;
            foreach ($<#= GetModelPropertyName(sclrProp, Model) #> as $k => $v) {
                if(!($v == null)) {
                    $op = "eq";
                    if(array_key_exists($k, $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>)) {
                        $op = $<#= GetFilterPropertyOperatorName(sclrProp, Model, OperatorSufix) #>[$k];
                        if($op == null) { 
                            $op = "eq"; 
                         } else {
                            if(!array_key_exists($op, $expectedOperators)) $op = "eq"; 
                         }
                    }
                    if($isFirst) { $isFirst = false; } else { $whereClause = $whereClause." and "; }
                    $cnt++;
                    $whereClause = $whereClause."(<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #>".$expectedOperators[$op]." :<#= GetModelPropertyName(sclrProp, Model) #>".$cnt.")";
                    if ($op =="lk") {
                        $filters["<#= GetModelPropertyName(sclrProp, Model) #>".$cnt] = '%'.$v.'%';
                    } else {
                        $filters["<#= GetModelPropertyName(sclrProp, Model) #>".$cnt] = $v;
                    }
                }
            }
            unset($k);unset($v);
        }
<#
            }
        }
#>
        if($whereClause == " where (") { $whereClause = " "; } else { $whereClause = $whereClause.")"; }
        $rsm = new ResultSetMapping($this->getDoctrine()->getManager());
        $rsm->addEntityResult(<#= entityTotalClassName #>::class, "er");
        $rsm->addFieldResult("er", "totalcount", "totalcount");
        $query = $this->getDoctrine()->getManager()->createNativeQuery("select count(*) as totalcount <#= fromClause #>".$whereClause, $rsm);
        foreach ($filters as $k => $v) {
            $query->setParameter($k, $v);
        }
        unset($k);unset($v);
        $rslt = $query->getResult();
        $totals = 0;
        if(count($rslt) >= 1) {
            $totals = $rslt[0]->getTotalcount();
        }
        if($totals > 0) {
            $pageCount = (int) ceil( $totals / $currentPageSize );
        } else {
            if($currentPage > 0) $currentPage = $currentPage - 1;
            $pgrslt = new <#= pageClassName #>();
            $pgrslt->setPage($currentPage);
            $pgrslt->setPagesize($currentPageSize);
            $pgrslt->setPagecount(0); 
            $pgrslt->setTotal(0); 
            $pgrslt->setItems([]);
            return $this->json($pgrslt);
        }
        $offset = ($currentPage - 1) * $currentPageSize;
        if($offset > $totals) {
            if($currentPage > 0) $currentPage = $currentPage - 1;
            $pgrslt = new <#= pageClassName #>();
            $pgrslt->setPage($currentPage);
            $pgrslt->setPagesize($currentPageSize);
            $pgrslt->setPagecount($pageCount); 
            $pgrslt->setTotal($totals); 
            $pgrslt->setItems([]);
            return $this->json($pgrslt);
        }
        $isFirst = true;
        $orderby = " order by ";
        $wasInUseOrderBy = [];
<#
        if(Model.ScalarProperties.Any(p => p.IsUsedByfilter)) {
#>
        if(is_array($currentOrderBy)) {
            foreach ($currentOrderBy as $v) {
                $sv =  strtolower($v);
                if (in_array($sv, $wasInUseOrderBy)) continue;
                switch ($sv) {
<#
            foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
                if (!sclrProp.IsUsedBySorting) continue;
                string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
                ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];

#>
                    case "<#= GetLowerCasePropertyName(sclrProp, Model)#>" :
                        if($isFirst) { $isFirst = false; } else { $orderby = $orderby.", "; }
                        $orderby = $orderby."<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> ASC";
                        $wasInUseOrderBy[] = "<#= GetLowerCasePropertyName(sclrProp, Model)#>";
                        $wasInUseOrderBy[] = "-<#= GetLowerCasePropertyName(sclrProp, Model)#>";
                        break;
                    case "-<#= GetLowerCasePropertyName(sclrProp, Model)#>" :
                        if($isFirst) { $isFirst = false; } else { $orderby = $orderby.", "; }
                        $orderby = $orderby."<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> DESC";
                        $wasInUseOrderBy[] = "<#= GetLowerCasePropertyName(sclrProp, Model)#>";
                        $wasInUseOrderBy[] = "-<#= GetLowerCasePropertyName(sclrProp, Model)#>";
                        break;
<#
            }
#>
                } // end of switch ($sv) {}
            } // end of foreach ($currentOrderBy as $v) {}
        } // end of if(is_array($currentOrderBy)) {}
        unset($v);
<#
        } // the end of if(Model.ScalarProperties.Any(p => p.IsUsedByfilter)) {}
#>
        if($orderby == " order by ") {
<#
        {
            ModelViewPropertyOfVwSerializable sclrProp = primKeys[0];
            string curPath = (string.IsNullOrEmpty(sclrProp.ForeignKeyNameChain)) ? "" : sclrProp.ForeignKeyNameChain;
            ValueTuple<ModelViewSerializable, ModelViewForeignKeySerializable, string, string, string> curTp = navChains[curPath];
#>
            $orderby = $orderby."<#= curTp.Item4 #>.<#= sclrProp.OriginalPropertyName #> ASC";
<#
        }
#>
        }

        $rsm = new ResultSetMapping($this->getDoctrine()->getManager());
        $rsm->addEntityResult(<#= entitySelClassName #>::class, "er");
<#
        foreach(ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) {
#>
        $rsm->addFieldResult("er", "<#= sclrProp.ViewPropertyName #>", "<#= GetDoctrineEntityViewFieldName(sclrProp) #>");
<#
        }
#>
        $offset = ($currentPage - 1) * $currentPageSize;
        $query = $this->getDoctrine()->getManager()->createNativeQuery("<#= selectClause + " " + fromClause #>".$whereClause.$orderby." LIMIT " . $offset . "," . $currentPageSize, $rsm);
        foreach ($filters as $k => $v) {
            $query->setParameter($k, $v);
        }
        unset($k);unset($v);
        $rslt = $query->getResult();
        $pgrslt = new <#= pageClassName #>();
        if($currentPage > 0) $currentPage = $currentPage - 1;
        $pgrslt->setPage($currentPage);
        $pgrslt->setPagesize($currentPageSize);
        $pgrslt->setPagecount($pageCount); 
        $pgrslt->setTotal($totals); // ???
        $pgrslt->setItems($rslt);
        return $this->json($pgrslt);
    }
<#
    } // the end of if (Model.IsWebApiSelectManyWithPagination) { }
#>


}

<#+

    string GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }

    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+ GetModelName(model);
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '_' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        result = sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
        return result.Replace(".php", "").Replace(".Php", "").Replace(".PHP", "");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string AttribToString(ModelViewAttributeSerializable attr) {
        if(attr == null) return "";
        string result= "[" + attr.AttrName; 
        if (attr.VaueProperties == null) {
            return result + "]";
        }
        if (attr.VaueProperties.Count < 1) {
            return result + "]";
        }
        result = result + "(";
        bool insComma= false;
        foreach(ModelViewAttributePropertySerializable valProp in attr.VaueProperties) {
            if (insComma) {
                result =  result + ",";
            } else {
                insComma = true;
            }
            if(! string.IsNullOrEmpty(valProp.PropName) ) {
                if (! valProp.PropName.Contains("...") ) {
                    result =  result + valProp.PropName + "=";
                }
            }
            result =  result + valProp.PropValue;
        }
        return result + ")]";
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        } else if( prop.UnderlyingTypeName.ToLower() == "system.guid" ) {
            return "36";
        }
        return "";
    }
    string GetMinLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "MinLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        } else if( prop.UnderlyingTypeName.ToLower() == "system.guid" ) {
            return "36";
        }
        return "";
    }
    string GetMaxLenEx(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMinLenEx(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        return GetMinLen(sclrProp, model);
    }
    bool HasAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasFluentAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.FAPIAttributes != null) {
                foreach(ModelViewFAPIAttributeSerializable a in sclrProp.FAPIAttributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewFAPIAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasFluentAtribute(ModelViewPropertyOfVwSerializable sclrProp, string[] attrName) {
        if ((sclrProp != null) && (attrName != null)  ) {
            if ((sclrProp.FAPIAttributes != null) && (attrName.Length > 0)) {
                return sclrProp.FAPIAttributes.Any(a => attrName.Contains(a.AttrName));
            }
        }
        return false;
    }
    bool IsIdentityProperty(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (HasAtributeWithValue(prop, "DatabaseGenerated", "identity") || HasAtributeWithValue(prop, "DatabaseGenerated", "computed")) {
            return true;
        }
        if(HasFluentAtribute(prop, new string[] {"UseSqlServerIdentityColumn", "ForSqlServerUseSequenceHiLo", "ValueGeneratedOnAdd", "ValueGeneratedOnAddOrUpdate", "IsConcurrencyToken", "IsRowVersion"} )) {
            return true;
        }
        return HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "identity") || HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "computed");
    }
    bool IsIdentityPropertyKey(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null)||(prop == null)) return false;
        // it is correct: only for string.IsNullOrEmpty(p.ForeignKeyName)
        // it is correct: we do not look for ModelViewPropertyOfVwSerializable as GetScalarProperty()-method does
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
        if(sclrProp == null) return false;
        return IsIdentityProperty(sclrProp, model);
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue ;
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "";
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue ;
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "";
    }
    string GetFilterPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetLowerCasePropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string result = GetModelPropertyName(prop, model);
        if (!string.IsNullOrEmpty(result)) {
            result = result.ToLower();
        }
        return result;
    }

    string GetSymfonyModelNameSpace(ModelViewSerializable model, string fileType, string appPrefix) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "\\";
        string filePath = "";
        string defaultNameSpace = (string.IsNullOrEmpty(appPrefix)) ? "" : appPrefix;
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            if (string.IsNullOrEmpty(appPrefix))
                filePath = refItem.FileFolder;
            else 
                filePath = delim + refItem.FileFolder;
        }
        return defaultNameSpace + filePath;
    }
    string GetDoctrineEntityClassNameForStr(string ViewClassName) {
        if (string.IsNullOrEmpty(ViewClassName)) return "";
        return ViewClassName + "Entity";
    }
    string GetDoctrineEntityClassName(ModelViewSerializable model) {
        
        if (model == null) return "";
        return GetDoctrineEntityClassNameForStr(model.ViewName);
    }
    string GetDoctrineEntityUpdClassNameForStr(string RootEntityClassName) {
        if (string.IsNullOrEmpty(RootEntityClassName)) return "";
        return RootEntityClassName + "EntityUpd";
    }
    string GetDoctrineEntityUpdClassName(ModelViewSerializable model) {
        
        if (model == null) return "";
        return GetDoctrineEntityUpdClassNameForStr(model.RootEntityClassName);
    }
    string GetDoctrineEntitySelClassNameForStr(string ViewName) {
        if (string.IsNullOrEmpty(ViewName)) return "";
        return ViewName + "EntitySel";
    }
    string GetDoctrineEntitySelClassName(ModelViewSerializable model) {
        if (model == null) return "";
        return GetDoctrineEntitySelClassNameForStr(model.ViewName);
    }
    string GetDoctrinePageClassNameForStr(string ViewName) {
        if (string.IsNullOrEmpty(ViewName)) return "";
        return ViewName + "Page";
    }
    string GetDoctrinePageClassName(ModelViewSerializable model) {
        
        if (model == null) return "";
        return GetDoctrinePageClassNameForStr(model.ViewName);
    }
    string GetSymfonyControllerClassNameForStr(string ViewName) {
        if (string.IsNullOrEmpty(ViewName)) return "";
        return ViewName + "Controller";
    }
    string GetSymfonyControllerClassName(ModelViewSerializable model) {
        if (model == null) return "";
        return GetSymfonyControllerClassNameForStr(model.ViewName);
    }
    string GetDoctrineEntityTableName(ModelViewSerializable model) { 
        string rslt = "";
        if (model == null) return rslt;
        return CS2WPF.Helpers.CustomPluralization.Pluralize(model.RootEntityClassName).ToLower();
    }
    string GetDoctrineEntityTableColumnName(ModelViewKeyPropertySerializable prop) {
        string rslt = "";
        if (prop == null) return rslt;
        return prop.OriginalPropertyName;
    }
    string GetDoctrineEntityGetSetSuffixForStr(string rslt) {
        if (string.IsNullOrEmpty(rslt)) return "";
        rslt = rslt.ToLower();
        StringBuilder rsltSb = new StringBuilder();
        bool nextIsUpper = false;
        foreach (char ch in rslt)
        {
            if (ch == '_') { 
                nextIsUpper = true; 
            } else {
                char chl = ch;
                if(nextIsUpper) chl = char.ToUpper(ch);
                rsltSb.Append(chl);
                nextIsUpper = false; 
            }
        }
        return FirstLetterToUpper(rsltSb.ToString());
    }
    string GetDoctrineEntityGetMethodNameForStr(string rslt) {
        return "get" + GetDoctrineEntityGetSetSuffixForStr(rslt);
    }
    string GetDoctrineEntitySetMethodNameForStr(string rslt) {
        return "set" + GetDoctrineEntityGetSetSuffixForStr(rslt);
    }
    string GetDoctrineEntityFieldNameForStr(string rslt) {
        return GetDoctrineEntityGetSetSuffixForStr(rslt).ToLower();
    }
    string GetDoctrineEntityGetSetSuffix(ModelViewKeyPropertySerializable prop) {
        string rslt = "";
        if (prop == null) return rslt;
        return GetDoctrineEntityGetSetSuffixForStr( GetDoctrineEntityTableColumnName(prop));
    }
    string GetDoctrineEntityGetMethodName(ModelViewKeyPropertySerializable prop) {
        return "get" + GetDoctrineEntityGetSetSuffix(prop);
    }
    string GetDoctrineEntitySetMethodName(ModelViewKeyPropertySerializable prop) {
        return "set" + GetDoctrineEntityGetSetSuffix(prop);
    }
    string GetDoctrineEntityFieldName(ModelViewKeyPropertySerializable prop) {
        return GetDoctrineEntityGetSetSuffix(prop).ToLower();
    }
    string GetDoctrinePhpType(string csharptype) {
        if(string.IsNullOrEmpty(csharptype)) return "string";
        string rslt;
        switch (csharptype.ToLower()) {
            case "system.int32": // type="integer"
                rslt = "int";
                break;
            case "system.sbyte": // type="boolean"
                rslt = "bool";
                break;
            case "system.byte": // type="boolean"
                rslt = "bool";
                break;
            case "system.int16": // type="smallint"
                rslt = "int";
                break;
            case "system.uint16": // type="smallint"
                rslt = "int";
                break;
            case "system.uint32": // type="integer"
                rslt = "int";
                break;
            case "system.int64": // type="bigint"
                rslt = "int";
                break;
            case "system.uint64": // type="bigint"
                rslt = "int";
                break;
            case "system.char": // type="boolean"
                rslt = "bool";
                break;
            case "system.single": // type="float", precision=10, scale=0
                rslt = "float";
                break;
            case "system.double": // type="float", precision=10, scale=0
                rslt = "float";
                break;
            case "system.boolean": // type="boolean"
                rslt = "bool";
                break;
            case "system.decimal": // type="decimal", precision=18, scale=2
                rslt = "string";
                break;
            case "system.string": // type="text", length=0; type="string", length=20
                rslt = "string";
                break;
            case "system.guid":  // type="string", length=36, nullable=false/true, options={"fixed"=true}
                rslt = "string";
                break;
            case "system.datetime": // type="datetime"
                rslt = "DateTime";
                break;
                
            default:
                rslt = "string";
                break;
        }
        return rslt;
    }
    string GetDoctrineEntityFieldPhpType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        return GetDoctrinePhpType(prop.UnderlyingTypeName);
    }
    string GetDoctrineDataBaseType(string csharptype, string maxLen) {
        if(string.IsNullOrEmpty(csharptype)) return "string";
        string rslt;
        switch (csharptype.ToLower()) {
            case "system.int32": 
                rslt = "integer"; //"int";
                break;
            case "system.sbyte": 
                rslt = "boolean"; // "bool";
                break;
            case "system.byte": 
                rslt = "boolean"; // "bool";
                break;
            case "system.int16": 
                rslt = "smallint"; // "int";
                break;
            case "system.uint16": 
                rslt = "smallint"; // "int";
                break;
            case "system.uint32": 
                rslt = "integer"; // "int";
                break;
            case "system.int64": 
                rslt = "bigint"; // "int";
                break;
            case "system.uint64": 
                rslt = "bigint"; // "int";
                break;
            case "system.char": 
                rslt = "boolean"; // "bool";
                break;
            case "system.single": // type="float", precision=10, scale=0
                rslt = "float"; // "float";
                break;
            case "system.double": // type="float", precision=10, scale=0
                rslt = "float"; // "float";
                break;
            case "system.boolean": // type="boolean"
                rslt = "boolean";// "bool";
                break;
            case "system.decimal": // type="decimal", precision=18, scale=2
                rslt = "decimal"; // "string";
                break;
            case "system.string": // type="text", length=0; type="string", length=20
               if (string.IsNullOrEmpty(maxLen))
                    rslt = "text";
                else
                    rslt = "string";
                break;
            case "system.guid":  // type="string", length=36, nullable=false/true, options={"fixed"=true}
                rslt = "string";
                break;
            case "system.datetime": // type="datetime"
                rslt = "datetime"; // "DateTime";
                break;
            default:
                rslt = "string";
                break;
        }
        return rslt;
    }
    string GetDoctrineEntityFieldDataBaseType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        return GetDoctrineDataBaseType(prop.UnderlyingTypeName, GetMaxLenEx(prop, model));
    }
    bool   GetDoctrineEntityFieldIsId(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName)).Any();
    }
    bool   GetDoctrineEntityFieldIsGuid(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        if(string.IsNullOrEmpty( prop.UnderlyingTypeName )) return false;
        return prop.UnderlyingTypeName.ToLower() == "system.guid";
    }
    string GetDoctrineEntityGetSetPhpType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        string tpName = GetDoctrineEntityFieldPhpType(prop, model);
        if(tpName == "DateTime") tpName = "DateTimeInterface";
        return tpName;
    }

    ModelViewPropertyOfVwSerializable GetScalarProperty(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if((model == null) || (prop == null)) return null;
        ModelViewPropertyOfVwSerializable rslt =
            model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
        if (rslt != null) return rslt;
        if(model.ForeignKeys == null) return null;
        foreach(ModelViewForeignKeySerializable foreignKey in model.ForeignKeys) {
            if ((foreignKey.ForeignKeyProps != null) && (foreignKey.PrincipalKeyProps != null)) {
                string navigationName = foreignKey.NavigationName;
                int cnt = foreignKey.ForeignKeyProps.Count;
                if (foreignKey.PrincipalKeyProps.Count < cnt) cnt = foreignKey.PrincipalKeyProps.Count;
                for(int i = 0; i < cnt; i++) {
                    if(foreignKey.ForeignKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) {
                        ModelViewKeyPropertySerializable pkp = foreignKey.PrincipalKeyProps[i];
                        rslt =
                            model.ScalarProperties.Where(p => (p.OriginalPropertyName == pkp.OriginalPropertyName) && (p.ForeignKeyNameChain == navigationName)).FirstOrDefault();
                        if(rslt != null) return rslt;
                    }
                }
            }
        }
        return null;
    }
    string GetDoctrineEntityViewFieldPhpType(ModelViewPropertyOfVwSerializable prop) {
        return GetDoctrinePhpType(prop.UnderlyingTypeName);
    }
    string GetDoctrineEntityViewFieldDataBaseType(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        return GetDoctrineDataBaseType(prop.UnderlyingTypeName, GetMaxLen(prop, model));
    }
    string GetDoctrineEntityViewFieldName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return GetDoctrineEntityGetSetSuffixForStr( prop.ViewPropertyName ).ToLower();
    }
    string GetDoctrineEntityViewGetMethodName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return "get" + GetDoctrineEntityGetSetSuffixForStr( prop.ViewPropertyName );
    }
    string GetDoctrineEntityViewSetMethodName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return "set" + GetDoctrineEntityGetSetSuffixForStr( prop.ViewPropertyName );
    }
    string GetDoctrineEntityViewGetSetPhpType(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string tpName = GetDoctrineEntityViewFieldPhpType(prop);
        if(tpName == "DateTime") tpName = "DateTimeInterface";
        return tpName;
    }
    bool   GetDoctrineEntityViewFieldIsId(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        if(string.IsNullOrEmpty(prop.ForeignKeyNameChain)) {
            return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName)).Any();
        }
        if(prop.ForeignKeyName != prop.ForeignKeyNameChain) return false;
        if(model.ForeignKeys == null) return false;
        ModelViewForeignKeySerializable foreignKey = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyNameChain).FirstOrDefault();
        if(foreignKey == null) return false;
        if ((foreignKey.ForeignKeyProps == null) || (foreignKey.PrincipalKeyProps == null)) return false;
        int cnt = foreignKey.ForeignKeyProps.Count;
        if (foreignKey.PrincipalKeyProps.Count < cnt) cnt = foreignKey.PrincipalKeyProps.Count;
        for(int i = 0; i < cnt; i++) {
            if(foreignKey.PrincipalKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) {
                return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == foreignKey.ForeignKeyProps[i].OriginalPropertyName)).Any();
            }
        }
        return false;
    }
    string GetDoctrineEntityViewTableColumnName(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        return prop.ViewPropertyName;
    }
    string GetDoctrineAssertType(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) return "";
        string rslt = GetDoctrineEntityViewFieldPhpType(prop);
        if(string.IsNullOrEmpty(rslt)) return "";
        switch(rslt) {
            case "string":
                string tn = prop.UnderlyingTypeName;
                if (string.IsNullOrEmpty(tn)) {
                    rslt = "";
                } else if ("system.decimal" == tn.ToLower()) {
                    rslt = "numeric";
                }
                break;
            case "int":
            case "bool":
            case "float":
            case "DateTime":
                break;
            default:
                rslt="";
                break;
        }
        return rslt;
    }
    bool   GetDoctrineEntityFieldViewIsGuid(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        if(string.IsNullOrEmpty( prop.UnderlyingTypeName )) return false;
        return prop.UnderlyingTypeName.ToLower() == "system.guid";
    }

#>
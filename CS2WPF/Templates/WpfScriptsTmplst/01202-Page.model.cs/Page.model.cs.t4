<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
<#

    string modelInterfaceFolder         = "01100-Interface.cs";
    string modelInterfaceClassName      = GetInterfaceName(Model);
    string modelInterfaceNameSpace      = GetModelNameSpace(Model, modelInterfaceFolder);

    string modelFolder                  = "01102-Model.cs";
    string modelClassName               = GetModelName(Model);
    string modelNameSpace               = GetModelNameSpace(Model, modelFolder);

    string modelPageInterfaceFolder      = "01200-Page.interface.cs";
    string modelPageInterfaceClassName   = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace   = GetModelNameSpace(Model, modelPageInterfaceFolder);
    
    string modelPageFolder               = "01202-Page.model.cs";
    string modelPageClassName            = GetModelPageName(Model);
    string modelPageNameSpace            = GetModelNameSpace(Model, modelPageFolder);

    List<string> nmSpaces = new List<string>();
    if (modelPageNameSpace != modelInterfaceNameSpace) nmSpaces.Add(modelInterfaceNameSpace);
    if ((modelPageNameSpace != modelPageInterfaceNameSpace) && (nmSpaces.IndexOf(modelPageInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelPageInterfaceNameSpace);
    if ((modelPageNameSpace != modelNameSpace) && (nmSpaces.IndexOf(modelNameSpace) < 0)) 
        nmSpaces.Add(modelNameSpace);


#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

namespace <#= modelPageNameSpace #> {
    public class <#= modelPageClassName #>: <#= modelPageInterfaceClassName #>
    {
        public <#= modelPageClassName #>() {}

        [JsonConstructorAttribute]
        public <#= modelPageClassName #>(IList<<#= modelClassName #>> items) 
        {
            this.items = new List<<#= modelInterfaceClassName #>>(items);
        }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "page")]
<# } #>
        public int page { get; set; }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "pagesize")]
<# } #>
        public int pagesize { get; set; }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "pagecount")]
<# } #>
        public int pagecount { get; set; }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "total")]
<# } #>
        public int total { get; set; }

<# if(Model.GenerateJSonAttribute) { #>
        [JsonProperty(PropertyName = "items")]
<# } #>
        public IList<<#= modelInterfaceClassName #>> items { get; set; }
    }
}


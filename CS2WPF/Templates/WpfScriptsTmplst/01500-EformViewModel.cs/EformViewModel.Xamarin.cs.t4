<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using System;
using Xamarin.Forms;
using System.Collections;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Linq;
using Prism.Mvvm;
using Prism.Services.Dialogs;
using System.Threading.Tasks;
using System.Reflection;
using System.ComponentModel.DataAnnotations;
using Xamarin.Essentials;
<#

    string EformModeEnumFolder                      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName                   = GetContextModelClassName(Context, EformModeEnumFolder);
    string EformModeEnumNameSpace                   = GetContextModelNameSpace(Context, EformModeEnumFolder);

    string IAppGlblSettingsServiceFolder            = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName         = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace         = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string BindingContextFeedbackFolder             = "00166-BindingContextFeedback.cs";
    string BindingContextFeedbackClassName          = GetContextModelClassName(Context, BindingContextFeedbackFolder);
    string BindingContextFeedbackNameSpace          = GetContextModelNameSpace(Context, BindingContextFeedbackFolder);

    string IEformViewModelInterfaceFolder           = "00199-IEformViewModelInterface.cs";
    string IEformViewModelInterfaceClassName        = GetContextModelClassName(Context, IEformViewModelInterfaceFolder);
    string IEformViewModelInterfaceNameSpace        = GetContextModelNameSpace(Context, IEformViewModelInterfaceFolder);


    string IWebServiceFilterRsltInterfaceFolder     = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string IBindingContextChangedFolder             = "00220-IBindingContextChanged.cs";
    string IBindingContextChangedClassName          = GetContextModelClassName(Context, IBindingContextChangedFolder);
    string IBindingContextChangedNameSpace          = GetContextModelNameSpace(Context, IBindingContextChangedFolder);

    string SdlgViewModelBaseFolder                  = "00633-SdlgViewModelBase.cs";
    string SdlgViewModelBaseClassName               = GetContextModelClassName(Context, SdlgViewModelBaseFolder);
    string SdlgViewModelBaseNameSpace               = GetContextModelNameSpace(Context, SdlgViewModelBaseFolder);

    string modelInterfaceFolder                     = "01100-Interface.cs";
    string modelInterfaceClassName                  = GetInterfaceName(Model);
    string modelInterfaceNameSpace                  = GetModelNameSpace(Model, modelInterfaceFolder);

    string NotifyInterfaceFolder                    = "01104-NotifyInterface.cs";
    string NotifyInterfaceClassName                 = GetNotifyInterfaceName(Model);
    string NotifyInterfaceNameSpace                 = GetModelNameSpace(Model, NotifyInterfaceFolder);

    string modelPageInterfaceFolder                 = "01200-Page.interface.cs";
    string modelPageInterfaceClassName              = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace              = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelFilterInterfaceFolder               = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName            = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace            = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelFilterFolder                        = "01302-Filter.model.cs";
    string modelFilterClassName                     = GetFilterName(Model);
    string modelFilterNameSpace                     = GetModelNameSpace(Model, modelFilterFolder);

    string modelServiceInterfaceFolder              = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName           = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace           = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string SdlgViewModelFolder                      = "01440-SdlgViewModel.cs";
    //string SdlgViewModelClassName                   = GetModelClassName(Model, SdlgViewModelFolder);
    //string SdlgViewModelNameSpace                   = GetModelNameSpace(Model, SdlgViewModelFolder);

    string EformUserControlFolder                   = "01496-EformUserControl.xaml.cs";
    string EformUserControlClassName                = GetModelClassName(Model, EformUserControlFolder);
    string EformUserControlNameSpace                = GetModelNameSpace(Model, EformUserControlFolder);
    string EformUserControlProject                  = GetModelProjectName(Model, EformUserControlFolder);

    string EformViewModelFolder                     = "01500-EformViewModel.cs";
    string EformViewModelClassName                  = GetModelClassName(Model, EformViewModelFolder);
    string EformViewModelNameSpace                  = GetModelNameSpace(Model, EformViewModelFolder);
    string EformViewModelProject                    = GetModelProjectName(Model, EformViewModelFolder);


    string EformModePropertyName                    = "EformMode";
    string EformModeVMPropertyName                  = "EformModeVM";
    string OnEformModeChangedPropertyName           = "OnEformModeChanged";
    string EformModeChangedPropertyName             = "EformModeChanged";

    string FormControlModelPropertyName             = "FormControlModel";
    string FormControlModelVMPropertyName           = "FormControlModelVM";
    string OnFormControlModelChangedPropertyName    = "OnFormControlModelChanged";
    string FormControlModelChangedPropertyName      = "FormControlModelChanged";

    string HiddenFiltersPropertyName                = "HiddenFilters";
    string HiddenFiltersVMPropertyName              = "HiddenFiltersVM";

    string OnHiddenFiltersChangedPropertyName       = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName = "HiddenFiltersPropertyChanged";

    string IsOnLoadedCalledPropertyName             = "IsOnLoadedCalled";
    string IsLoadingPropertyName                    = "IsLoading";
    string OnLoadedPropertyName                     = "OnLoaded";

    string OnAutoSuggestBoxTextChangedPropertyName   = "OnAutoSuggestBoxTextChanged";
    string OnAutoSuggestBoxQuerySubmittedPropertyName= "OnAutoSuggestBoxQuerySubmitted";


    string ComboSufix                = "CmbCntrl";
    string ComboErrorSufix           = "CmbCntrlSuffixError"; // ComboSufix  + "SuffixError" it is used by RaiseErrorsChanged(string propertyName)
    string ButtonSufix               = "BttnItm";
    string ButtonErrorSufix          = "BttnItmSuffixError"; // ButtonSufix + "SuffixError" it is used by RaiseErrorsChanged(string propertyName)
    string TypeaheadSufix            = "TphdCntrl";
    string TypeaheadErrorSufix       = "TphdCntrlSuffixError"; // TypeaheadSufix + "SuffixError" it is used by RaiseErrorsChanged(string propertyName)
    string TypeaheadTextSufix        = "TphdCntrlText";
    string TypeaheadItemsSourceSufix = "TphdCntrlItemsSource";
    string TypeaheadCalledSufix      = "TphdCntrlCalled";
    string ValueErrorSufix           = "SuffixError"; // ValueField + "SuffixError" it is used by RaiseErrorsChanged(string propertyName)

    string FormServicePrefix        = "FrmSrv";
    string EnabledSufix             = "Enabled";
    string FilterOperatorSuffix     = "Oprtr";
    string SearchClickSufix         = "SrchClck";


    string RegionPropertyName       = "Region";
    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";


    string FormRootServicePropertyName      = "FrmRootSrv";
    string AppSettingServicePropertyName    = "GlblSettingsSrv";
    string TitleCaptionVal                  = "Select Item";


    string GetAllMethodName                 = "getall";
    string GetWithFilterMethodName          = "getwithfilter";
    string GetOneMethodName                 = "getone";
    string UpdateOneMethodName              = "updateone";
    string AddOneMethodName                 = "addone";
    string DeleteOneMethodName              = "deleteone";
    string CopyToModelMethodName            = "CopyToModel";
    string CopyToModelNotifyMethodName      = "CopyToModelNotify";
    string ShowErrorMethodName              = "ShowErrorMessage";

    string SubmitCommandPropertyName        = "SubmitCommand";
    string CancelCommandPropertyName        = "CancelCommand";

    string BindingContextFeedbackRefPropertyName    = "BindingContextFeedbackRef";
    string OnDestroyPropertyName                    = "OnDestroy";
    string IsDestroyedPropertyName                  = "IsDestroyed";

    string UIDispatcherInvokePropertyName   =       "await MainThread.InvokeOnMainThreadAsync";

    List<string> FKViewsDict =  GetFKViewsList(Model, Context, new List<string>());
    if (! FKViewsDict.Contains(Model.ViewName) ) {
        FKViewsDict.Add(Model.ViewName);
    }

    List<string> SDViewsDict = GetSearchDialogViewsList(Model, Context, new List<string>());

    bool ModelHasAutoCompleteTextBox = false;
    bool ModelHasAutoSearchTextBox = false;
    bool ModelHasDoInitMethod = false;
    bool ModeAddEqualUpdate = true;
    bool ModeAddEqualDelete = true;
    bool ModeUpdateEqualDelete = true;
   

    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        ModelHasAutoCompleteTextBox = ModelHasAutoCompleteTextBox ?  ModelHasAutoCompleteTextBox :
                                                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ;
        ModelHasAutoSearchTextBox = ModelHasAutoSearchTextBox ?  ModelHasAutoSearchTextBox :
                                                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ;
        if(!ModelHasDoInitMethod) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                for(int inptTp = 1; inptTp < 4; inptTp++) {
                    if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, inptTp)) {
                        if ( GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp).Count < 1) {
                            ModelHasDoInitMethod = true;
                            break;
                        }
                    }
                }
            }
        }
        if (ModeAddEqualUpdate) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog)) {
                ModeAddEqualUpdate = (modelViewUIFormPropertySerializable.InputTypeWhenAdd == modelViewUIFormPropertySerializable.InputTypeWhenUpdate);
                if (ModeAddEqualUpdate) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd ))) {
                        ModeAddEqualUpdate =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                    }
                }
            }
        }
        if (ModeAddEqualDelete) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog)) {
                ModeAddEqualDelete = (modelViewUIFormPropertySerializable.InputTypeWhenAdd == modelViewUIFormPropertySerializable.InputTypeWhenDelete);
                if (ModeAddEqualDelete) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel ))) {
                        ModeAddEqualDelete =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                    }
                }
            }
        }
        if (ModeUpdateEqualDelete) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog)) {
                ModeUpdateEqualDelete = (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == modelViewUIFormPropertySerializable.InputTypeWhenDelete);
                if (ModeUpdateEqualDelete) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel ))) {
                        ModeUpdateEqualDelete =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                    }
                }
            }
        }
    }


    List<string> nmSpaces = new List<string>();
    if ((EformViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((EformViewModelNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
    if ((EformViewModelNameSpace != EformModeEnumNameSpace) && (nmSpaces.IndexOf(EformModeEnumNameSpace) < 0)) 
        nmSpaces.Add(EformModeEnumNameSpace);
    if ((EformViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((EformViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((EformViewModelNameSpace != NotifyInterfaceNameSpace) && (nmSpaces.IndexOf(NotifyInterfaceNameSpace) < 0)) 
        nmSpaces.Add(NotifyInterfaceNameSpace);
    if ((EformViewModelNameSpace != BindingContextFeedbackNameSpace) && (nmSpaces.IndexOf(BindingContextFeedbackNameSpace) < 0)) 
        nmSpaces.Add(BindingContextFeedbackNameSpace);
    if ((EformViewModelNameSpace != IBindingContextChangedNameSpace) && (nmSpaces.IndexOf(IBindingContextChangedNameSpace) < 0)) 
        nmSpaces.Add(IBindingContextChangedNameSpace);
    if ((EformViewModelNameSpace != IEformViewModelInterfaceNameSpace) && (nmSpaces.IndexOf(IEformViewModelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IEformViewModelInterfaceNameSpace);

        

    foreach(string viewNm in FKViewsDict) {
        ModelViewSerializable locmodel = GetModelByName(Context, viewNm);
        if (locmodel == null) continue;
        string nmspc = GetModelNameSpace(locmodel, modelInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        nmspc = GetModelNameSpace(locmodel, modelPageInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        nmspc = GetModelNameSpace(locmodel, modelFilterInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        // nmspc = GetModelNameSpace(locmodel, modelFilterNameSpace);
        // if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        nmspc = GetModelNameSpace(locmodel, modelServiceInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);

        
    }

    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>
/*

<#
    {
        List<string> searchViewNames= new List<string>();
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            for(int inptTp = 1; inptTp < 4; inptTp++) {
                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                    string viewName = GetViewNameForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                    if (!string.IsNullOrEmpty(viewName)) {
                        if(searchViewNames.IndexOf(viewName) < 0) searchViewNames.Add(viewName);
                    }
                }
            }
        }
        foreach(string searchViewName in searchViewNames) {
            ModelViewSerializable searchView = GetModelByName(Context, searchViewName);
            string localSdlgUserControlFolder       = "01436-SdlgUserControl.xaml.cs";
            string localSdlgUserControlClassName    = GetModelClassName(searchView, localSdlgUserControlFolder);
            string localSdlgUserControlNameSpace     = GetModelNameSpace(searchView, localSdlgUserControlFolder);
            string localSdlgUserControlProject      = GetModelProjectName(searchView, localSdlgUserControlFolder);
            string localSdlgViewModelFolder         = "01440-SdlgViewModel.cs";
            string localSdlgViewModelClassName      = GetModelClassName(searchView, localSdlgViewModelFolder);
            string localSdlgViewModelNameSpace      = GetModelNameSpace(searchView, localSdlgViewModelFolder);
            string localSdlgViewModelProject        = GetModelProjectName(searchView, localSdlgViewModelFolder);

#>

        Reminder:
        "<#= localSdlgUserControlClassName #>" UserControl is defined in the "<#= localSdlgUserControlProject #>"-project.
        In the file of IModule-class of "<#= localSdlgUserControlProject #>"-project the following line of code must be inserted:

            public void RegisterTypes(IContainerRegistry containerRegistry)
            {
                ...
                // According to requirements of the "<#= localSdlgViewModelClassName #>.cs"-file of "<#= localSdlgViewModelProject #>"-project. 
                containerRegistry.RegisterDialog<<#= localSdlgUserControlClassName #>, <#= SdlgViewModelBaseClassName #>>("<#= localSdlgViewModelClassName #>");
                ...
            }
<#
        }
    }
#>



    "<#= EformUserControlClassName #>" UserControl is defined in the "<#= EformUserControlProject #>"-project.
    In the file of IModule-class of "<#= EformUserControlProject #>"-project the following line of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            // According to requirements of the "<#= EformViewModelClassName #>.cs"-file of "<#= EformViewModelProject #>"-project. 
            ViewModelLocationProvider.Register<<#= EformUserControlClassName #>, <#= EformViewModelClassName #>>();
            // According to requirements of the "<#= EformViewModelClassName #>.cs"-file of "<#= EformViewModelProject #>"-project. 
            containerRegistry.Register<ContentView, <#= EformUserControlClassName #>>("<#= EformUserControlClassName #>");
            ...
        }

*/

namespace <#= EformViewModelNameSpace #> {
    public class <#= EformViewModelClassName #>: INotifyPropertyChanged, INotifyDataErrorInfo, <#= IEformViewModelInterfaceClassName #>, <#= IBindingContextChangedClassName #>
    {
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected IDialogService dialogService=null;
<#    
    string constructorParams = "";
    foreach(string viewNm in FKViewsDict) {
        if (constructorParams != "") constructorParams += ", ";
#>
        protected <#= GetModelServiceInterfaceNameEx(Context, viewNm) #> <#= FormServicePrefix #><#= viewNm #> = null;
<#
        constructorParams +=  GetModelServiceInterfaceNameEx(Context, viewNm) + "  _" + FormServicePrefix + viewNm ;
    } 
    if (constructorParams != "") constructorParams += ", ";
#>

        public <#= EformViewModelClassName #>(<#= constructorParams #> <#= IAppGlblSettingsServiceClassName #> _<#= AppSettingServicePropertyName  #>, IDialogService _dialogService) {
            this.<#= AppSettingServicePropertyName #> = _<#= AppSettingServicePropertyName #>;
            this.dialogService = _dialogService;
<#    
    
    foreach(string viewNm in FKViewsDict) {
        if (constructorParams != "") constructorParams += ", ";
#>
            this.<#= FormServicePrefix #><#= viewNm #> = _<#= FormServicePrefix #><#= viewNm #>;
<#
    } 
#>
        }
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion
        object _<#= BindingContextFeedbackRefPropertyName #> = null;
        public object <#= BindingContextFeedbackRefPropertyName #> {
            get { return _<#= BindingContextFeedbackRefPropertyName #>; }
            set { 
                if(_<#= BindingContextFeedbackRefPropertyName #> != value) {
                    _<#= BindingContextFeedbackRefPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }

<#  
    if (ModelHasDoInitMethod) {
#>
        public async Task <#= OnLoadedPropertyName #>(object sender, object newValue)
<#  
    } else {
#>
        public async Task <#= OnLoadedPropertyName #>(object sender, object newValue)
<#  
    }
#>
        {
            if (<#= IsDestroyedPropertyName #>) return;
            if (newValue is bool) {
                bool v = (bool)newValue;
                if ((!<#= IsOnLoadedCalledPropertyName #>) && v) {
                    try {
                            <#= IsLoadingPropertyName #> = true;
                            <#= IsOnLoadedCalledPropertyName #> = true;
                            await DoClearControls();
                            await RunEformModeChanged();
                            await InputToControls();
<#  
    if (ModelHasDoInitMethod) {
#>
                            await DoInit();
<#  
    }
#>
                            ClearValidationMessages();
                    } 
                    finally
                    {
                        <#= IsLoadingPropertyName #> = false;
                    }
                } else {
                    <#= IsOnLoadedCalledPropertyName #> = v;
                }
            }
        }
        protected bool <#= IsOnLoadedCalledPropertyName #> = false;
        protected bool _<#= IsLoadingPropertyName #> = true;
        public bool <#= IsLoadingPropertyName #>
        {
            get { return _<#= IsLoadingPropertyName #>; }
            set { if(_<#= IsLoadingPropertyName #> != value) { _<#= IsLoadingPropertyName #> = value; OnPropertyChanged(); } }
        }

        #region variable declaration
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
        protected <#= GetUnderlyingTypeNameAsNullableEx(modelViewUIFormPropertySerializable, Model)  #> _<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = null;
        public <#= GetUnderlyingTypeNameAsNullableEx(modelViewUIFormPropertySerializable, Model)  #> <#=  GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> {
            get { return _<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>; }
            set { if((_<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> != value)||(value == null)) { _<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = value; OnPropertyChanged(); ValidateField(value); } }
        }
<#
        if(modelViewUIFormPropertySerializable.IsShownInView) {
#>
        protected bool _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
        public bool <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> {
            get { return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #>; }
            set { 
                if(_<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> != value) 
                { 
                    _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = value; 
                    OnPropertyChanged(); 
<#
                    if(HasButton(modelViewUIFormPropertySerializable, Model)) {
#>
                    (<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command as Command).ChangeCanExecute();
<#
                    }
#>
                } 
            }
        }
        public string <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ValueErrorSufix) #> {
            get {
                return GetFirstError("<#=  GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>");
            }
        }
<#
        }
        if (HasCombo(modelViewUIFormPropertySerializable, Model) && modelViewUIFormPropertySerializable.IsShownInView) { 
#>
        protected object _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
        public object <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> {
            get { return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>; }
            set { if(_<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> != value) { 
                    _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = value; 
                    OnPropertyChanged(); 
// needs modification
                    if (!<#= IsLoadingPropertyName #>) {
                        ValidateObjectField(value);
<#   
                    if (HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
                        Task.Run( async () => { await <#=  GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(value, true); });
<#    
                    }
#>
                    }
                  } 
            }
        }
        public string <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboErrorSufix) #> {
            get {
                return GetFirstError("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
            }
        }
        protected IEnumerable _<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
        public IEnumerable <#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> {
            get { return _<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>; }
            set { if(_<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> != value) { _<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = value; OnPropertyChanged(); } }
        }
<#
        } // if (HasCombo(modelViewUIFormPropertySerializable, Model)) {
        if (HasButton(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
        protected object _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
        public object <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> {
            get { return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>; }
            set { if(_<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> != value) { 
                    _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = value; 
                    OnPropertyChanged(); 
// needs modification
                    if (!<#= IsLoadingPropertyName #>) {
                        ValidateObjectField(value);

<#    
                    if (HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
                        Task.Run( async () => { await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(value, true); });
<#
                    }
#> 
                    }
                  } 
            }
        }
        public string <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonErrorSufix) #> {
            get {
                return GetFirstError("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
            }
        }
<#
        } // if (HasButton(modelViewUIFormPropertySerializable, Model)) { 
        if (HasTypeahead(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
        public IList _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> = null;
        public IList <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> {
            get { return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #>; }
            set { 
                if(_<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> != value) { 
                    _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> = value;
                    OnPropertyChanged(); 
                }    
            }
        }
        public object _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
        public object <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> {
            get { return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>; }
            set { if(_<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> != value) { 
                    _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = value; 
                    OnPropertyChanged(); 
                    OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>"); 
// needs modification
                    if (!<#= IsLoadingPropertyName #>) {
                        ValidateObjectField(value);
<#    
                    if (HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
                        Task.Run( async () => { await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(value, true); });
<#
                    }
#> 
                    }
                  } 
            }
        }
        public string <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadErrorSufix) #> {
            get {
                return GetFirstError("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
            }
        }
        object _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>=null;
        public object <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #> {
            get 
            {
                if(<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> != null) {
                    switch(<#= EformModeVMPropertyName #>) {
                        case <#= EformModeEnumClassName #>.<#= GetInputTypeToEnumName(1) #>: // Add mode
<#
                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, 1) == InputTypeEnum.Typeahead) {
                            ModelViewSerializable locView = GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, 1);
                            if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#  
                            } else {
#>
                            <#= GetInterfaceName(locView) #> amObj = <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> as <#= GetInterfaceName(locView) #>;
                            if(amObj!= null) {
                                return amObj.<#= GetControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, 1) #>;
                            } else {
                                return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>;
                            }
<#
                            }
                } else {
#>
                            return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>;
<#
                }
#>
                        case <#= EformModeEnumClassName #>.<#= GetInputTypeToEnumName(2) #>: // Upd mode
<#
                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, 2) == InputTypeEnum.Typeahead) {
                            ModelViewSerializable locView = GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, 2);
                            if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#  
                            } else {
#>
                            <#= GetInterfaceName(locView) #> umObj = <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> as <#= GetInterfaceName(locView) #>;
                            if(umObj!= null) {
                                return umObj.<#= GetControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, 2) #>;
                            } else {
                                return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>;
                            }
<#
                            }
                } else {
#>
                            return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>;
<#
                }
#>
                        default: // Del mode
<#
                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, 3) == InputTypeEnum.Typeahead) {
                            ModelViewSerializable locView = GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, 3);
                            if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#  
                            } else {
#>
                            <#= GetInterfaceName(locView) #> dmObj = <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> as <#= GetInterfaceName(locView) #>;
                            if(dmObj!= null) {
                                return dmObj.<#= GetControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, 3) #>;
                            } else {
                                return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>;
                            }
<#
                            }
                } else {
#>
                            return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>;
<#
                }
#>
                    }
                }
                return _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>;
            }
            set 
            {
                if(_<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #> != value) {
                    _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #> = value;
                    OnPropertyChanged(); 
                }
            }
        }
<#
        } // if (HasTypeahead(modelViewUIFormPropertySerializable, Model)) {  
    } // end of foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
    //////////////////////////// end helper variable and FormControl -generator 
#>
        #endregion

        #region <#= EformModeVMPropertyName #>    

<#  
    if (ModelHasDoInitMethod) {
#>
        public async Task <#= EformModeChangedPropertyName #>(object sender, object OldValue, object NewValue) {
<#  
    } else {
#>
        public async Task <#= EformModeChangedPropertyName #>(object sender, object OldValue, object NewValue) {
<#  
    }
#>
            if (<#= IsDestroyedPropertyName #>) return;
            if(NewValue != null) {
                <#= EformModeEnumClassName #> nwval = (<#= EformModeEnumClassName #>)NewValue; 
                if(nwval != <#= EformModeVMPropertyName #>) {
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        _<#= EformModeVMPropertyName #> = nwval;
                        OnPropertyChanged("<#= EformModeVMPropertyName #>");
                    });
                    if(<#= IsOnLoadedCalledPropertyName #>) {
                        try {
                            <#= IsLoadingPropertyName #> = true;
                            await DoClearControls();
                            await RunEformModeChanged();
                            await InputToControls();
<#  
    if (ModelHasDoInitMethod) {
#>
                            await DoInit();
<#  
    }
#>
                            ClearValidationMessages();
                        } finally
                        {
                            <#= IsLoadingPropertyName #> = false;
                        }
                    }
                }
            }
        }
        protected <#= EformModeEnumClassName #> _<#= EformModeVMPropertyName #> = <#= EformModeEnumClassName #>.DeleteMode;
        public <#= EformModeEnumClassName #> <#= EformModeVMPropertyName #>
        {
            get
            {
                return _<#= EformModeVMPropertyName #>;
            }
            set
            {
                if (_<#= EformModeVMPropertyName #> != value) {
                    _<#= EformModeVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= FormControlModelVMPropertyName #>
<#  
    if (ModelHasDoInitMethod) {
#>
        public async Task <#= FormControlModelChangedPropertyName #>(object sender, object OldValue, object NewValue) {
<#  
    } else {
#>
        public async Task <#= FormControlModelChangedPropertyName #>(object sender, object OldValue, object NewValue) {
<#  
    }
#>
            if (<#= IsDestroyedPropertyName #>) return;
            <#= UIDispatcherInvokePropertyName #>(() => {
                _<#= FormControlModelVMPropertyName #> =  NewValue as <#= modelInterfaceClassName #>;
                OnPropertyChanged("<#= FormControlModelVMPropertyName #>");
            });
            if(<#= IsOnLoadedCalledPropertyName #>) {
                try {
                    <#= IsLoadingPropertyName #> = true;
                    await DoClearControls();
                    await InputToControls();
<#  
    if (ModelHasDoInitMethod) {
#>
                    await DoInit();
<#  
    }
#>
                    ClearValidationMessages();
                } finally
                {
                    <#= IsLoadingPropertyName #> = false;
                }
            }
        }
        protected <#= modelInterfaceClassName #> _<#= FormControlModelVMPropertyName #> = null;
        public <#= modelInterfaceClassName #> <#= FormControlModelVMPropertyName #>
        {
            get
            {
                return _<#= FormControlModelVMPropertyName #>;
            }
            set
            {
                if (_<#= FormControlModelVMPropertyName #> != value) {
                    _<#= FormControlModelVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= HiddenFiltersVMPropertyName #>
<#  
    if (ModelHasDoInitMethod) {
#>
        public async Task <#= HiddenFiltersPropertyChangedPropertyName #>(object sender, object OldValue, object NewValue) {
<#  
    } else {
#>
        public async Task <#= HiddenFiltersPropertyChangedPropertyName #>(object sender, object OldValue, object NewValue) {
<#  
    }
#>
            if(<#= IsDestroyedPropertyName #>) return;
            IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> nwval = NewValue as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>;
            ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> curVal = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
            if(nwval != null) {
                if(nwval != <#= HiddenFiltersVMPropertyName #>) {
                    foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf  in nwval) { // foreach works even if nwval == null
                        curVal.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {fltrName=hf.fltrName, fltrDataType=hf.fltrDataType,  fltrOperator=hf.fltrOperator, fltrValue=hf.fltrValue, fltrError=hf.fltrError });
                    }
                }
            }
            <#= UIDispatcherInvokePropertyName #>(() => {
                _<#= HiddenFiltersVMPropertyName #> = curVal;
                OnPropertyChanged("<#= HiddenFiltersVMPropertyName #>");
            });
            if(<#= IsOnLoadedCalledPropertyName #>) {
                try {
                    <#= IsLoadingPropertyName #> = true;
                    await DoClearControls();
                    await InputToControls();
<#  
    if (ModelHasDoInitMethod) {
#>
                    await DoInit();
<#  
    }
#>
                    ClearValidationMessages();
                } 
                finally
                {
                    <#= IsLoadingPropertyName #> = false;
                }
            }
        }
        protected IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersVMPropertyName #> = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
        public IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= HiddenFiltersVMPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersVMPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersVMPropertyName #> != value) {
                    _<#= HiddenFiltersVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

<#    //////////////////////////// start RunEformModeChanged()-generator
#>
        #region RunEformModeChanged
        public async Task RunEformModeChanged() {
            <#= UIDispatcherInvokePropertyName #>(() => {
<#
    for(int inptTp = 1; inptTp < 4; inptTp++) {
        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
        if (inptTp ==1) {
#>
                if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
                    if(ModeAddEqualUpdate) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
                    if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
                if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
                    if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
                if (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Default) {
                    if (string.IsNullOrEmpty(modelViewUIFormPropertySerializable.ForeignKeyNameChain)) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
<#    
                    } else {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
<#    
                    }
                } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Default) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.ReadOnly) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
<#    
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.ReadOnly) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
                    _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                    OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
<#   
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
                    _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                    OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>"); 
<#   
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
                    _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
<#    
                } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                else { // GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == Hidden
#>
                    <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
<#    
                } // GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == Hidden
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } //foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
                } 
<#
    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
            });
        } // end of EformMode
        #endregion
<# //////////////////////////// end RunEformModeChanged()-generator
#>

<# //////////////////////////// start DoClearControls()-generator 
#>
        public async Task DoClearControls() {
            <#= UIDispatcherInvokePropertyName #>(() => {
<#
    {
        for(int inptTp = 1; inptTp < 4; inptTp++) {
            if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
            if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
            if (inptTp ==1) {
#>
                if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
                      if(ModeAddEqualUpdate) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
                      if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
            } else if (inptTp == 2) {
#>
                else if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
                      if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
            } else {
#>
                else if (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
            }
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
                        _<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = null;
                        OnPropertyChanged("<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>");
<#
                if (modelViewUIFormPropertySerializable.IsShownInView) { 
                    if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
                        _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                        OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                        OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
<#    
                    } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                    else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
                        OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                        OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>"); 
<#    
                    } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                    else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = false;
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
                        OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
<#    
                    } // else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
            } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
                } 
<#    
        } // for(int inptTp = 1; inptTp < 4; inptTp++) {
    }
#>
            });
        }
<# //////////////////////////// end DoClearControls()-generator
#>

<#  
if (ModelHasDoInitMethod) {
#>
        public async Task DoInit() {
            if (<#= IsDestroyedPropertyName #>) return;
<#  //////////////////////////// start OnInit()-generator
    {
        bool genElse = false;
        for(int inptTp = 1; inptTp < 4; inptTp++) {
            if (HasModelInitMethodForInputMode(Model, inptTp)) {
            if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
            if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
            if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#= EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#= EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#= EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
            } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#= EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#= EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
            } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#= EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
            }
                foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                    if (modelViewUIFormPropertySerializable.IsShownInView) { 
                        if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, inptTp)) {
                            if ( GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp).Count < 1) {
#>
                await <#= GetExpressionForOnInitMethod(modelViewUIFormPropertySerializable, Model) #>();
<#    
                            }
                        } // if(HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
                    } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
                } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            }
<#    
            }
        } // for(int inptTp = 1; inptTp < 4; inptTp++) {
    }
#>
        } // DoInit() 

<#  
} // end of if (!ModelHasDoInitMethod) {...}
#>

<#  //////////////////////////// start InputToControls()-generator
#>
        public async Task InputToControls() {
            if (<#= IsDestroyedPropertyName #>) return;
            <#= UIDispatcherInvokePropertyName #>(() => {
                bool isNotDefByHdnfltr = true;
                if(<#= FormControlModelVMPropertyName #> != null) {
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
                    isNotDefByHdnfltr = true;
                    if(<#= HiddenFiltersVMPropertyName #> != null) {
                        <#= IWebServiceFilterRsltInterfaceClassName #> hf = <#= HiddenFiltersVMPropertyName #>.Where(h=>h.fltrName == "<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>").FirstOrDefault();
                        if (hf != null) {
                            if (string.IsNullOrEmpty(hf.fltrError)) {
                                <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = hf.fltrValue as <#= GetUnderlyingTypeNameAsNullableEx(modelViewUIFormPropertySerializable, Model)  #>;
                                isNotDefByHdnfltr = false;
                            }
                        }
                    }
                    if(isNotDefByHdnfltr) { <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = <#= FormControlModelVMPropertyName #>.<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>; }
<#
    }
#>
                } else {
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
                    isNotDefByHdnfltr = true;
                    if(<#= HiddenFiltersVMPropertyName #> != null) {
                        <#= IWebServiceFilterRsltInterfaceClassName #> hf = <#= HiddenFiltersVMPropertyName #>.Where(h=>h.fltrName == "<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>").FirstOrDefault();
                        if (hf != null) {
                            if (string.IsNullOrEmpty(hf.fltrError)) {
                                <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = hf.fltrValue as <#= GetUnderlyingTypeNameAsNullableEx(modelViewUIFormPropertySerializable, Model)  #>;
                                isNotDefByHdnfltr = false;
                            }
                        }
                    }
                    if(isNotDefByHdnfltr) { <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = null; }
<#
    }
#>
                }
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if(IsIdentityPropertyEx(modelViewUIFormPropertySerializable, Model)) {
#>
                if(<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> == null)  <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = <# if(IsStringPropertyEx(modelViewUIFormPropertySerializable, Model)) {#> "0" <# } else { #> 0 <# } #>;
<#
        }
    }
#>
            });
        }
<#  //////////////////////////// end InputToControls()-generator
#>

<#  //////////////////////////// start OnInit...()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
#>
    public async Task <#= GetExpressionForOnInitMethod(modelViewUIFormPropertySerializable, Model) #>() {
        if (<#= IsDestroyedPropertyName #>) return;
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

                        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
                        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;
//
// GetViewNameForControlList()
// ForeignKeys-chain defines the View for which we generate current method
// not direct MasterView (!!!) but the View that has current ForeignKeys-chain
// 
// So.
// 1.
// GetViewNameForControlList() returns the ViewName which can be or can not be equal to Model.ViewName;
// 2.
// GetPrimaryKeyProps() returns PrimaryKey Properties of the ViewName, not Model.ViewName
//
// 3.
// GetDirectMasters() returns direct masters for the current ViewName, not Model.ViewName
// we need them to call OnInit...() after defining current ViewName
// GetDirectMasters() returns only those masters which have combo/typeahead/searchBox control in the Model
//
// 4.
// GetDirectDetails() returns direct details for the ViewName not Model.ViewName
// GetDirectDetails() returns only those Details which have combo/typeahead/searchBox control in the Model
// 

                        string viewName =  GetViewNameForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string servisPropNm  = FormServicePrefix + viewName;
                        List<ModelViewPropertyOfVwSerializable> primKeyProps = GetPrimaryKeyProps(Context, viewName);
                        if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, inptTp)) {
                            List<ModelViewUIFormPropertySerializable> directMasters = 
                             GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
                            if (primKeyProps.Count > 0) {
                                foreach(ModelViewPropertyOfVwSerializable pkpModelViewPropertyOfVwSerializable in primKeyProps) {
#>
            <#= GetUnderlyingTypeNameAsNullable(pkpModelViewPropertyOfVwSerializable) #> <#= GetPrimKeyVarName(pkpModelViewPropertyOfVwSerializable) #> = null;
<#  
                                }
                            } else {
#>
// error: could not find primary key for the given view: <#= viewName #> which was detected by the property: <#= modelViewUIFormPropertySerializable.ViewPropertyName #>
<#  
                            }
                            if ( MustHaveDirectDetails(modelViewUIFormPropertySerializable, Model, Context) ) {
                                List<ModelViewUIFormPropertySerializable> details = 
                                    GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                                foreach(ModelViewUIFormPropertySerializable dtlModelViewUIFormPropertySerializable in details) {
                                    ModelViewSerializable detailView = GetViewForControlList(dtlModelViewUIFormPropertySerializable, Model, Context, inptTp);
                                    List<ModelViewPropertyOfVwSerializable> foreignKeyProps = GetForeignKeyProps(Context, Model, modelViewUIFormPropertySerializable, dtlModelViewUIFormPropertySerializable, inptTp);
                                    if(foreignKeyProps.Count != primKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #>
//    method[GetForeignKeyProps]                     foreignKey Props Count = [<#= foreignKeyProps.Count #>] and prim Key Props Count = [<#= primKeyProps.Count #>] 
<#  
                                }
                                    for(int loci = 0; loci < primKeyProps.Count; loci++) {
                                        if(foreignKeyProps.Count > loci) {
                                            ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable = primKeyProps[loci];
                                            ModelViewPropertyOfVwSerializable frgnKpModelViewPropertyOfVwSerializable = foreignKeyProps[loci];
                                            if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                if((<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceName(detailView) #>) != null) { 
                        <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = (<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>  as <#= GetInterfaceName(detailView) #>).<#= GetModelPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView) #>;
                }
<#
                                            } else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                if((<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> as <#= GetInterfaceName(detailView) #>) != null) {
                        <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = (<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> as <#= GetInterfaceName(detailView) #>).<#= GetModelPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView) #>;
                }
<#
                                            }  else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                if((this.<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #> as <#= GetInterfaceName(detailView) #>) != null) {
                        <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = (<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #> as <#= GetInterfaceName(detailView) #>).<#= GetModelPropertyName(frgnKpModelViewPropertyOfVwSerializable, detailView) #>;
                }
<#                                    
                                            }                                                   
                                        }
                                    } // for(int loci = 0; loci < primKeyProps.Count; loci++)
                                } // foreach(ModelViewUIFormPropertySerializable dtlModelViewUIFormPropertySerializable in details)
#>
                bool isPkNtDf =  <# {int i = 0;
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #> || <# } 
                                    #> (<#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> == null) <#
                                    i++;
                                }} #>  ;
                if (isPkNtDf) { 
<#
                            if(directMasters.Count < 1) {
#>
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                    await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                    await <#=  GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                } else {
                    <#= GetInterfaceNameEx(Context, viewName) #> data = 
                        await <#= servisPropNm #>.<#= GetOneMethodName #>(<# {int i = 0;
                                foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #>, <# } 
                                        #><#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #><#= NullableValueSuffix(primKpModelViewPropertyOfVwSerializable)#><#
                                        i++;
                                    }} #> );
                    if (data != null) {
                        <#= GetInterfaceNameEx(Context, viewName) #> dataN = <#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(data);
<#
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                                ValidateObjectField(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                        });
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                                OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>"); 
                                ValidateObjectField(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                        });
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>  = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                                ValidateObjectField(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                        });
<#
                            }
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>, false);
                        await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>, false);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>, false);
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                        await this.<#= GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                    } else {
<#
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                        await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                        await <#= GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                            <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", "Could not get item by primary key for <#= viewName #>");
                        });
                    }
                }
<#
                            } else { // if ( MustHaveDirectDetails(modelViewUIFormPropertySerializable, Model, Context) )
                                List<ModelViewPropertyOfVwSerializable> foreignKeyProps = GetForeignKeyPropsBase(Context, Model, modelViewUIFormPropertySerializable);
                                if(foreignKeyProps.Count != primKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #>
//   method [GetForeignKeyPropsBase]                      foreignKey Props Count = [<#= foreignKeyProps.Count #>] and prim Key Props Count = [<#= primKeyProps.Count #>] 
<#  
                                }
                                for(int loci = 0; loci < primKeyProps.Count; loci++) {
                                    if(foreignKeyProps.Count > loci) {
                                        ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable = primKeyProps[loci];
                                        ModelViewPropertyOfVwSerializable frgnKpModelViewPropertyOfVwSerializable = foreignKeyProps[loci];
#>
                <#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> = <#= GetModelPropertyName(frgnKpModelViewPropertyOfVwSerializable, Model) #>;
<#
                                    }
                                } // for(int loci = 0; loci < primKeyProps.Count; loci++)
#>
                bool isPkNtDf =  <# {int i = 0;
                            foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #> || <# } 
                                    #> (<#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #> == null) <#
                                    i++;
                                }} #>  ;
                if (isPkNtDf) { 
<#
                            if(directMasters.Count < 1) {
#>
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                    await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                    await <#=  GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                } else {
                    <#= GetInterfaceNameEx(Context, viewName) #> data = 
                        await <#= servisPropNm #>.<#= GetOneMethodName #>(<# {int i = 0;
                                foreach(ModelViewPropertyOfVwSerializable primKpModelViewPropertyOfVwSerializable in primKeyProps) { if (i > 0)  { #>, <# } 
                                        #><#= GetPrimKeyVarName(primKpModelViewPropertyOfVwSerializable) #><#= NullableValueSuffix(primKpModelViewPropertyOfVwSerializable)#><#
                                        i++;
                                    }} #> );
                    if(data != null) {
                        <#= GetInterfaceNameEx(Context, viewName) #>  dataN = <#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(data);
<#
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                                ValidateObjectField(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                        });
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                                OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>"); 
                                ValidateObjectField(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                        });
<#
                            }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        <#= UIDispatcherInvokePropertyName #>(() => {
                                _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = dataN;
                                OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                                ValidateObjectField(dataN, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                        });
<#
                            }
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>, false);
                        await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>, false);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>, false);
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                        await <#= GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                    } else {
<#
                            if(directMasters.Count < 1) {
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                        await <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }  else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
<#
                                }
                            } else {
                                foreach(ModelViewUIFormPropertySerializable directMaster in directMasters) {
#>
                        await <#= GetExpressionForOnInitMethod(directMaster, Model) #>();
<#
                                }
                            }
#>
                        <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", "Could not get item by primary key for <#= viewName #>");
                    }
            }
<#  
                        } // if ( MustHaveDirectDetails(modelViewUIFormPropertySerializable, Model, Context) ) {...} else {
#>
        }
<#  
                        } // if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, 1)) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#    
                } // if(HasInitMethod(modelViewUIFormPropertySerializable, Model))
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end OnInit...()-generator
#>

<#  //////////////////////////// start OnUpdate...ComboList()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasCombo(modelViewUIFormPropertySerializable, Model)) {
#>
    public async Task <#= GetExpressionForOnUpdateComboControlListMethod(modelViewUIFormPropertySerializable, Model, ComboSufix) #>() {
        if (<#= IsDestroyedPropertyName #>) return;
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

                        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
                        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                        if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                            ModelViewSerializable locView = 
                                GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
            
                            string viewName = ""; 
                            if (locView != null) {
                                viewName = locView.ViewName;
                            }
                            string servisPropNm  = FormServicePrefix + viewName;
                            List<ModelViewUIFormPropertySerializable> directMasters = 
                                GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);


        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
                            if (directMasters.Count < 1) {
#>

            <#= GetFilterInterfaceNameEx(Context, viewName) #> flt = <#= FormServicePrefix #><#= viewName #>.GetFilter();
            <#= GetOrderBy(modelViewUIFormPropertySerializable, Model, Context, inptTp,"flt") #>
            <#= GetPageInterfaceNameEx(Context, viewName) #> data = await this.<#= servisPropNm #>.<#= GetWithFilterMethodName #>(flt);
            if (data != null) {
                ObservableCollection<<#= GetInterfaceNameEx(Context, viewName) #>> newLst = null;
                if (data.items != null) {
                    foreach(<#= GetInterfaceNameEx(Context, viewName) #> itm in data.items) {
                        if (newLst == null) newLst = new ObservableCollection<<#= GetInterfaceNameEx(Context, viewName) #>>();
                        newLst.Add(<#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(itm));
                    }
                }
                int indx = -1;
                <#= GetInterfaceNameEx(Context, viewName) #> lfc = null;
                if ((newLst != null) && ((<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>) != null)) {
                    lfc = <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>;
                    <#= GetInterfaceNameEx(Context, viewName) #> slctItm = newLst.Where(e => <#= GetPrimKeyFilterForFindIndexMethod(Context, viewName, "e", "lfc")  #>).FirstOrDefault();
                    // it worked for WPF: insert old item in new list. As a result <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> stayed unchanged
                    if(slctItm != null) {
                        indx = newLst.IndexOf(slctItm);
                        if(indx > -1) {
                            newLst.RemoveAt(indx);
                            newLst.Insert(indx, lfc);
                        }
                    }
                }
                <#= UIDispatcherInvokePropertyName #>(() => {
                    // next line of code this is not required for WPF:
                    // reseting the <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> discards the <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>
                    // to avoid notification the value of the <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> should be set to null 
                    _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;

                    _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = newLst;
                    OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    // set the <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> back to it's value
                    // next "if" is not required for WPF
                    if(indx >= 0) {
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = lfc;
                        OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    }
                });
                if ((newLst == null) || (indx < 0)) {
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                } 
            } else {
                <#= UIDispatcherInvokePropertyName #>(() => {
                    this.<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                });
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                <#= UIDispatcherInvokePropertyName #>(() => {
                    <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", "Could not populate ComboBox for <#= viewName #>");
                });
            }
<#
                            } else {
                                List<ModelViewPropertyOfVwSerializable> allForeignKeyProps = GetAllForeignKeyProps(locView);
#>
            bool hasNoVal = (<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>) == null;
            <#= GetFilterInterfaceNameEx(Context, viewName) #> flt = <#= FormServicePrefix #><#= viewName #>.GetFilter();
            if (! hasNoVal) {
                <#= GetInterfaceNameEx(Context, viewName) #> lfc = <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>;
<#
                            foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                string masterViewName = "";
                                if(masterView != null) {
                                    masterViewName = masterView.ViewName;
                                }
                                List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain #>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                }
                                {
                                    bool setOr = false;
                                    for(int i = 0; i < detailForeignKeyProps.Count; i++) {
                                        if(!IsPropertyNullable(detailForeignKeyProps[i])) continue;
                                        if(setOr) {
#>                                            || (lfc.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #> == null) 
<#
                                        } else {
#>                hasNoVal = hasNoVal ? hasNoVal : ((lfc.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #> == null)
<#
                                            setOr = true;
                                        }
                                    }
                                    if(setOr) { 
#>                                            );<# 
                                    }
                                }


                            }
#>                              
                if(!hasNoVal) {
<#
                            foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                string masterViewName = "";
                                if(masterView != null) {
                                    masterViewName = masterView.ViewName;
                                }
                                List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                }
                                for(int i = 0; i < detailForeignKeyProps.Count; i++) {
#>
                    if(flt.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[i]) #>>();
                    flt.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #>.Add(lfc.<#= GetModelPropertyName(detailForeignKeyProps[i], locView) #>);
                    if(flt.<#= GetFilterPropertyOperatorName(detailForeignKeyProps[i], locView, FilterOperatorSuffix) #> == null) flt.<#= GetFilterPropertyOperatorName(detailForeignKeyProps[i], locView, FilterOperatorSuffix) #> = new List<string>();
                    flt.<#= GetFilterPropertyOperatorName(detailForeignKeyProps[i], locView, FilterOperatorSuffix) #>.Add("eq");
<#
                                }
                            }
#>
                }
            }
            if (hasNoVal) {
                hasNoVal = false;
<#
                              foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }
#>          
                if (! hasNoVal) {
<#
                                    foreach(ModelViewPropertyOfVwSerializable masterProp in masterPrimKeyProps) {
                                        if(!IsPropertyNullable(masterProp)) continue;
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                    hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                    hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                    hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }
                                    }
#>
                }
<#
                              }
#>
                if (!hasNoVal) {
<#
                            foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                string masterViewName = "";
                                if(masterView != null) {
                                    masterViewName = masterView.ViewName;
                                }
                                List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                }
                                for(int loci = 0; loci < detailForeignKeyProps.Count; loci++) {
                                    if(loci < masterPrimKeyProps.Count) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                    if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
                    flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                    if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
                    flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                    if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
                    flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                        }
                                    }
                                }
                            }
#>
                }
            }
            if (!hasNoVal) {
                <#= GetOrderBy(modelViewUIFormPropertySerializable, Model, Context, inptTp,"flt") #>
                <#= GetPageInterfaceNameEx(Context, viewName) #> data = await <#= servisPropNm #>.<#= GetWithFilterMethodName #>(flt);
                if (data != null) {
                    ObservableCollection<<#= GetInterfaceNameEx(Context, viewName) #>> newLst = null;
                    if (data.items != null) {
                        foreach(<#= GetInterfaceNameEx(Context, viewName) #> itm in data.items) {
                            if (newLst == null) newLst = new ObservableCollection<<#= GetInterfaceNameEx(Context, viewName) #>>();
                            newLst.Add(<#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(itm));
                        }
                    }
                    int indx = -1;
                    <#= GetInterfaceNameEx(Context, viewName) #> lfc = null;
                    if ((newLst != null) && ((<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>) != null)) {
                        lfc = <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> as <#= GetInterfaceNameEx(Context, viewName) #>;
                        <#= GetInterfaceNameEx(Context, viewName) #> slctItm = newLst.Where(e => <#= GetPrimKeyFilterForFindIndexMethod(Context, viewName, "e", "lfc")  #>).FirstOrDefault();
                        // it worked for WPF: insert old item in new list. As a result <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> stayed unchanged
                        if(slctItm != null) {
                            indx = newLst.IndexOf(slctItm);
                            if(indx > -1) {
                                newLst.RemoveAt(indx);
                                newLst.Insert(indx, lfc);
                            }
                        }
                    }
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        // next line of code this is not required for WPF:
                        // reseting the <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> discards the <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>
                        // to avoid notification the value of the <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> should be set to null 
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;

                        _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = newLst;
                        OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");

                        // set the <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> back to it's value
                        // next "if" is not required for WPF
                        if(indx >= 0) {
                            _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = lfc;
                            OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                        }
                    });
                    if ((newLst == null) || (indx < 0)) {
                        await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                    } 
                } else {
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        _<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                        OnPropertyChanged("<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    });
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(null, true);
                }
            }
<#
                        } 
#>
        }
<#  
                        } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#  
                } // if(HasCombo(modelViewUIFormPropertySerializable, Model)) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end  OnUpdate...ComboList()-generator
#>

<#  //////////////////////////// start OnFilter...Typeahead()-generator
#>
        // Reason: UserInput = 0, ProgrammaticChange = 1, SuggestionChosen = 2
        public void <#= OnAutoSuggestBoxTextChangedPropertyName #>(object Sender, object AutoSggstBx, string PropName, int Reason, string QueryText)
        {
            if (<#= IsDestroyedPropertyName #>) return;
<#  
            {
            bool switchNotInserter = true;
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                if (modelViewUIFormPropertySerializable.IsShownInView) { 
                    if(HasTypeahead(modelViewUIFormPropertySerializable, Model)) {
                        if(switchNotInserter) {
                            switchNotInserter = false;
#>
            switch(PropName) {
<#
                        }
#>
                case "<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>":
                    // Clear ItemsSource
                    if(Reason == 0) {
                        <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
                        if(<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadCalledSufix) #>) return;
                        <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadCalledSufix) #> = true;
                        <#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(QueryText);
                    }
                    break;
<#
                        }
                    }
                }
                if(!switchNotInserter) {
#>
                default:
                    break;
            }
<#            
                }
            }
#>
        }
        // IF (ChosenSuggestion != null) THEN User selected an item from the suggestion list, take an action on it here.
        public void <#= OnAutoSuggestBoxQuerySubmittedPropertyName #>(object Sender, object AutoSggstBx, string PropName, object ChosenSuggestion, string QueryText)
        {
            if (<#= IsDestroyedPropertyName #>) return;
<#  
            {
            bool switchNotInserter = true;
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                if (modelViewUIFormPropertySerializable.IsShownInView) { 
                    if(HasTypeahead(modelViewUIFormPropertySerializable, Model)) {
                        if(switchNotInserter) {
                            switchNotInserter = false;
#>
            switch(PropName) {
<#
                        }
#>
                case "<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>":
                    <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> = null;
                    <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = ChosenSuggestion;
                    break;
<#
                        }
                    }
                }
                if(!switchNotInserter) {
#>
                default:
                    break;
            }
<#            
                }
            }
#>
        }
<#  
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if(HasTypeahead(modelViewUIFormPropertySerializable, Model)) {
#>
    protected bool <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadCalledSufix) #> = false;
    public async void <#= GetExpressionForOnFilterTypeaheadControlListMethod(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(string inFilter) {
        if (<#= IsDestroyedPropertyName #>) return;
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                        if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                            ModelViewSerializable locView = 
                                GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                            if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#  
                            }
                            string viewName = ""; 
                            if (locView != null) {
                                viewName = locView.ViewName;
                            }
                            string servisPropNm  = FormServicePrefix + viewName;
                            List<ModelViewUIFormPropertySerializable> directMasters = 
                                GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
        if (directMasters.Count > 0) {
#>
            bool hasNoVal = false;
<#
        }
#>
            <#= GetFilterInterfaceName(locView) #> flt = <#= FormServicePrefix #><#= locView.ViewName #>.GetFilter();
<#
                            if (directMasters.Count > 0) {
                                List<ModelViewPropertyOfVwSerializable> allForeignKeyProps = GetAllForeignKeyProps(locView);
                              foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }
#>                    
            if (! hasNoVal) {
<#
                                    foreach(ModelViewPropertyOfVwSerializable masterProp in masterPrimKeyProps) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                        }
                                    }
#>
            }
<#
                              } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
#>
            if (hasNoVal) {
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> = null;
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadCalledSufix) #> = false;
                return;
            }
<#
                                foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                    if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                    }
                                    for(int loci = 0; loci < detailForeignKeyProps.Count; loci++) {
                                        if(loci < masterPrimKeyProps.Count) {
                                            if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
            flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
            flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            if (flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> == null) flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #> = new List<<#= GetPropertyTypeName(detailForeignKeyProps[loci]) #>>();
            flt.<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>.Add((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>);
<#
                                            }
                                        }
                                    }
                                } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                            } //  if (directMasters.Count > 0) {
#>
            if(!string.IsNullOrEmpty(inFilter)) {
<#                          
                            {
                                // modelViewUIFormPropertySerializable, Model, locView
                            ModelViewPropertyOfVwSerializable masterProp = GetTypeAheadMasterPropEx(Model, modelViewUIFormPropertySerializable, locView);
                            if(masterProp == null) {
#>
//
//error: could not find master property for the given detail property: <#= modelViewUIFormPropertySerializable.ViewPropertyName #> <# if(locView != null) { #> and the view: <#= locView.ViewName #>  <# } #> 

//       with a method GetTypeAheadMasterPropEx
//
<#
                            }
                            if (directMasters.Count < 1) {
                                if (!IsPropertyString(masterProp)) {
#>
/*  it is not a string property
<#
                                }
#>
                        if(flt.<#= GetModelPropertyName(masterProp, locView) #> == null) flt.<#= GetModelPropertyName(masterProp, locView) #> = new List<<#= GetPropertyTypeName(masterProp) #>>();
                        flt.<#= GetModelPropertyName(masterProp, locView) #>.Add(inFilter);
<#                          
                                if (!IsPropertyString(masterProp)) {
#>
*/
<#
                                }
                            } else {
                                if (!IsPropertyString(masterProp)) {
#>
/*  it is not a string property
<#
                                }
#>
                        if(flt.<#= GetModelPropertyName(masterProp, locView) #> == null) flt.<#= GetModelPropertyName(masterProp, locView) #> = new List<<#= GetPropertyTypeName(masterProp) #>>();
                        flt.<#= GetModelPropertyName(masterProp, locView) #>.Add(inFilter);
<#                          
                                if (!IsPropertyString(masterProp)) {
#>
*/
<#
                                }
                            }
                            }
#>
            }
            <#= GetOrderBy(modelViewUIFormPropertySerializable, Model, Context, inptTp,"flt") #>
            <#= GetPageInterfaceName(locView) #> t = await <#= servisPropNm #>.<#= GetWithFilterMethodName #>(flt);
            if(t == null) {
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> = null;
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadCalledSufix) #> = false;
                return;
            }
            if(t.items == null) {
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> = null;
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadCalledSufix) #> = false;
                return;
            }
            ObservableCollection<<#= GetInterfaceName(locView) #>>  rslt = new ObservableCollection<<#= GetInterfaceName(locView) #>>();
            foreach(<#= GetInterfaceName(locView) #> itm in t.items) {
                rslt.Add(<#= servisPropNm #>.<#= CopyToModelNotifyMethodName #>(itm));
            }
            <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> = rslt;
            <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadCalledSufix) #> = false;
        }
<#  
                        } // if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#  
                } // if(HasTypeahead(modelViewUIFormPropertySerializable, Model)) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end OnFilter...Typeahead()-generator
#>

<#  //////////////////////////// start OnValChange...()-generator
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                if (HasInitMethod(modelViewUIFormPropertySerializable, Model) && 
                    HasOnValChangedMethod(Context, Model, modelViewUIFormPropertySerializable)) {
#>
    public async Task <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(object inputVal, bool dscrdChld) {
        if (<#= IsDestroyedPropertyName #>) return;
<#  
                    bool genElse = false;
                    for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                        List<ModelViewUIFormPropertySerializable> directMasters = 
                                GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        ModelViewSerializable locView = 
                            GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string viewName = ""; 
                        if(locView == null) {
#>
//
// error: Could not find model for for the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> with a method GetViewForControlList
// 
<#  
                        }
                        if (locView != null) {
                            viewName = locView.ViewName;
                        }
                        List<ModelViewPropertyOfVwSerializable> locViewPrimKeys = GetPrimaryKeyProps(Context, viewName);
                        string servisPropNm  = FormServicePrefix + viewName;
                        
                        List<ModelViewUIFormPropertySerializable> details = 
                                    GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        List<ModelViewUIFormPropertySerializable> dependentScalarProps = 
                                    GetDependentScalarProps(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        if ((dependentScalarProps.Count > 0) || (details.Count > 0)) {

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }



                        if(dependentScalarProps.Count > 0) {
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {

#>
            <#= GetInterfaceName(locView) #> inVal = inputVal as <#= GetInterfaceName(locView) #>;
            bool hasNoVal = inVal == null;
            if (hasNoVal) { dscrdChld = true; }
<#
                            } else {
#>
            <#= GetInterfaceName(locView) #> inVal = inputVal as <#= GetInterfaceName(locView) #>;
            bool hasNoVal = inVal == null;
            if (hasNoVal) { dscrdChld = true; }
<#
                            }
                        if(directMasters.Count < 1) {
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
            });
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
            });
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = true;
            });
<#
                            }
                            {
                                List<string> fltFlds = new List<string>();
                                fltFlds= GetHiddenFilterDisablingFields(Model, Context, modelViewUIFormPropertySerializable.ForeignKeyNameChain, fltFlds);
                                if(fltFlds == null) {
#>
////////// nothing
<#
                                }
                                if (fltFlds != null) {
                                    if (fltFlds.Count > 0) {
#>
            bool isDsbl = false;
<#
                                        foreach(string fltFld in fltFlds) {
#>
            isDsbl = isDsbl ? isDsbl : <#= HiddenFiltersVMPropertyName #>.Any(v => v.fltrName == "<#= fltFld #>");
<#
                                        }
                                    }
                                }
                                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                                } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                                } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> =  !isDsbl;
            });
<#
                                }
                            }
                        } else {
#>
            bool isDsbl = false;
<#
                            foreach(ModelViewUIFormPropertySerializable masterProp in directMasters) {
                                if (GetInputTypeWhenXXX(masterProp, inptTp) == InputTypeEnum.Combo) {
#>
            isDsbl = isDsbl ? isDsbl : (this.<#= GetModelPropertyNameWithSufix(masterProp, Model, ComboSufix) #> == null);
<#
                                } else if (GetInputTypeWhenXXX(masterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            isDsbl = isDsbl ? isDsbl : (this.<#= GetModelPropertyNameWithSufix(masterProp, Model, TypeaheadSufix) #> == null);
<#
                                } else if (GetInputTypeWhenXXX(masterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            isDsbl = isDsbl ? isDsbl : (this.<#= GetModelPropertyNameWithSufix(masterProp, Model, ButtonSufix) #> == null);
<#
                                }
                            }
                            {
                                List<string> fltFlds = new List<string>();
                                fltFlds= GetHiddenFilterDisablingFields(Model, Context, modelViewUIFormPropertySerializable.ForeignKeyNameChain, fltFlds);
                                if(fltFlds == null) {
#>
////////// nothing
<#
                                }
                                if (fltFlds != null) {
                                    if (fltFlds.Count > 0) {
#>
            if(!isDsbl) {
<#
                                        foreach(string fltFld in fltFlds) {
#>
                isDsbl = isDsbl ? isDsbl : <#= HiddenFiltersVMPropertyName #>.Any(v => v.fltrName == "<#= fltFld #>");
<#
                                        }
#>
            }
<#
                                    }
                                }
                            }
                            if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                            } else if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #> = !isDsbl;
            });
<#
                            }
                        }
               {
                                bool showUIDispatcher1 = locViewPrimKeys != null;
                                showUIDispatcher1 = showUIDispatcher1 ? (locViewPrimKeys.Count > 0) : false;
                                bool showUIDispatcher2 = dependentScalarProps != null;
                                showUIDispatcher2 = showUIDispatcher2 ? (dependentScalarProps.Count > 0) : false;

#>
            if (hasNoVal) { 
<#
                        if (showUIDispatcher1 || showUIDispatcher2) {
#>
                <#= UIDispatcherInvokePropertyName #>(() => {
<#
                        }

                                foreach(ModelViewUIFormPropertySerializable dependentModelViewUIFormPropertySerializable in dependentScalarProps) {
                                        ModelViewPropertyOfVwSerializable viewProp =
                                            GetOnValChangeViewPropName(Context, Model, modelViewUIFormPropertySerializable, dependentModelViewUIFormPropertySerializable, inptTp);
                                        if(viewProp != null) {
#>
                    _<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>");
                    ValidateField(null, "<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>");
<#
                                        } else {
#>
// error: with method GetOnValChangeViewPropName() no mapping for view <#= viewName #> and props pair <#= modelViewUIFormPropertySerializable.ViewPropertyName  #> and <#= dependentModelViewUIFormPropertySerializable.ViewPropertyName  #>
<#
                                        }
                                } // foreach(ModelViewUIFormPropertySerializable dependentModelViewUIFormPropertySerializable in dependentScalarProps) {
                                foreach(ModelViewPropertyOfVwSerializable locViewPrimKey in locViewPrimKeys) {
                                    List<ModelViewPropertyOfVwSerializable> dependentPkScalarProps = GetForeignKeyPropByIndirectPrimaryKeyPropEx(Model, modelViewUIFormPropertySerializable, locView, Context, locViewPrimKey);
                                    if (dependentPkScalarProps != null) {
                                        foreach(ModelViewPropertyOfVwSerializable dependentPkScalarProp in dependentPkScalarProps) {
                                            if(!dependentScalarProps.Any(p => p.ViewPropertyName == dependentPkScalarProp.ViewPropertyName)) {
#>
                    _<#= GetModelPropertyName(dependentPkScalarProp, Model) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyName(dependentPkScalarProp, Model) #>");
                    ValidateField(null, "<#= GetModelPropertyName(dependentPkScalarProp, Model) #>");
<#
                                            }
                                        }
                                    }
                                }
                        if (showUIDispatcher1 || showUIDispatcher2) {
#>
                });
<#
                        }

#>
            } else {
<#
                        if (showUIDispatcher1 || showUIDispatcher2) {
#>
                <#= UIDispatcherInvokePropertyName #>(() => {
<#
                        }
                                foreach(ModelViewUIFormPropertySerializable dependentModelViewUIFormPropertySerializable in dependentScalarProps) {

                                        ModelViewPropertyOfVwSerializable viewProp =
                                            GetOnValChangeViewPropName(Context, Model, modelViewUIFormPropertySerializable, dependentModelViewUIFormPropertySerializable, inptTp);
                                        if(viewProp != null) {

#>
                    _<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #> = inVal.<#=  GetModelPropertyName(viewProp,locView) #>;
                    OnPropertyChanged("<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>");
                    ValidateField(_<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>, "<#= GetModelPropertyNameEx(dependentModelViewUIFormPropertySerializable, Model) #>");
<#
                                        } else {
#>
// error: with method GetOnValChangeViewPropName() no mapping for view <#= viewName #> and props pair <#= modelViewUIFormPropertySerializable.ViewPropertyName  #> and <#= dependentModelViewUIFormPropertySerializable.ViewPropertyName  #>
<#
                                        }
                                }
                                foreach(ModelViewPropertyOfVwSerializable locViewPrimKey in locViewPrimKeys) {
                                    List<ModelViewPropertyOfVwSerializable> dependentPkScalarProps = GetForeignKeyPropByIndirectPrimaryKeyPropEx(Model, modelViewUIFormPropertySerializable, locView, Context, locViewPrimKey);
                                    if (dependentPkScalarProps != null) {
                                        foreach(ModelViewPropertyOfVwSerializable dependentPkScalarProp in dependentPkScalarProps) {
                                            if(!dependentScalarProps.Any(p => p.ViewPropertyName == dependentPkScalarProp.ViewPropertyName)) {
#>
                    _<#= GetModelPropertyName(dependentPkScalarProp, Model) #> = inVal.<#=  GetModelPropertyName(locViewPrimKey, locView) #>;
                    OnPropertyChanged("<#= GetModelPropertyName(dependentPkScalarProp, Model) #>");
                    ValidateField(_<#= GetModelPropertyName(dependentPkScalarProp, Model) #>, "<#= GetModelPropertyName(dependentPkScalarProp, Model) #>");
<#
                                            }
                                        }
                                    }
                                }
                        if (showUIDispatcher1 || showUIDispatcher2) {
#>
                });
<#
                        }
#>
            }
<#
               }
                            } ///// the end of if(dependentScalarProps.Count > 0) {


                        foreach(ModelViewUIFormPropertySerializable dtlModelViewUIFormPropertySerializable in details) {
                            if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Combo) {
#>
            if(dscrdChld) {
                <#= UIDispatcherInvokePropertyName #>(() => {
                    _<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                    OnPropertyChanged("<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    ValidateObjectField(null, "<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                    _<#= GetExpressionForControlList(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
                    OnPropertyChanged("<#= GetExpressionForControlList(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>");
                });
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(null, dscrdChld);
            } else {
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>, dscrdChld);
            }
            await <#= GetExpressionForOnUpdateComboControlListMethod(dtlModelViewUIFormPropertySerializable, Model, ComboSufix) #>();
<#
                            } else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.Typeahead) {
#>
            if(dscrdChld) {
                <#= UIDispatcherInvokePropertyName #>(() => {
                    _<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
                    OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                    OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>"); 
                    ValidateObjectField(null, "<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
                });
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(null, dscrdChld);

            } else {
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(this.<#= GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>, dscrdChld);
            }
<#
                            } else if (GetInputTypeWhenXXX(dtlModelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
#>
            if(dscrdChld) {
                <#= UIDispatcherInvokePropertyName #>(() => {
                    <#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
                    OnPropertyChanged("<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                    ValidateObjectField(null, "<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                });
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(null, dscrdChld);
            } else {
                await <#= GetExpressionForOnValChangedMethod(dtlModelViewUIFormPropertySerializable, Model) #>(<#=  GetModelPropertyNameWithSufix(dtlModelViewUIFormPropertySerializable, Model, ButtonSufix) #>, dscrdChld); 
            }
<#
                            }
                        }
#>
        }
<#  
                        } // if ((dependentScalarProps.Count > 0) || (details.Count > 0)) {
                    } // for(int inptTp = 1; inptTp < 4; inptTp++) {
#>
    }
<#  
                } // if (HasInitMethod(modelViewUIFormPropertySerializable, Model)) {
            } // if (modelViewUIFormPropertySerializable.IsShownInView) { 
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
<# //////////////////////////// end  OnValChange...()-generator
#>

<#
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            if (HasButton(modelViewUIFormPropertySerializable, Model) &&  modelViewUIFormPropertySerializable.IsShownInView) {
#>
<# //////////////////////////// start SearchButtonClick()-generator
#>

    #region <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command
    private ICommand _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command;
    public ICommand <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command
    {
        get
        {
            return _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command ?? 
                (_<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>Command = 
                    new Command(
                        (param) => <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>(param), 
                        (param) => <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>CanExecute(param)));
        }
    }
    public bool <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>CanExecute(object param)
    {
        return <#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, EnabledSufix) #>;
    }
    public void <#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>(object param) {
        if (<#= IsDestroyedPropertyName #>) return;
<#
                {
                bool genElse = false;
                for(int inptTp = 1; inptTp < 4; inptTp++) {

        if ((inptTp ==2) && (ModeAddEqualUpdate)) continue;
        if ((inptTp ==3) && (ModeAddEqualDelete || ModeUpdateEqualDelete)) continue;


                    if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                        ModelViewSerializable locView = 
                            GetViewForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                        string viewName = ""; 
                        if (locView != null) {
                            viewName = locView.ViewName;
                        }
                        List<ModelViewUIFormPropertySerializable> directMasters = 
                            GetDirectMasters(modelViewUIFormPropertySerializable, Model, Context, inptTp);

        if (inptTp ==1) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualUpdate) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+2)#>) <# } #>) {
<#
        } else if (inptTp == 2) {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if ((this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) <# 
              if(ModeAddEqualDelete) {#> || (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp+1)#>) <# } #>) {
<#
        } else {
#>
        <# if (genElse) {#> else <# } else { genElse = true; } #>if (this.<#=  EformModeVMPropertyName #> == <#=  EformModeEnumClassName #>.<#=GetInputTypeToEnumName(inptTp) #>) {
<#
        }
        if (directMasters.Count > 0) {
#>
            bool hasNoVal = false;
<#
        }
#>
            IDialogParameters dlgParams = new DialogParameters();
            dlgParams.Add("Caption", "<#= TitleCaptionVal #>");
<#
                        if (directMasters.Count > 0) {
                              List<ModelViewPropertyOfVwSerializable> allForeignKeyProps = GetAllForeignKeyProps(locView);
                              foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>) == null);
<#
                                    }
#>                    
            if (! hasNoVal) {
<#
                                    foreach(ModelViewPropertyOfVwSerializable masterProp in masterPrimKeyProps) {
                                        if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
                                            if(IsPropertyNullable(masterProp)) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                            }
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
                                            if(IsPropertyNullable(masterProp)) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                            }
                                        }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
                                            if(IsPropertyNullable(masterProp)) {
#>
                hasNoVal = hasNoVal ? hasNoVal : ((<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterProp, masterView) #> == null);
<#
                                            }
                                        }
                                    }
#>
            }
<#
                            } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
#>
            if (hasNoVal) {
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("Form Error", "Could not start dialog: not all master data is defined.");
                return;                           
            }
            IList<<#= IWebServiceFilterRsltInterfaceClassName #>> hddnFltrs = new List<<#= IWebServiceFilterRsltInterfaceClassName #>>();
<#
                                foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
                                    ModelViewSerializable masterView = GetViewForControlList(directMasterProp, Model, Context, inptTp);
                                    string masterViewName = "";
                                    if(masterView != null) {
                                        masterViewName = masterView.ViewName;
                                    }
                                    List<ModelViewPropertyOfVwSerializable> masterPrimKeyProps      = GetModelPrimaryKeyProps(masterView);
                                    List<ModelViewPropertyOfVwSerializable> detailForeignKeyProps   = GetModelForeignKeyProps(locView, modelViewUIFormPropertySerializable.ForeignKeyNameChain, directMasterProp.ForeignKeyNameChain);
                                    if (masterPrimKeyProps.Count !=  detailForeignKeyProps.Count) {
#>
// error: Primary and Foreign keys have different number of properties for the given master view: <#= masterViewName #> which was detected by the property <#= directMasterProp.ViewPropertyName #> : <#= directMasterProp.ForeignKeyNameChain#>
// error:                                                              for the given detail view: <#= viewName #> which was detected by the property <#= modelViewUIFormPropertySerializable.ViewPropertyName #> : <#= modelViewUIFormPropertySerializable.ForeignKeyNameChain#>
<#  
                                    }
                                    for(int loci = 0; loci < detailForeignKeyProps.Count; loci++) {
                                        if(loci < masterPrimKeyProps.Count) {
                                            if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Combo) {
#>
            
            hddnFltrs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {
                fltrName = "<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>",
                fltrDataType = "<#= GetCCharpDatatype(detailForeignKeyProps[loci], Model) #>",
                fltrOperator = "eq",
                fltrValue = (<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ComboSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>
            });
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.Typeahead) {
#>
            hddnFltrs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {
                fltrName = "<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>",
                fltrDataType = "<#= GetCCharpDatatype(detailForeignKeyProps[loci], Model) #>",
                fltrOperator = "eq",
                fltrValue = (<#= GetModelPropertyNameWithSufix(directMasterProp, Model, TypeaheadSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>
            });
<#
                                            }  else if (GetInputTypeWhenXXX(directMasterProp, inptTp) == InputTypeEnum.SearchDialog) {
#>
            hddnFltrs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {
                fltrName = "<#= GetModelPropertyName(detailForeignKeyProps[loci], locView) #>",
                fltrDataType = "<#= GetCCharpDatatype(detailForeignKeyProps[loci], Model) #>",
                fltrOperator = "eq",
                fltrValue = (<#= GetModelPropertyNameWithSufix(directMasterProp, Model, ButtonSufix) #> as <#= GetInterfaceName(masterView) #>).<#= GetModelPropertyName(masterPrimKeyProps[loci], masterView) #>
            });
<#
                                            }
                                        }
                                    }
                                } // foreach(ModelViewUIFormPropertySerializable directMasterProp in directMasters) {
#>
            dlgParams.Add("HiddenFilters", hddnFltrs);
<#
                        } // if (directMasters.Count > 0) {
#>

            dialogService.ShowDialog("<#= GetModelClassName(locView, SdlgViewModelFolder) #>", dlgParams, async (rslt) => {
                if (rslt == null) return;
                if (rslt.Parameters == null) return;
                if (!rslt.Parameters.ContainsKey("Result")) return;
                if (!rslt.Parameters.GetValue<bool>("Result")) return;
                if (rslt.Parameters.ContainsKey("SelectedItem"))
                {
                    object itm = rslt.Parameters.GetValue<object>("SelectedItem");
                    if (itm == null) return;
                    <#= UIDispatcherInvokePropertyName #>(() => {
                        _<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = itm;
                        OnPropertyChanged("<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                        ValidateObjectField(itm, "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
                    });
                    await <#= GetExpressionForOnValChangedMethod(modelViewUIFormPropertySerializable, Model) #>(itm, true);
                }
            });
        }
<#    
                    }
                }
                }
#>
    }
    #endregion
<# //////////////////////////// end SearchButtonClick()-generator
#>
<#    
            }
        } // foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>


<#  //////////////////////////// start ControlsToObject()-generator
#>
        public <#= GetInterfaceName(Model) #> ControlsToObject() {
            if (<#= IsDestroyedPropertyName #>) return null;
            <#= GetInterfaceName(Model) #> rslt = <#= FormServicePrefix + Model.ViewName #>.<#= CopyToModelMethodName #>(null, null);
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (IsStringPropertyEx(modelViewUIFormPropertySerializable, Model)) {
#>
            rslt.<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>;
<#
        } else {
#>
            if (<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.HasValue)
                rslt.<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #> = <#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>.Value;
<#
        }
    }
#>
            return rslt;
        }
<# //////////////////////////// end ControlsToObject()-generator
#>

<#  //////////////////////////// start onSubmit()-generator
#>
        public async Task doSubmit() {
            if (<#= IsDestroyedPropertyName #>) return;
            CheckIsValid();
            if(HasErrors) return;

            <#= GetInterfaceName(Model) #> itm = ControlsToObject();
            if (<#= EformModeVMPropertyName #> == <#= EformModeEnumClassName #>.<#=GetInputTypeToEnumName(1) #>) { 
<#
            if(Model.IsWebApiAdd) {
#>
                <#= GetInterfaceName(Model) #> data = await <#= FormServicePrefix + Model.ViewName #>.<#= AddOneMethodName #>(itm);
<#
            } else {
#>
                <#= GetInterfaceName(Model) #> data = null;
<#
            }
#>
                if(data == null) {
                    <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("Http Error", "Could not update data on the server side.");
                    return;
                } else {
                    itm = <#= FormServicePrefix + Model.ViewName #>.<#= CopyToModelMethodName #>(data, <#= FormControlModelVMPropertyName #>);
                }
            } else if (this.<#= EformModeVMPropertyName #> == <#= EformModeEnumClassName #>.<#=GetInputTypeToEnumName(2) #>) { 
<#
            if(Model.IsWebApiUpdate) {
#>
                <#= GetInterfaceName(Model) #> data = await <#= FormServicePrefix + Model.ViewName #>.<#= UpdateOneMethodName #>(itm);
<#
            } else {
#>
                <#= GetInterfaceName(Model) #> data = null;
<#
            }
#>
                if(data == null) {
                    <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("Http Error", "Could not update data on the server side.");
                    return;
                } else {
                    itm  = <#= FormServicePrefix + Model.ViewName #>.<#= CopyToModelMethodName #>(data, <#= FormControlModelVMPropertyName #>);
                }
            } else if (<#= EformModeVMPropertyName #> == <#= EformModeEnumClassName #>.<#=GetInputTypeToEnumName(3) #>) { 
<#
            if(Model.IsWebApiDelete) {
#>
                <#= GetInterfaceName(Model) #> data = await <#= FormServicePrefix + Model.ViewName #>.<#= DeleteOneMethodName #>(<# 
                {
                    int counter = 0;
                    List<ModelViewPropertyOfVwSerializable> primKeys =  GetModelPrimaryKeyProps(Model);
                    foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
                        if(counter > 0) { #>, <#} #>  itm.<#= GetModelPropertyName(prop, Model) #><#
                        counter++;
                    }
                }
                #>);
<#
            } else {
#>
                <#= GetInterfaceName(Model) #> data = null;
<#
            }
#>
                if(data == null) {
                    <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("Http Error", "Could not update data on the server side.");
                    return;
                } else {
                    itm = <#= FormServicePrefix + Model.ViewName #>.<#= CopyToModelMethodName #>(data, <#= FormControlModelVMPropertyName #>);
                }
            }
            // notify EformUserControl
            <#= UIDispatcherInvokePropertyName #>(() => {
                <#= BindingContextFeedbackRefPropertyName #> = new <#= BindingContextFeedbackClassName #>() {
		            BcfName = "<#= SubmitCommandPropertyName #>",
		            BcfData = itm
                };
            });
        }
<# //////////////////////////// end  onSubmit()-generator
#>

        #region <#= SubmitCommandPropertyName #>
        private ICommand _<#= SubmitCommandPropertyName #>;
        public ICommand <#= SubmitCommandPropertyName #>
        {
            get
            {
                return _<#= SubmitCommandPropertyName #> ?? (_<#= SubmitCommandPropertyName #> = new Command(() => <#= SubmitCommandPropertyName #>Action(), () => <#= SubmitCommandPropertyName #>CanExecute()));
            }
        }
        protected async void <#= SubmitCommandPropertyName #>Action()
        {
            await doSubmit();
        }
        protected bool <#= SubmitCommandPropertyName #>CanExecute()
        {
            return !HasErrors;
        }
        #endregion
        #region <#= CancelCommandPropertyName #>
        private ICommand _<#= CancelCommandPropertyName #>;
        public ICommand <#= CancelCommandPropertyName #>
        {
            get
            {
                return _<#= CancelCommandPropertyName #> ?? (_<#= CancelCommandPropertyName #> = new Command((param) => <#= CancelCommandPropertyName #>Action(param), (param) => <#= CancelCommandPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= CancelCommandPropertyName #>Action(object param)
        {
            // notify EformUserControl
            if (<#= IsDestroyedPropertyName #>) return;
            <#= BindingContextFeedbackRefPropertyName #> = new <#= BindingContextFeedbackClassName #>() {
		        BcfName = "<#= CancelCommandPropertyName #>",
		        BcfData = null
            };
        }
        protected bool <#= CancelCommandPropertyName #>CanExecute(object param)
        {
            return true;
        }
        #endregion
        #region Validation
        Dictionary<string, ICollection<string>> ValidationErrors = new Dictionary<string, ICollection<string>>();
        Dictionary<string, ICollection<string>> ValidationDataErrors = new Dictionary<string, ICollection<string>>();
        public bool HasErrors { get { return (ValidationErrors.Count > 0) || (ValidationDataErrors.Count > 0); } }
        public System.Collections.IEnumerable GetErrors(string propertyName)
        {
            if (string.IsNullOrEmpty(propertyName)) {
                return null;
            }
            if(ValidationErrors.ContainsKey(propertyName)) 
                return ValidationErrors[propertyName];
            if (ValidationDataErrors.ContainsKey(propertyName))
                return ValidationDataErrors[propertyName];
            return null;
        }
        public string GetFirstError(string propertyName)
        {
            if (string.IsNullOrEmpty(propertyName)) {
                return "";
            }
            string str = null;
            if(ValidationErrors.ContainsKey(propertyName)) 
                str = ValidationErrors[propertyName].FirstOrDefault(i => !string.IsNullOrEmpty(i));
            if(string.IsNullOrEmpty(str))
                if (ValidationDataErrors.ContainsKey(propertyName))
                    str = ValidationDataErrors[propertyName].FirstOrDefault(i => !string.IsNullOrEmpty(i));
            return str==null ? "" : str;
        }
        public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;
        private void RaiseErrorsChanged(string propertyName)
        {
            //if (ErrorsChanged != null)
            //    ErrorsChanged(this, new DataErrorsChangedEventArgs(propertyName));
            OnPropertyChanged(propertyName + "<#= ValueErrorSufix #>");
        }
        public void ValidateField(object value, [CallerMemberName] string filedName = null) {
            if(<#= IsLoadingPropertyName #>) return;
            if (string.IsNullOrEmpty(filedName)) return;
            PropertyInfo propertyInfo = typeof(<#= GetInterfaceName(Model) #>).GetProperty(filedName);
            if(propertyInfo == null) return;
            IList<string> rslt = 
                    (from validationAttribute in propertyInfo.GetCustomAttributes(true).OfType<ValidationAttribute>()
                     where !validationAttribute.IsValid(value)
                     select validationAttribute.FormatErrorMessage(string.Empty)).ToList();
            bool hasErrors = rslt != null;
            hasErrors = hasErrors ? (rslt.Count > 0) : false;
            if(hasErrors) {
                ValidationDataErrors[filedName] = rslt;
                RaiseErrorsChanged(filedName);
            } else {
                if(ValidationDataErrors.ContainsKey(filedName))  {
                    ValidationDataErrors.Remove(filedName);
                    RaiseErrorsChanged(filedName);
                }
            }
        }
        public void ValidateObjectField(object value, [CallerMemberName] string filedName = null) {
            if(<#= IsLoadingPropertyName #>) return;
            if (string.IsNullOrEmpty(filedName)) return;
            if (value != null) {
                if(ValidationDataErrors.ContainsKey(filedName))  {
                    ValidationDataErrors.Remove(filedName);
                    RaiseErrorsChanged(filedName);
                }
                return;
            }
            string msgfiledName = filedName;
<#
        if (ModelHasDoInitMethod) {
#>            
            RequiredAttribute requiredAttribute;
            string msg = null;
            switch(filedName) {
<#
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                if (HasCombo(modelViewUIFormPropertySerializable, Model) && modelViewUIFormPropertySerializable.IsShownInView) { 
                    if(IsPropertyRequiredInViewEx(modelViewUIFormPropertySerializable, Model)) {
#>
                case "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>":
                    requiredAttribute = new RequiredAttribute();
                    msg = requiredAttribute.FormatErrorMessage(string.Empty);
                    break;
<#
                    }
                }
                if (HasButton(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {
#>
                case "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>":
                    requiredAttribute = new RequiredAttribute();
                    msg = requiredAttribute.FormatErrorMessage(string.Empty);
                    msgfiledName = "<#= GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>";
                    break;
<#
                }
                if (HasTypeahead(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
                case "<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>":
                    requiredAttribute = new RequiredAttribute();
                    msg = requiredAttribute.FormatErrorMessage(string.Empty);
                    break;
<#
                }
            }
#>
                default:
                    break;
            }
            if (!string.IsNullOrEmpty(msg)) {
                ValidationDataErrors[msgfiledName] = new List<string>() { msg };
                RaiseErrorsChanged(msgfiledName);
            }
<#
        }
#>
        }
        public void CheckIsValid() {
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            ValidateField(<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>, "<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>");
<#
    }
    if (ModelHasDoInitMethod) {
        InputTypeEnum InputTypeWhenXXX ;
        for (int InputTypeId = 1; InputTypeId <= 3; InputTypeId++) {
#>
            if (<#= EformModeVMPropertyName #> == <#= EformModeEnumClassName #>.<#= GetInputTypeToEnumName(InputTypeId) #>) {
<#
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                switch(InputTypeId) {
                    case 1:
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenAdd;
                        break;
                    case 2:
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenUpdate;
                        break;
                    default: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenDelete;
                        break;
                }
                if (modelViewUIFormPropertySerializable.IsShownInView ) {
                    if(InputTypeWhenXXX == InputTypeEnum.Combo) {
#>
                        ValidateObjectField(<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>, "<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
<#
                    }
                    if(InputTypeWhenXXX == InputTypeEnum.Typeahead) {
#>
                        ValidateObjectField(<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>, "<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
<#
                    }
                    if(InputTypeWhenXXX == InputTypeEnum.SearchDialog) {
#>
                        ValidateObjectField(<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>, "<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
<#
                    }
                }
            }
#>
            }
<#
        }
    }
#>
        }
        public void ClearValidationMessages() {
            ValidationErrors.Clear();
            ValidationDataErrors.Clear();
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
#>
            RaiseErrorsChanged("<#= GetModelPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>");
<#
    }
    if (ModelHasDoInitMethod) {
        InputTypeEnum InputTypeWhenXXX ;
        for (int InputTypeId = 1; InputTypeId <= 3; InputTypeId++) {
#>
            if (<#= EformModeVMPropertyName #> == <#= EformModeEnumClassName #>.<#= GetInputTypeToEnumName(InputTypeId) #>) {
<#
            foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
                switch(InputTypeId) {
                    case 1:
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenAdd;
                        break;
                    case 2:
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenUpdate;
                        break;
                    default: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenDelete;
                        break;
                }
                if (modelViewUIFormPropertySerializable.IsShownInView ) {
                    if(InputTypeWhenXXX == InputTypeEnum.Combo) {
#>
                        RaiseErrorsChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>");
<#
                    }
                    if(InputTypeWhenXXX == InputTypeEnum.Typeahead) {
#>
                        RaiseErrorsChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>");
<#
                    }
                    if(InputTypeWhenXXX == InputTypeEnum.SearchDialog) {
#>
                        RaiseErrorsChanged("<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #>");
<#
                    }
                }
            }
#>
            }
<#
        }
    }
#>
        }
        #endregion
        #region <#= IsDestroyedPropertyName #>
        protected bool _<#= IsDestroyedPropertyName #> = false;
        public bool <#= IsDestroyedPropertyName #> {
            get { return _<#= IsDestroyedPropertyName #>; }
            set { 
                if(_<#= IsDestroyedPropertyName #> != value) {
                    _<#= IsDestroyedPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        public void <#= OnDestroyPropertyName #>() {
            <#= IsDestroyedPropertyName #> = true;
            <#= IsLoadingPropertyName #> = false;
            <#= IsOnLoadedCalledPropertyName #> = false;
            _<#= HiddenFiltersVMPropertyName #> = null;
            _<#= FormControlModelVMPropertyName #> = null;
            _<#= BindingContextFeedbackRefPropertyName #> = null;
<#
    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        if (HasCombo(modelViewUIFormPropertySerializable, Model) && modelViewUIFormPropertySerializable.IsShownInView) { 
#>
            _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
            _<#=  GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #> = null;
<#
        }
        if (HasButton(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) {  
#>
            _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonSufix) #> = null;
<#
        }
        if (HasTypeahead(modelViewUIFormPropertySerializable, Model)  && modelViewUIFormPropertySerializable.IsShownInView) { 
#>
            _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadItemsSourceSufix) #> = null;
            _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #> = null;
            _<#=  GetModelPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadTextSufix) #>=null;
<#
        }
    }
#>
        }

    }
}

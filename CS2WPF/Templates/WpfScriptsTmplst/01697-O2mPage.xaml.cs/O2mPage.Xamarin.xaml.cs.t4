<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using Xamarin.Forms;
using Prism.Navigation;
<#

    string O2mPageFolder                           = "01697-O2mPage.xaml.cs";
    string O2mPageClassName                        = GetModelClassName(Model, O2mPageFolder);
    string O2mPageNameSpace                        = GetModelNameSpace(Model, O2mPageFolder);

    string IsDestroyedPropertyName = "IsDestroyed";
    string OnDestroyedPropertyName = "OnDestroyed";

    List<string> nmSpaces = new List<string>();
    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>


namespace <#= O2mPageNameSpace #> {
    /// <summary>
    /// Interaction logic for <#= O2mPageClassName #>.xaml
    /// </summary>
    public partial class <#= O2mPageClassName #>: ContentPage, IDestructible
    {
        public <#= O2mPageClassName #>()
        {
            InitializeComponent();
        }
        #region IDestructible
        public virtual void <#= OnDestroyedPropertyName #>()
        {
            IDestructible bc = BindingContext as IDestructible;
            if(bc != null) bc.Destroy();
            BindingContext = null;
            Content = null;
        }
        private static void <#= IsDestroyedPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= O2mPageClassName #> inst = d as <#= O2mPageClassName #>;
            if (inst != null)
            {
                inst.<#= OnDestroyedPropertyName #>();
            }
        }
        public static readonly BindableProperty <#= IsDestroyedPropertyName #>Property =
                BindableProperty.Create(
                "<#= IsDestroyedPropertyName #>", typeof(bool),
                typeof(<#= O2mPageClassName #>),
                false, propertyChanged: <#= IsDestroyedPropertyName #>Changed);
        public bool <#= IsDestroyedPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= IsDestroyedPropertyName #>Property);
            }
            set
            {
                SetValue(<#= IsDestroyedPropertyName #>Property, value);
            }
        }

        public void Destroy()
        {
            <#= IsDestroyedPropertyName #> = true;
        }
        #endregion
    }
}


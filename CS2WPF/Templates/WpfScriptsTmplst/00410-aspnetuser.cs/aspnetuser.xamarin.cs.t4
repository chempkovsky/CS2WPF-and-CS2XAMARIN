<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="System.String" name="DefaultProjectNameSpace" #>

<#

    string aspnetuserFolder             = "00410-aspnetuser.cs";
    string aspnetuserroleFolder         = "00420-aspnetuserroles.cs";
    string aspnetusermaskFolder         = "00430-aspnetusermask.cs";

#>

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;


namespace <#= GetNameSpaceName(Model, aspnetuserFolder, DefaultProjectNameSpace) #>
{
    public class <#= GetEntityClassName(Model, aspnetuserFolder) #>
    {
        [Required]
        [Display(Description = "User Id", Name = "User Id", Prompt = "Enter Id", ShortName = "User Id")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [StringLength(128, MinimumLength = 1, ErrorMessage = "Invalid")]
        public string Id { get; set; } = null!;

        [Display(Description = "User Email", Name = "User Email", Prompt = "Enter Email", ShortName = "User Email")]
        [StringLength(256, MinimumLength = 0, ErrorMessage = "Invalid")]
        public string Email { get; set; } = null!;

        [Required]
        [Display(Description = "Email Confirmed", Name = "Email Confirmed", Prompt = "Enter Email Confirmed", ShortName = "Email Confirmed")]
        public bool EmailConfirmed { get; set; }

        [Display(Description = "Phone Number", Name = "Phone Number", Prompt = "Enter Phone Number", ShortName = "Phone Number")]
        public string PhoneNumber { get; set; } = null!;

        [Required]
        [Display(Description = "Phone Number Confirmed", Name = "Phone Number Confirmed", Prompt = "Enter Phone Number Confirmed", ShortName = "Phone Number Confirmed")]
        public bool PhoneNumberConfirmed { get; set; }

        [Required]
        [Display(Description = "Two Factor Enabled", Name = "Two Factor Enabled", Prompt = "Enter Two Factor Enabled", ShortName = "Two Factor Enabled")]
        public bool TwoFactorEnabled { get; set; }

        [Display(Description = "Lockout End", Name = "Lockout End", Prompt = "Enter Lockout", ShortName = "Lockout End")]
        public System.DateTimeOffset? LockoutEnd { get; set; }

        [Required]
        [Display(Description = "Lockout Enabled", Name = "Lockout Enabled", Prompt = "Enter Lockout Enabled", ShortName = "Lockout Enabled")]
        public bool LockoutEnabled { get; set; }

        [Required]
        [Display(Description = "Access Failed Count", Name = "Access Failed Count", Prompt = "Enter Access Failed Count", ShortName = "Access Failed Count")]
        public int AccessFailedCount { get; set; }

        [Display(Description = "User Name", Name = "User Name", Prompt = "Enter User Name", ShortName = "User Name")]
        [StringLength(256, MinimumLength = 1, ErrorMessage = "Invalid")]
        public string UserName { get; set; } = null!;

        public virtual ICollection<<#= GetEntityClassName(Model, aspnetuserroleFolder) #>> UserRoles { get; set; }= null!;
        public virtual ICollection<<#= GetEntityClassName(Model, aspnetusermaskFolder) #>> UserMasks { get; set; }= null!;
    }
}

<#+
    string GetEntityClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName;
    }
    string GetNameSpaceName(ModelViewSerializable model, string currFolder, string  DefaultProjectNameSpace) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if (curItem == null) {
            return result;
        }
        result = curItem.FileFolder.Replace("\\",".");
        if(string.IsNullOrEmpty(DefaultProjectNameSpace)) {
            return result;
        } 
        return DefaultProjectNameSpace + "." + result;
    }


#>
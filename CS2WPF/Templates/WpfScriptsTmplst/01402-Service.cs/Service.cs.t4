<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using System;
using System.Text;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;

<#

    string IAppGlblSettingsServiceFolder      = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName   = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace   = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);


    string modelInterfaceFolder             = "01100-Interface.cs";
    string modelInterfaceClassName          = GetInterfaceName(Model);
    string modelInterfaceNameSpace          = GetModelNameSpace(Model, modelInterfaceFolder);

    string modelFolder                      = "01102-Model.cs";
    string modelClassName                   = GetModelName(Model);
    string modelNameSpace                   = GetModelNameSpace(Model, modelFolder);

    string NotifyInterfaceFolder            = "01104-NotifyInterface.cs";
    string NotifyInterfaceClassName         = GetNotifyInterfaceName(Model);
    string NotifyInterfaceNameSpace         = GetModelNameSpace(Model, NotifyInterfaceFolder);

    string ModelNotifyFolder                = "01106-ModelNotify.cs";
    string ModelNotifyClassName             = GetModelNotifyName(Model);
    string ModelNotifyNameSpace             = GetModelNameSpace(Model, ModelNotifyFolder);

    string modelPageInterfaceFolder         = "01200-Page.interface.cs";
    string modelPageInterfaceClassName      = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace      = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelPageFolder                  = "01202-Page.model.cs";
    string modelPageClassName               = GetModelPageName(Model);
    string modelPageNameSpace               = GetModelNameSpace(Model, modelPageFolder);

    string modelFilterInterfaceFolder       = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName    = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace    = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelFilterFolder                = "01302-Filter.model.cs";
    string modelFilterClassName             = GetFilterName(Model);
    string modelFilterNameSpace             = GetModelNameSpace(Model, modelFilterFolder);


    string modelServiceInterfaceFolder       = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName    = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace    = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string modelServiceFolder                = "01402-Service.cs";
    string modelServiceClassName             = GetModelServiceName(Model);
    string modelServiceNameSpace             = GetModelNameSpace(Model, modelServiceFolder);



    string FilterOperatorSuffix = "Oprtr";
    string EqualOperator = "eq";
    string getAuthInfoHeaderMethodName      = "GetAuthInfoHeader";
    string ShowErrorMethodName              = "ShowErrorMessage";


    string GetAllMethodName                 = "getall";
    string GetWithFilterMethodName          = "getwithfilter";
    string GetOneMethodName                 = "getone";
    string UpdateOneMethodName              = "updateone";
    string AddOneMethodName                 = "addone";
    string DeleteOneMethodName              = "deleteone";
    string CopyToModelMethodName            = "CopyToModel";
    string CopyToModelNotifyMethodName      = "CopyToModelNotify";
    string AppSettingServicePropertyName    = "appGlblSettings";


    List<ModelViewPropertyOfVwSerializable> primKeys= new List<ModelViewPropertyOfVwSerializable>();
    {
        // collect primkey props
        if ((Model.PrimaryKeyProperties != null) && (Model.ScalarProperties != null)) {
            foreach(ModelViewKeyPropertySerializable pk in Model.PrimaryKeyProperties) {
                ModelViewPropertyOfVwSerializable scProp= 
                    Model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
                if(scProp == null) {
                    if (Model.ForeignKeys != null) {
                        foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
                            if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                                int cnt = fk.ForeignKeyProps.Count;
                                if (cnt < fk.PrincipalKeyProps.Count)
                                {
                                    cnt = fk.PrincipalKeyProps.Count;
                                }
                                for(int i = 0; i < cnt; i++)
                                {
                                    if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                                    {
                                        scProp=
                                            Model.ScalarProperties.Where(p =>
                                            ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                                    }
                                    if(scProp != null) {
                                        break;
                                    }
                                }
                            }
                            if(scProp != null) {
                                break;
                            }
                        }
                    }
                }
                if(scProp != null) {
                    primKeys.Add(scProp);
                }
            }
        }
    }



    List<string> nmSpaces = new List<string>();
    if (modelServiceNameSpace != modelInterfaceNameSpace) nmSpaces.Add(modelInterfaceNameSpace);
    if ((modelServiceNameSpace != modelPageInterfaceNameSpace) && (nmSpaces.IndexOf(modelPageInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelPageInterfaceNameSpace);
    if ((modelServiceNameSpace != modelFilterInterfaceNameSpace) && (nmSpaces.IndexOf(modelFilterInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelFilterInterfaceNameSpace);
    if ((modelServiceNameSpace != modelServiceInterfaceNameSpace) && (nmSpaces.IndexOf(modelServiceInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelServiceInterfaceNameSpace);
    if ((modelServiceNameSpace != modelNameSpace) && (nmSpaces.IndexOf(modelNameSpace) < 0)) 
        nmSpaces.Add(modelNameSpace);
    if ((modelServiceNameSpace != modelPageNameSpace) && (nmSpaces.IndexOf(modelPageNameSpace) < 0)) 
        nmSpaces.Add(modelPageNameSpace);
    if ((modelServiceNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((modelServiceNameSpace != ModelNotifyNameSpace) && (nmSpaces.IndexOf(ModelNotifyNameSpace) < 0)) 
        nmSpaces.Add(ModelNotifyNameSpace);
    if ((modelServiceNameSpace != NotifyInterfaceNameSpace) && (nmSpaces.IndexOf(NotifyInterfaceNameSpace) < 0)) 
        nmSpaces.Add(NotifyInterfaceNameSpace);
    if ((modelServiceNameSpace != modelFilterNameSpace) && (nmSpaces.IndexOf(modelFilterNameSpace) < 0)) 
        nmSpaces.Add(modelFilterNameSpace);

#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

/*
    In the file of IModule-class of the project for the current service the following lines of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            containerRegistry.Register<<#= modelServiceInterfaceClassName #>, <#= modelServiceClassName #>>();
            ...
        }

*/
namespace <#= modelServiceNameSpace #> {
    public class <#= modelServiceClassName #>: <#= modelServiceInterfaceClassName #>
    {
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #> = null;
        protected string serviceUrl = null;
        protected HttpClient client = null;
        public <#= modelServiceClassName #>(<#= IAppGlblSettingsServiceClassName #> agstt) {
            this.<#= AppSettingServicePropertyName #> = agstt;
            this.serviceUrl = this.<#= AppSettingServicePropertyName #>.GetWebApiPrefix("<#= Model.ViewName #>") + "<#= GetWebApiServicePrefix(Model) #>";
            this.client = this.<#= AppSettingServicePropertyName #>.Client;
        }
<# 
    if (Model.IsWebApiSelectAll) { 
#>
        public async Task<IList<<#= modelInterfaceClassName #>>> <#= GetAllMethodName #>() {
            try
            {
                HttpResponseMessage response = await client.GetAsync(serviceUrl + "/" + "<#= GetAllMethodName #>");
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                return new List<<#= modelInterfaceClassName #>>( JsonConvert.DeserializeObject<IList<<#= modelClassName #>>>(responseBody) );
            } 
            catch(Exception e)
            {
                string exceptionMsg = "<#= modelServiceClassName #>.<#= GetAllMethodName #> : " + e.Message;
                Exception inner = e.InnerException;
                while (inner != null)
                {
                    exceptionMsg = exceptionMsg + ": " + inner.Message;
                    inner = inner.InnerException;
                }
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", exceptionMsg);
                return null;
            }
        }
<#
    }
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
        public async Task<<#= modelPageInterfaceClassName #>> <#= GetWithFilterMethodName #>(<#= modelFilterInterfaceClassName #> filter) {
            string prms = null;
            if(filter != null) {
<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (! prop.IsUsedByfilter) {
                continue;
            }
#>
                if (filter.<#= GetModelPropertyName(prop, Model) #> != null) {
<#          if(prop.IsNullable) { 
#>
                    bool hasNull = false;
<#
            }
#>
                    foreach(var val in filter.<#= GetModelPropertyName(prop, Model) #>) {
<#          if(prop.IsNullable) { 
#>
                        if(val != null) {
<#
            }
#>
                            if(prms == null)
                                //prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "[]=" + Uri.EscapeDataString(val.ToString());
                                prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "=" + Uri.EscapeDataString(val.ToString());
                            else 
                                //prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "[]=" + Uri.EscapeDataString(val.ToString());
                                prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "=" + Uri.EscapeDataString(val.ToString());
<#          if(prop.IsNullable) { 
#>
                        } 
                        else hasNull = true;
<#
            }
#>
                    }
<#          if(prop.IsNullable) { 
#>
                    if(hasNull) {
                            if(prms == null)
                                //prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "[]=" ;
                                prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "=" ;
                            else 
                                //prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "[]=";
                                prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "=";
                    }
<#
            }
#>
                }
<#
        }
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (! prop.IsUsedByfilter) {
                continue;
            }
#>
                if(filter.<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix)#> != null) {
                    foreach(var val in filter.<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix)#>) {
                        if(val != null) {
                            if(prms == null)
                                //prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>") + "[]=" +  Uri.EscapeDataString(val.ToString());
                                prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>") + "=" +  Uri.EscapeDataString(val.ToString());
                            else 
                                //prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>") + "[]=" + Uri.EscapeDataString(val.ToString());
                                prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>") + "=" + Uri.EscapeDataString(val.ToString());
                        } else {
                            if(prms == null)
                                //prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>") + "[]=" +  Uri.EscapeDataString("<#= EqualOperator #>");
                                prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>") + "=" +  Uri.EscapeDataString("<#= EqualOperator #>");
                            else 
                                //prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>") + "[]=" + Uri.EscapeDataString("<#= EqualOperator #>");
                                prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>") + "=" + Uri.EscapeDataString("<#= EqualOperator #>");
                        }
                    }
                }
<#
        }
#>
                if(filter.orderby != null) {
                    foreach(var ordb in filter.orderby) {
                        if( !string.IsNullOrEmpty(ordb) ) {
                            if(prms == null)
                                //prms = "?" + Uri.EscapeDataString("orderby") + "[]=" +  Uri.EscapeDataString(ordb);
                                prms = "?" + Uri.EscapeDataString("orderby") + "=" +  Uri.EscapeDataString(ordb);
                            else 
                                //prms += "&" + Uri.EscapeDataString("orderby") + "[]=" + Uri.EscapeDataString(ordb);
                                prms += "&" + Uri.EscapeDataString("orderby") + "=" + Uri.EscapeDataString(ordb);
                        }
                    }
                }
                if(filter.page.HasValue) {
                    if(prms == null)
                        prms = "?" + Uri.EscapeDataString("page") + "=" +  Uri.EscapeDataString(filter.page.Value.ToString());
                    else 
                        prms += "&" + Uri.EscapeDataString("page") + "=" + Uri.EscapeDataString(filter.page.Value.ToString());
                }
                if(filter.pagesize.HasValue) {
                    if(prms == null)
                        prms = "?" + Uri.EscapeDataString("pagesize") + "=" +  Uri.EscapeDataString(filter.pagesize.Value.ToString());
                    else 
                        prms += "&" + Uri.EscapeDataString("pagesize") + "=" + Uri.EscapeDataString(filter.pagesize.Value.ToString());
                }
            }
            if(prms == null) prms = "";
            try
            {
                HttpResponseMessage response = await client.GetAsync(serviceUrl + "/" + "<#= GetWithFilterMethodName #>" + prms);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                return  JsonConvert.DeserializeObject<<#= modelPageClassName #>>(responseBody) ;
            } 
            catch(Exception e)
            {
                string exceptionMsg = "<#= modelServiceClassName #>.<#= GetWithFilterMethodName #> : " + e.Message;
                Exception inner = e.InnerException;
                while (inner != null)
                {
                    exceptionMsg = exceptionMsg + ": " + inner.Message;
                    inner = inner.InnerException;
                }
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", exceptionMsg);
                return null;
            }
        }
<#
    }
    if (Model.IsWebApiSelectOneByPrimarykey) { 
#>
        public async Task<<#= modelInterfaceClassName #>> <#= GetOneMethodName #>(<# 
        {
            bool isNotFirst = false;
            foreach(ModelViewPropertyOfVwSerializable prop in primKeys) { 
                 if(isNotFirst){#>, <#} else {isNotFirst = true;} #><#=  GetPropertyTypeName(prop) #> <#= GetModelPropertyName(prop, Model) #> <#
            }
        }
        #>) {
            string prms = null;
<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(! (primKeys.Contains(prop))) {
                continue;
            }
            if(prop.IsNullable) { 
#>
            if(<#= GetModelPropertyName(prop, Model) #> != null) {
<#
            }
#>
                if(prms == null)
                    prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "=" +  Uri.EscapeDataString(<#= GetModelPropertyName(prop, Model) #>.ToString());
                else 
                    prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "=" + Uri.EscapeDataString(<#= GetModelPropertyName(prop, Model) #>.ToString());
<#
            if(prop.IsNullable) { 
#>
            }
<#
            }
        }
#>
            if(prms == null) prms = "";
            try
            {
                HttpResponseMessage response = await client.GetAsync(serviceUrl + "/" + "<#= GetOneMethodName #>" + prms);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                return  JsonConvert.DeserializeObject<<#= modelClassName #>>(responseBody) ;
            } 
            catch(Exception e) 
            {
                string exceptionMsg = "<#= modelServiceClassName #>.<#= GetOneMethodName #> : " + e.Message;
                Exception inner = e.InnerException;
                while (inner != null)
                {
                    exceptionMsg = exceptionMsg + ": " + inner.Message;
                    inner = inner.InnerException;
                }
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", exceptionMsg);
                return null;
            }
        }
<#
    }
    if (Model.IsWebApiUpdate) { 
#>
        public async Task<<#= modelInterfaceClassName #>> <#= UpdateOneMethodName #>(<#= modelInterfaceClassName #> item) {
            if(item == null) {
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", "Input item is not defined");
                return null;
            }
            try
            {
                var stringContent = new StringContent(JsonConvert.SerializeObject(item), Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PutAsync(serviceUrl + "/" + "<#= UpdateOneMethodName #>", stringContent);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                return  JsonConvert.DeserializeObject<<#= modelClassName #>>(responseBody) ;
            } 
            catch(Exception e) 
            {
                string exceptionMsg = "<#= modelServiceClassName #>.<#= UpdateOneMethodName #> : " + e.Message;
                Exception inner = e.InnerException;
                while (inner != null)
                {
                    exceptionMsg = exceptionMsg + ": " + inner.Message;
                    inner = inner.InnerException;
                }
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", exceptionMsg);
                return null;
            }
        }
<#
    }
    if (Model.IsWebApiAdd) { 
        List<ModelViewPropertyOfVwSerializable> identProps = GetDatabaseGeneratedProp(Model);
#>
        public async Task<<#= modelInterfaceClassName #>> <#= AddOneMethodName #>(<#= modelInterfaceClassName #> item) {
            if(item == null) {
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", "Input item is not defined");
                return null;
            }
<#
        foreach (ModelViewPropertyOfVwSerializable identProp in identProps) {
            if(IsPropertyTypeNullable(identProp)) {
#>
            if(item.<#= GetModelPropertyName(identProp, Model) #> == null) {
                item.<#= GetModelPropertyName(identProp, Model) #> = <#= GetDefaultVal(identProp) #>;
            }
<#
            }
        }
#>
            try
            {
                var stringContent = new StringContent(JsonConvert.SerializeObject(item), Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(serviceUrl + "/" + "<#= AddOneMethodName #>", stringContent);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                return  JsonConvert.DeserializeObject<<#= modelClassName #>>(responseBody) ;
            } 
            catch(Exception e) 
            {
                string exceptionMsg = "<#= modelServiceClassName #>.<#= AddOneMethodName #> : " + e.Message;
                Exception inner = e.InnerException;
                while (inner != null)
                {
                    exceptionMsg = exceptionMsg + ": " + inner.Message;
                    inner = inner.InnerException;
                }
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", exceptionMsg);
                return null;
            }
        }
<#
    }
    if (Model.IsWebApiDelete) { 
#>
        public async Task<<#= modelInterfaceClassName #>> <#= DeleteOneMethodName #>(<# 
        {
            bool isNotFirst = false;
            foreach(ModelViewPropertyOfVwSerializable prop in primKeys) { 
                 if(isNotFirst){#>, <#} else {isNotFirst = true;} #><#=  GetPropertyTypeName(prop) #> <#= GetModelPropertyName(prop, Model) #> <#
            }
        }
        #>) {
            string prms = null;
<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(! (primKeys.Contains(prop))) {
                continue;
            }
            if(prop.IsNullable) { 
#>
            if(<#= GetModelPropertyName(prop, Model) #> != null) {
<#
            }
#>
                if(prms == null)
                    prms = "?" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "=" +  Uri.EscapeDataString(<#= GetModelPropertyName(prop, Model) #>.ToString());
                else 
                    prms += "&" + Uri.EscapeDataString("<#= GetFilterPropertyName(prop, Model) #>") + "=" + Uri.EscapeDataString(<#= GetModelPropertyName(prop, Model) #>.ToString());
<#
            if(prop.IsNullable) { 
#>
            }
<#
            }
        }
#>
            if(prms == null) prms = "";
            try
            {
                HttpResponseMessage response = await client.DeleteAsync(serviceUrl + "/" + "<#= DeleteOneMethodName #>" + prms);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                return  JsonConvert.DeserializeObject<<#= modelClassName #>>(responseBody) ;
            } 
            catch(Exception e) 
            {
                string exceptionMsg = "<#= modelServiceClassName #>.<#= DeleteOneMethodName #> : " + e.Message;
                Exception inner = e.InnerException;
                while (inner != null)
                {
                    exceptionMsg = exceptionMsg + ": " + inner.Message;
                    inner = inner.InnerException;
                }
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", exceptionMsg);
                return null;
            }
        }
<#
    }
#>
        public <#= NotifyInterfaceClassName #> <#= CopyToModelNotifyMethodName #>(<#= modelInterfaceClassName #>  src, <#= NotifyInterfaceClassName #> dest = null) {
            if(dest == null) dest = new <#= ModelNotifyClassName #>();
            if(src == null) return dest;
<#
        foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
#>
            dest.<#= GetModelPropertyName(prop, Model) #> = src.<#= GetModelPropertyName(prop, Model) #>;
<# 
       } 
#>
            return dest;
        }
        public <#= modelInterfaceClassName #> <#= CopyToModelMethodName #>(<#= modelInterfaceClassName #>  src, <#= modelInterfaceClassName #> dest = null) {
            if(dest == null) dest = new <#= modelClassName #>();
            if(src == null) return dest;
<#
        foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
#>
            dest.<#= GetModelPropertyName(prop, Model) #> = src.<#= GetModelPropertyName(prop, Model) #>;
<# 
       } 
#>
            return dest;
        }

        public <#= modelFilterInterfaceClassName #> GetFilter() {
            return new <#= modelFilterClassName #>();
        }
    }
}


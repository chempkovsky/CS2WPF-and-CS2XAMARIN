<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.CompilerServices;
<# if(Model.GenerateJSonAttribute) { #>
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
<# } #>
<#

    string NotifyInterfaceFolder      = "01104-NotifyInterface.cs";
    string NotifyInterfaceClassName   = GetNotifyInterfaceName(Model);
    string NotifyInterfaceNameSpace   = GetModelNameSpace(Model, NotifyInterfaceFolder);

    string ModelNotifyFolder         = "01106-ModelNotify.cs";
    string ModelNotifyClassName      = GetModelNotifyName(Model);
    string ModelNotifyNameSpace      = GetModelNameSpace(Model, ModelNotifyFolder);

    if(ModelNotifyNameSpace != NotifyInterfaceNameSpace) {
#>
using <#= NotifyInterfaceNameSpace #>;
<#
    }
#>

namespace <#= ModelNotifyNameSpace #> {
    public class <#= ModelNotifyClassName #>: <#= NotifyInterfaceClassName #>
    {
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        public override string ToString()
        {
            return "" 
<#
        foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
#>
            + _<#= GetModelPropertyName(prop, Model) #>
<# 
        }
#>
            ;
        }

<#
        foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
#>
        protected <#= GetPropertyTypeName(prop) #>  _<#= GetModelPropertyName(prop, Model) #>;
<# 

            if(Model.GenerateJSonAttribute) { 
#>
        [JsonProperty(PropertyName = "<#= prop.JsonPropertyName #>")]
<# 
            } 
            if (prop.IsRequiredInView) {
#>
        [Required]
<# 
            }
            if(prop.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in prop.Attributes) {
                    if ("Required".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("DatabaseGenerated".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Key".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("ForeignKey".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Column".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Index".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("NotMapped".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("InverseProperty".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
#>
        <#= AttribToString(a) #>
<#
                }
            }
#>
        public <#= GetPropertyTypeName(prop) #>  <#= GetModelPropertyName(prop, Model) #> { 
            get { return _<#= GetModelPropertyName(prop, Model) #>; }
            set { if(_<#= GetModelPropertyName(prop, Model) #> != value) { _<#= GetModelPropertyName(prop, Model) #> = value; OnPropertyChanged(); } }
        }
<# 
       } 
#>
    }
}


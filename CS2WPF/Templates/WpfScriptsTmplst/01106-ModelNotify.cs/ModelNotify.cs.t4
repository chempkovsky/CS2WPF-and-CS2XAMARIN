<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.CompilerServices;
<# if(Model.GenerateJSonAttribute) { #>
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
<# } #>
<#

    string NotifyInterfaceFolder      = "01104-NotifyInterface.cs";
    string NotifyInterfaceClassName   = GetNotifyInterfaceName(Model);
    string NotifyInterfaceNameSpace   = GetModelNameSpace(Model, NotifyInterfaceFolder);

    string ModelNotifyFolder         = "01106-ModelNotify.cs";
    string ModelNotifyClassName      = GetModelNotifyName(Model);
    string ModelNotifyNameSpace      = GetModelNameSpace(Model, ModelNotifyFolder);

    if(ModelNotifyNameSpace != NotifyInterfaceNameSpace) {
#>
using <#= NotifyInterfaceNameSpace #>;
<#
    }
#>

namespace <#= ModelNotifyNameSpace #> {
    public class <#= ModelNotifyClassName #>: <#= NotifyInterfaceClassName #>
    {
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        public override string ToString()
        {
            return "" 
<#
        foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
#>
            + _<#= GetModelPropertyName(prop, Model) #>
<# 
        }
#>
            ;
        }

<#
        foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
#>
        protected <#= GetPropertyTypeName(prop) #>  _<#= GetModelPropertyName(prop, Model) #>;
<# 

            if(Model.GenerateJSonAttribute) { 
#>
        [JsonProperty(PropertyName = "<#= prop.JsonPropertyName #>")]
<# 
            } 
            if (prop.IsRequiredInView) {
#>
        [Required]
<# 
            }
            if(prop.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in prop.Attributes) {
                    if ("Required".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("DatabaseGenerated".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Key".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("ForeignKey".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Column".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Index".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("NotMapped".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("InverseProperty".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
#>
        <#= AttribToString(a) #>
<#
                }
            }
#>
        public <#= GetPropertyTypeName(prop) #>  <#= GetModelPropertyName(prop, Model) #> { 
            get { return _<#= GetModelPropertyName(prop, Model) #>; }
            set { if(_<#= GetModelPropertyName(prop, Model) #> != value) { _<#= GetModelPropertyName(prop, Model) #> = value; OnPropertyChanged(); } }
        }
<# 
       } 
#>
    }
}

<#+

    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetModelNotifyName(ModelViewSerializable model) {
        return GetModelName(model) + "Notify";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+ GetModelName(model);
    }
    string GetNotifyInterfaceName(ModelViewSerializable model) {
        return GetInterfaceName(model) + "Notify";
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string AttribToString(ModelViewAttributeSerializable attr) {
        if(attr == null) return "";
        string result= "[" + attr.AttrName; 
        if (attr.VaueProperties == null) {
            return result + "]";
        }
        if (attr.VaueProperties.Count < 1) {
            return result + "]";
        }
        result = result + "(";
        bool insComma= false;
        foreach(ModelViewAttributePropertySerializable valProp in attr.VaueProperties) {
            if (insComma) {
                result =  result + ",";
            } else {
                insComma = true;
            }
            if(! string.IsNullOrEmpty(valProp.PropName) ) {
                if (! valProp.PropName.Contains("...") ) {
                    result =  result + valProp.PropName + "=";
                }
            }
            result =  result + valProp.PropValue;
        }
        return result + ")]";
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }

#>
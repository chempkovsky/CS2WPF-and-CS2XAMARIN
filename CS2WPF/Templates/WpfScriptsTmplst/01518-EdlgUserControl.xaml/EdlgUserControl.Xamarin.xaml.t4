<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>

<#

    string ProxyUserControlFolder           = "00280-ProxyUserControl.xaml.cs";
    string ProxyUserControlClassName        = GetContextModelClassName(Context, ProxyUserControlFolder);
    string ProxyUserControlNameSpace        = GetContextModelNameSpace(Context, ProxyUserControlFolder);
    string ProxyUserControlProject          = GetContextModelProjectName(Context, ProxyUserControlFolder);


    string EformUserControlFolder           = "01496-EformUserControl.xaml.cs";
    string EformUserControlClassName        = GetModelClassName(Model, EformUserControlFolder);
    string EformUserControlNameSpace        = GetModelNameSpace(Model, EformUserControlFolder);
    string EformUserControlProject          = GetModelProjectName(Model, EformUserControlFolder);

    string EdlgUserControlFolder            = "01516-EdlgUserControl.xaml.cs";
    string EdlgUserControlClassName         = GetModelClassName(Model, EdlgUserControlFolder);
    string EdlgUserControlNameSpace         = GetModelNameSpace(Model, EdlgUserControlFolder);
    string EdlgUserControlProject           = GetModelProjectName(Model, EdlgUserControlFolder);

    string EdlgUserControlXamlFolder        = "01518-EdlgUserControl.xaml";
    string EdlgUserControlXamlClassName     = GetModelClassName(Model, EdlgUserControlXamlFolder);
    string EdlgUserControlXamlNameSpace     = GetModelNameSpace(Model, EdlgUserControlXamlFolder);
    string EdlgUserControlXamlProject       = GetModelProjectName(Model, EdlgUserControlXamlFolder);

    

    string CaptionPropertyName              = "Caption";
    string HiddenFiltersPropertyName        = "HiddenFilters";
    string ShowSubmitPropertyName           = "ShowSubmit";
    string FormControlModelPropertyName     = "FormControlModel";
    string EformModePropertyName            = "EformMode";

    string SubmitCommandPropertyName        = "SubmitCommand";
    string CancelCommandPropertyName        = "CancelCommand";

    string IsParentLoadedPropertyName       = "IsParentLoaded";

    string RegionPropertyName               = "Region";
    string DialogRegionPropertyName         = "DialogRegion";
    string IsDestroyedPropertyName          = "IsDestroyed";

    string proxyPrefix = "clr-namespace:" + ProxyUserControlNameSpace;
    if(ProxyUserControlProject != EdlgUserControlProject) {
        proxyPrefix = proxyPrefix + ";assembly=" + ProxyUserControlProject;
    }
    string eformPrefix = "clr-namespace:" + EformUserControlNameSpace;
    if(EformUserControlProject != EdlgUserControlProject) {
        eformPrefix = eformPrefix + ";assembly=" + EformUserControlProject;
    }

    bool IsInTheSameModule = (EformUserControlProject == EdlgUserControlProject);

#>

<ContentView x:Class="<#= EdlgUserControlNameSpace #>.<#= EdlgUserControlClassName #>"
             xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"

             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             prism:DialogLayout.RelativeHeightRequest="0.99"
<#
    if(IsInTheSameModule) {
#>
             xmlns:efrm="<#= eformPrefix #>" 
<#
    } else {
#>
             xmlns:prx="<#= proxyPrefix #>" 
<#
    }
#>
             BackgroundColor="{DynamicResource ModifyItemDlgBackgroundColor}"
             x:Name="edlgUserControlRoot">
    <ScrollView Orientation="Vertical" VerticalOptions="StartAndExpand">
<#
    if(IsInTheSameModule) {
#>
        <efrm:<#= EformUserControlClassName #> VerticalOptions="FillAndExpand"
<#
    } else {
#>
        <prx:<#= ProxyUserControlClassName #> VerticalOptions="FillAndExpand"
            prism:RegionManager.RegionName="<#= EformUserControlClassName #><#= DialogRegionPropertyName #>"
<#
    }
#>

            <#= IsDestroyedPropertyName #>="{Binding BindingContext.<#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference edlgUserControlRoot}}" 
            <#= CaptionPropertyName #>="{Binding BindingContext.<#= CaptionPropertyName #>, Mode=OneWay, Source={x:Reference edlgUserControlRoot}}" 
            <#= HiddenFiltersPropertyName #>="{Binding BindingContext.<#= HiddenFiltersPropertyName #>, Mode=OneWay, Source={x:Reference edlgUserControlRoot}}" 
            <#= ShowSubmitPropertyName #>="{Binding BindingContext.<#= ShowSubmitPropertyName #>, Mode=OneWay, Source={x:Reference edlgUserControlRoot}}" 
            <#= FormControlModelPropertyName #>="{Binding BindingContext.<#= FormControlModelPropertyName #>, Mode=OneWay, Source={x:Reference edlgUserControlRoot}}" 
            <#= EformModePropertyName #>="{Binding BindingContext.<#= EformModePropertyName #>, Mode=OneWay, Source={x:Reference edlgUserControlRoot}}" 
            <#= SubmitCommandPropertyName #>="{Binding BindingContext.<#= SubmitCommandPropertyName #>, Mode=OneWay, Source={x:Reference edlgUserControlRoot}}" 
            <#= CancelCommandPropertyName #>="{Binding BindingContext.<#= CancelCommandPropertyName #>, Mode=OneWay, Source={x:Reference edlgUserControlRoot}}" 
            <#= IsParentLoadedPropertyName #>="{Binding BindingContext.<#= IsParentLoadedPropertyName #>, Mode=OneWay, Source={x:Reference edlgUserControlRoot}}" 
            />
    </ScrollView>
</ContentView>


<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelProjectName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    bool IsBooleanInput(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return"System.Boolean".Equals(sclrProp.UnderlyingTypeName) || "Boolean".Equals(sclrProp.UnderlyingTypeName) || "bool".Equals(sclrProp.UnderlyingTypeName);
    }
    bool hasSortHeader(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if ((model == null) || (modelViewUIListPropertySerializable == null)) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        return model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting);
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }

#>
<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>

<#

    string StringNullOrEmptyToBoolConverterFolder           = "00171-StringNullOrEmptyToBoolConverter.cs";
    string StringNullOrEmptyToBoolConverterClassName        = GetModelClassName(Model, StringNullOrEmptyToBoolConverterFolder);
    string StringNullOrEmptyToBoolConverterNameSpace        = GetModelNameSpace(Model, StringNullOrEmptyToBoolConverterFolder);
    string StringNullOrEmptyToBoolConverterProject          = GetModelProjectName(Model, StringNullOrEmptyToBoolConverterFolder);

    string IconFontFolder      = "00178-IconFont.cs";
    string IconFontClassName   = GetModelClassName(Model, IconFontFolder);
    string IconFontNameSpace   = GetModelNameSpace(Model, IconFontFolder);
    string IconFontNameProject = GetModelProjectName(Model, IconFontFolder);


    string RegisterUserPageFolder     = "00707-RegisterUserPage.xaml.cs";
    string RegisterUserPageClassName  = GetModelClassName(Model, RegisterUserPageFolder);
    string RegisterUserPageNameSpace  = GetModelNameSpace(Model, RegisterUserPageFolder);
    string RegisterUserPageProject    = GetModelProjectName(Model, RegisterUserPageFolder);


    string RegisterUserPageXamlFolder      = "00709-RegisterUserPage.xaml";
    string RegisterUserPageXamlClassName   = GetModelClassName(Model, RegisterUserPageXamlFolder);
    string RegisterUserPageXamlNameSpace   = GetModelNameSpace(Model, RegisterUserPageXamlFolder);
    string RegisterUserPageXamlProject     = GetModelProjectName(Model, RegisterUserPageXamlFolder);
    
    string UserNamePropertyName         = "UserName";
    string UserNameCaptionPropertyName  = "UserNameCaption";
    string UserNamePropmptPropertyName  = "UserNamePropmpt";
    string UserNameErrorPropertyName    = "UserNameError";

    string PassWordPropertyName             = "PassWord";
    string PassWordCaptionPropertyName      = "PassWordCaption";
    string PassWordPropmptPropertyName      = "PassWordPropmpt";
    string PassWordErrorPropertyName        = "PassWordError";
    string PassWordShowPropertyName         = "PassWordShow";
    string PassWordIsPasswordPropertyName   = "PassWordIsPassword";

    string ConfirmPassWordPropertyName              = "ConfirmPassWord";
    string ConfirmPassWordCaptionPropertyName       = "ConfirmPassWordCaption";
    string ConfirmPassWordPropmptPropertyName       = "ConfirmPassWordPropmpt";
    string ConfirmPassWordErrorPropertyName         = "ConfirmPassWordError";
    string ConfirmPassWordShowPropertyName          = "ConfirmPassWordShow";
    string ConfirmPassWordIsPasswordPropertyName    = "ConfirmPassWordIsPassword";

    string OkCommandPropertyName            = "OkCommand";
    string CancelCommandPropertyName        = "CancelCommand";

    string FontFamilyPropertyName                   = "CustomIconFontAlias";

    string IconFontPrefix = "clr-namespace:" + IconFontNameSpace;
    if(IconFontNameProject != RegisterUserPageProject) {
        IconFontPrefix = IconFontPrefix + ";assembly=" + IconFontNameProject;
    }
    string strnulltoboolPrefix = "clr-namespace:" + StringNullOrEmptyToBoolConverterNameSpace;
    if(StringNullOrEmptyToBoolConverterProject != RegisterUserPageProject) {
        strnulltoboolPrefix = strnulltoboolPrefix + ";assembly=" + StringNullOrEmptyToBoolConverterProject;
    }

#>

<ContentPage x:Class="<#= RegisterUserPageNameSpace #>.<#= RegisterUserPageClassName #>"
             xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"

             xmlns:fontIcons="<#= IconFontPrefix #>"
             xmlns:str2boolconv="<#= strnulltoboolPrefix #>"

             x:Name="registerCntrlRootNode">
    <ContentPage.Resources>
        <str2boolconv:<#= StringNullOrEmptyToBoolConverterClassName #> x:Key="StringNullOrEmptyToBoolConverter"/>
    </ContentPage.Resources>

    <StackLayout HorizontalOptions="CenterAndExpand" VerticalOptions="CenterAndExpand" Orientation="Vertical">

        <Label FontSize="Title" Text="Register User" HorizontalOptions="Center"/>

        <StackLayout Orientation="Vertical" HorizontalOptions="Center" Margin="10,0,10,0">
                <StackLayout Orientation="Vertical">
                    <Label FontSize="Caption" Text="{Binding BindingContext.<#= UserNameCaptionPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}" />
                    <Entry Text="{Binding BindingContext.<#= UserNamePropertyName #>, Mode=TwoWay, Source={x:Reference registerCntrlRootNode}}"/>
                    <Label FontSize="Caption" 
                            Text="{Binding BindingContext.<#= UserNamePropmptPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"
                            Opacity="0.3"
                            TextColor="Default">
                        <Label.Triggers>
                            <DataTrigger TargetType="Label" Binding="{Binding BindingContext.<#= UserNameErrorPropertyName #>, Converter={StaticResource StringNullOrEmptyToBoolConverter}, Source={x:Reference registerCntrlRootNode}}" Value="False">
                                <Setter Property="TextColor" Value="{x:DynamicResource ValidationErrorColor}" />
                                <Setter Property="Text" Value="{Binding BindingContext.<#= UserNameErrorPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"/>
                                <Setter Property="Opacity" Value="0.7" />
                            </DataTrigger>
                        </Label.Triggers>
                    </Label>
                </StackLayout>


                <StackLayout Orientation="Vertical">
                    <Label FontSize="Caption" Text="{Binding BindingContext.<#= PassWordCaptionPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}" />
                    <Grid ColumnSpacing="0">
                        <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Entry IsPassword="{Binding BindingContext.<#= PassWordIsPasswordPropertyName #>, Mode=TwoWay, Source={x:Reference registerCntrlRootNode}}"
                                Text="{Binding BindingContext.<#= PassWordPropertyName #>, Mode=TwoWay, Source={x:Reference registerCntrlRootNode}}"/>
                        <Button Grid.Column="1" WidthRequest="45"
                                Command="{Binding BindingContext.<#= PassWordShowPropertyName #>Command, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"
                                Text="{x:Static fontIcons:<#= IconFontClassName #>.Remove_red_eye}" FontFamily="<#= FontFamilyPropertyName #>" BackgroundColor="{DynamicResource IconButtonBackgroundColor}" 
                                TextColor="{DynamicResource IconButtonPrimaryColor}" 
                                FontSize="{OnPlatform iOS=Default, Android=Large, UWP=Default}">
                            <Button.Triggers>
                                <DataTrigger TargetType="Button" Binding="{Binding BindingContext.<#= PassWordIsPasswordPropertyName #>, Source={x:Reference registerCntrlRootNode} }" Value="False">
                                    <Setter Property="TextColor" Value="{x:DynamicResource ValidationErrorColor}" />
                                </DataTrigger>
                            </Button.Triggers>
                        </Button>
                    </Grid>
                    <Label FontSize="Caption" 
                            Text="{Binding BindingContext.<#= PassWordPropmptPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"
                            Opacity="0.3"
                            TextColor="Default">
                        <Label.Triggers>
                            <DataTrigger TargetType="Label" Binding="{Binding BindingContext.<#= PassWordErrorPropertyName #>, Converter={StaticResource StringNullOrEmptyToBoolConverter}, Source={x:Reference registerCntrlRootNode}}" Value="False">
                                <Setter Property="TextColor" Value="{x:DynamicResource ValidationErrorColor}" />
                                <Setter Property="Text" Value="{Binding BindingContext.<#= PassWordErrorPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"/>
                                <Setter Property="Opacity" Value="0.7" />
                            </DataTrigger>
                        </Label.Triggers>
                    </Label>
                </StackLayout>

                <StackLayout Orientation="Vertical">
                    <Label FontSize="Caption" Text="{Binding BindingContext.<#= ConfirmPassWordCaptionPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}" />
                    <Grid ColumnSpacing="0">
                        <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Entry Grid.Column="0" IsPassword="{Binding BindingContext.<#= ConfirmPassWordIsPasswordPropertyName #>, Mode=TwoWay, Source={x:Reference registerCntrlRootNode}}"
                                Text="{Binding BindingContext.<#= ConfirmPassWordPropertyName #>, Mode=TwoWay, Source={x:Reference registerCntrlRootNode}}"/>
                        <Button Grid.Column="1" WidthRequest="45"
                                Command="{Binding BindingContext.<#= ConfirmPassWordShowPropertyName #>Command, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"
                                Text="{x:Static fontIcons:<#= IconFontClassName #>.Remove_red_eye}" FontFamily="<#= FontFamilyPropertyName #>" BackgroundColor="{DynamicResource IconButtonBackgroundColor}" 
                                TextColor="{DynamicResource IconButtonPrimaryColor}" 
                                FontSize="{OnPlatform iOS=Default, Android=Large, UWP=Default}">
                            <Button.Triggers>
                                <DataTrigger TargetType="Button" Binding="{Binding BindingContext.<#= ConfirmPassWordIsPasswordPropertyName #>, Source={x:Reference registerCntrlRootNode}}" Value="False">
                                    <Setter Property="TextColor" Value="{x:DynamicResource ValidationErrorColor}" />
                                </DataTrigger>
                            </Button.Triggers>
                        </Button>
                    </Grid>

                    <Label FontSize="Caption" 
                            Text="{Binding BindingContext.<#= ConfirmPassWordPropmptPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"
                            Opacity="0.3"
                            TextColor="Default">
                        <Label.Triggers>
                            <DataTrigger TargetType="Label" Binding="{Binding BindingContext.<#= ConfirmPassWordErrorPropertyName #>, Converter={StaticResource StringNullOrEmptyToBoolConverter}, Source={x:Reference registerCntrlRootNode}}" Value="False">
                                <Setter Property="TextColor" Value="{x:DynamicResource ValidationErrorColor}" />
                                <Setter Property="Text" Value="{Binding BindingContext.<#= ConfirmPassWordErrorPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"/>
                                <Setter Property="Opacity" Value="0.7" />
                            </DataTrigger>
                        </Label.Triggers>
                    </Label>
                </StackLayout>


                <StackLayout Orientation="Horizontal" Margin="8">
                        <Button Text=" Ok "  Command="{Binding BindingContext.<#= OkCommandPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"/>
                        <Button Text=" Cancel "  Command="{Binding BindingContext.<#= CancelCommandPropertyName #>, Mode=OneWay, Source={x:Reference registerCntrlRootNode}}"/>
                </StackLayout>

        </StackLayout>
    </StackLayout>
</ContentPage>


<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>
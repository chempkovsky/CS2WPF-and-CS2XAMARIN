<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>

<#

    string ProxyUserControlFolder           = "00280-ProxyUserControl.xaml.cs";
    string ProxyUserControlClassName        = GetContextModelClassName(Context, ProxyUserControlFolder);
    string ProxyUserControlNameSpace        = GetContextModelNameSpace(Context, ProxyUserControlFolder);
    string ProxyUserControlProject          = GetContextModelProjectName(Context, ProxyUserControlFolder);

    string LformUserControlFolder           = "01596-LformUserControl.xaml.cs";
    string LformUserControlClassName        = GetModelClassName(Model, LformUserControlFolder);
    string LformUserControlNameSpace        = GetModelNameSpace(Model, LformUserControlFolder);
    string LformUserControlProject          = GetModelProjectName(Model, LformUserControlFolder);
    
    string O2mPageFolder                    = "01697-O2mPage.xaml.cs";
    string O2mPageClassName                 = GetModelClassName(Model, O2mPageFolder);
    string O2mPageNameSpace                 = GetModelNameSpace(Model, O2mPageFolder);
    string O2mPageProject                   = GetModelProjectName(Model, O2mPageFolder);

    string O2mPageXamlFolder                = "01699-O2mPage.xaml";
    string O2mPageXamlClassName             = GetModelClassName(Model, O2mPageXamlFolder);
    string O2mPageXamlNameSpace             = GetModelNameSpace(Model, O2mPageXamlFolder);
    string O2mPageXamlProject               = GetModelProjectName(Model, O2mPageXamlFolder);


    string CaptionPropertyName              = "Caption";
    string FilterHeightPropertyName         = "FilterHeight";
    string ShowFilterPropertyName           = "ShowFilter";
    string ShowAddFilterBtnPropertyName     = "ShowAddFilterBtn";
    string ShowBackBtnPropertyName          = "ShowBackBtn";
    string GridHeightPropertyName           = "GridHeight";
    string TableMenuItemsPropertyName       = "TableMenuItems";
    string RowMenuItemsPropertyName         = "RowMenuItems";
    string ContainerMenuItemsPropertyName   = "ContainerMenuItems";
    string HiddenFiltersPropertyName        = "HiddenFilters";
    string SelectedRowCommandPropertyName   = "SelectedRowCommand";

    string SformAfterAddItemPropertyName    = "SformAfterAddItem";
    string SformAfterUpdItemPropertyName    = "SformAfterUpdItem";
    string SformAfterDelItemPropertyName    = "SformAfterDelItem";

    string TableMenuItemsCommandPropertyName    = "TableMenuItemsCommand";
    string RowMenuItemsCommandPropertyName      = "RowMenuItemsCommand";
    
    string CanAddPropertyName                   = "CanAdd";
    string CanUpdPropertyName                   = "CanUpdate";
    string CanDelPropertyName                   = "CanDelete";

    string CanAddDetailPropertyName                 = "CanAddDetail"; 
    string CanUpdDetailPropertyName                 = "CanUpdateDetail"; 
    string CanDelDetailPropertyName                 = "CanDeleteDetail"; 
    string TableMenuItemsDetailPropertyName         = "TableMenuItemsDetail"; 
    string RowMenuItemsDetailPropertyName           = "RowMenuItemsDetail"; 
    string TableMenuItemsCommandDetailPropertyName  = "TableMenuItemsCommandDetail";
    string RowMenuItemsCommandDetailPropertyName    = "RowMenuItemsCommandDetail";
    string SelectedRowCommandDetailPropertyName     = "SelectedRowCommandDetail";
    string HiddenFiltersDetailPropertyName          = "HiddenFiltersDetail"; 
    string GridHeightDetailPropertyName             = "GridHeightDetail"; 
    string FilterHeightDetailPropertyName           = "FilterHeightDetail"; 

   
    string RegionPropertyName                       = "Region";
    string MasterRegionPropertyName                 = "MasterRegion";
    string DetailRegionPropertyName                 = "DetailRegion";


    string DetailsListPropertyName                  = "DetailsList"; 
    string SelectedDetailsListItemPropertyName      = "SelectedDetailsListItem"; 
    string IsDetailReadyPropertyName                = "IsDetailReady"; 
    string IsDetailDestroyedPropertyName            = "IsDetailDestroyed";

    string TemplateViewSuffixPropertyName           = "TemplateView"; 

    string IsParentLoadedPropertyName               = "IsParentLoaded";
    string IsDestroyedPropertyName                  = "IsDestroyed";
    string IsSwitchingPropertyName                  = "IsSwitching";


    string proxyPrefix = "clr-namespace:" + ProxyUserControlNameSpace;
    if(ProxyUserControlProject != O2mPageProject) {
        proxyPrefix = proxyPrefix + ";assembly=" + ProxyUserControlProject;
    }
    string lformPrefix = "clr-namespace:" + LformUserControlNameSpace;
    if(LformUserControlProject != O2mPageProject) {
        lformPrefix = lformPrefix + ";assembly=" + LformUserControlProject;
    }

    bool IsInTheSameModule = (LformUserControlProject == O2mPageProject);

    List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(Model);
    List<string> detailViewNames =  GetDetailViews(Model, Context, null);
    List<string> detailViewNamesToExclude = new List<string>();
    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> tmpSearchSchema = null;

#>

<ContentPage x:Class="<#= O2mPageNameSpace #>.<#= O2mPageClassName #>"
             xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com" 
             prism:ViewModelLocator.AutowireViewModel="True"

<#
    if(IsInTheSameModule) {
#>
             xmlns:lfrm="<#= lformPrefix #>" 
<#
    } else {
#>
             xmlns:prx="<#= proxyPrefix #>" 
<#
    }
#>

<#
    {
        int id = -1;
        foreach(string detailViewName in detailViewNames) {
            if(detailViewNamesToExclude.Any(s => s == detailViewName)) continue;
            id++;
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
<!--  can not find the view by Name <#= detailViewName #> -->
<#
                continue;
            }
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) {
#>
<!-- can not find Foreign Keys for <#= detailViewName #> -->
<#
                continue;
            }
            if (foreignKeys.Count < 1) {
#>
<!-- can not find Foreign Keys for <#= detailViewName #> -->
<#
                continue;
            }
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                if(isM2m) {
                    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                    tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                    if (tmpSearchSchema != null) {
                        int  cnt = 0;
                        if(tmpSearchSchema.Item5 == null) continue;
                        if(tmpSearchSchema.Item5.Count != 1) continue;
                        if(tmpSearchSchema.Item4 != null) continue;
                        if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                        ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
                        string viewToNavigateClassName = GetModelClassName(viewToNavigate, LformUserControlFolder);
                        string viewToNavigateLformUserControlProject  = GetModelProjectName(viewToNavigate, LformUserControlFolder);
                        if (viewToNavigateLformUserControlProject == O2mPageProject) {
                            string locallformPrefix = "clr-namespace:" + GetModelNameSpace(detailView, LformUserControlFolder);
#>
             xmlns:lfrm<#= id #>="<#= locallformPrefix #>" 
<#
                        } // if (viewToNavigateLformUserControlProject != O2mPageProject) { ... }
                    } // if (tmpSearchSchema != null) { ... }
                } // if(isM2m) { ... }
                string localLformUserControlProject  = GetModelProjectName(detailView, LformUserControlFolder);
                if (localLformUserControlProject == O2mPageProject) {
                    string locallformPrefix = "clr-namespace:" + GetModelNameSpace(detailView, LformUserControlFolder);
#>
             xmlns:lfrm<#= id #>="<#= locallformPrefix #>" 
<#
                }
            } // foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) { ... }
        } // foreach(string detailViewName in detailViewNames) { ... }
    } // { ... }
#>

             x:Name="o2mUsrCntrlRootNode"
             >
  <ScrollView Orientation="Vertical" VerticalOptions="StartAndExpand">
    <StackLayout>
        <ActivityIndicator 
                IsVisible="{Binding BindingContext.<#= IsSwitchingPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}"
                IsRunning="{Binding BindingContext.<#= IsSwitchingPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}"/>
        <!-- <ProgressBar 
                         Progress="0.75"
                         IsVisible="{Binding BindingContext.<#= IsSwitchingPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}"/>-->

<#
    if(IsInTheSameModule) {
#>
        <lfrm:<#= LformUserControlClassName #>  
<#
    } else {
#>
        <prx:<#= ProxyUserControlClassName #> 
            prism:RegionManager.RegionName="<#= LformUserControlClassName #><#= MasterRegionPropertyName #>"
<#
    }
#>
            <#= IsDestroyedPropertyName #>="{Binding BindingContext.<#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= CaptionPropertyName #>="{Binding BindingContext.<#= CaptionPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= FilterHeightPropertyName #>="{Binding BindingContext.<#= FilterHeightPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= ShowFilterPropertyName #>="True" 
            <#= ShowAddFilterBtnPropertyName #>="True" 
            <#= GridHeightPropertyName #>="{Binding BindingContext.<#= GridHeightPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= ShowBackBtnPropertyName #>="False" 
            <#= HiddenFiltersPropertyName #>="{Binding BindingContext.<#= HiddenFiltersPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= SelectedRowCommandPropertyName #>="{Binding BindingContext.<#= SelectedRowCommandPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= TableMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= TableMenuItemsCommandPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= RowMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= RowMenuItemsCommandPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= TableMenuItemsPropertyName #>="{Binding BindingContext.<#= TableMenuItemsPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= RowMenuItemsPropertyName #>="{Binding BindingContext.<#= RowMenuItemsPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= CanAddPropertyName #>="{Binding BindingContext.<#= CanAddPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= CanUpdPropertyName #>="{Binding BindingContext.<#= CanUpdPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= CanDelPropertyName #>="{Binding BindingContext.<#= CanDelPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= IsParentLoadedPropertyName #>="{Binding BindingContext.<#= IsParentLoadedPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            
            />

        <StackLayout>
            <Label Text="Selected detail"/>
            <Picker ItemsSource="{Binding BindingContext.<#= DetailsListPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                    ItemDisplayBinding="{Binding <#= CaptionPropertyName #>}" 
                    SelectedItem="{Binding BindingContext.<#= SelectedDetailsListItemPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}, Mode=TwoWay}">
            </Picker>
        </StackLayout>

        <ContentView ControlTemplate="{StaticResource NoMasterRowIsSelectedView}">
            <ContentView.Resources>
                <ResourceDictionary>
                    <ControlTemplate x:Key="NoMasterRowIsSelectedView">
                            <Label Text="Master row not selected or access denied for detail" />
                    </ControlTemplate> 
<#
    {
        int id = -1;
        foreach(string detailViewName in detailViewNames) {
            if(detailViewNamesToExclude.Any(s => s == detailViewName)) continue;
            id++;
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
<!--  can not find the view by Name <#= detailViewName #> -->
<#
                continue;
            }
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) {
#>
<!--  can not find Foreign Keys for <#= detailViewName #> -->
<#
                continue;
            }
            if (foreignKeys.Count < 1) {
#>
<!--  can not find Foreign Keys for <#= detailViewName #> -->
<#
                continue;
            }
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                if(isM2m) {
                    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                    tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                    if (tmpSearchSchema != null) {
                        int  cnt = 0;
                        if(tmpSearchSchema.Item5 == null) continue;
                        if(tmpSearchSchema.Item5.Count != 1) continue;
                        if(tmpSearchSchema.Item4 != null) continue;
                        if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                        ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
                        string viewToNavigateClassName = GetModelClassName(viewToNavigate, LformUserControlFolder);
                        string viewToNavigateLformUserControlProject  = GetModelProjectName(viewToNavigate, LformUserControlFolder);
#>
                    <ControlTemplate x:Key="<#= viewToNavigateClassName #><#= TemplateViewSuffixPropertyName #>">
<#
                        if (viewToNavigateLformUserControlProject == O2mPageProject) {
#>
                        <lfrm<#= id #>:<#= GetModelClassName(detailView, LformUserControlFolder) #> 
<#
                        } else {
#>
                        <prx:<#= ProxyUserControlClassName #> 
                            prism:RegionManager.RegionName="<#= viewToNavigateClassName #><#= DetailRegionPropertyName #>"
<#
                        }
#>
                            <#= IsDestroyedPropertyName #>="{Binding BindingContext.<#= IsDetailDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CaptionPropertyName #>="{Binding BindingContext.<#= SelectedDetailsListItemPropertyName #>.<#= CaptionPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= FilterHeightPropertyName #>="{Binding BindingContext.<#= FilterHeightDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= ShowFilterPropertyName #>="True" 
                            <#= ShowAddFilterBtnPropertyName #>="True" 
                            <#= GridHeightPropertyName #>="{Binding BindingContext.<#= GridHeightDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= ShowBackBtnPropertyName #>="False" 
                            <#= HiddenFiltersPropertyName #>="{Binding BindingContext.<#= HiddenFiltersDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= SelectedRowCommandPropertyName #>="{Binding BindingContext.<#= SelectedRowCommandDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= TableMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= TableMenuItemsCommandDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= RowMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= RowMenuItemsCommandDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= TableMenuItemsPropertyName #>="{Binding BindingContext.<#= TableMenuItemsDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= RowMenuItemsPropertyName #>="{Binding BindingContext.<#= RowMenuItemsDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CanAddPropertyName #>="{Binding BindingContext.<#= CanAddDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CanUpdPropertyName #>="{Binding BindingContext.<#= CanUpdDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CanDelPropertyName #>="{Binding BindingContext.<#= CanDelDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= IsParentLoadedPropertyName #>="{Binding BindingContext.<#= IsDetailReadyPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            />
                    </ControlTemplate>
<#
                    } // the end of if (tmpSearchSchema != null) { ... }
                } // the end of if(isM2m) { ... }
                string detailViewClassName = GetModelClassName(detailView, LformUserControlFolder);
                string localLformUserControlProject  = GetModelProjectName(detailView, LformUserControlFolder);
#>
                    <ControlTemplate x:Key="<#= detailViewClassName #><#= TemplateViewSuffixPropertyName #>">
<#
                if (localLformUserControlProject == O2mPageProject)
                {
#>
                        <lfrm<#= id #>:<#= GetModelClassName(detailView, LformUserControlFolder) #> 
<#
                } else {
#>
                        <prx:<#= ProxyUserControlClassName #> 
                            prism:RegionManager.RegionName="<#= detailViewClassName #><#= DetailRegionPropertyName #>"
<#
                }
#>
                            <#= IsDestroyedPropertyName #>="{Binding BindingContext.<#= IsDetailDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CaptionPropertyName #>="{Binding BindingContext.<#= SelectedDetailsListItemPropertyName #>.<#= CaptionPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= FilterHeightPropertyName #>="{Binding BindingContext.<#= FilterHeightDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= ShowFilterPropertyName #>="True" 
                            <#= ShowAddFilterBtnPropertyName #>="True" 
                            <#= GridHeightPropertyName #>="{Binding BindingContext.<#= GridHeightDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= ShowBackBtnPropertyName #>="False" 
                            <#= HiddenFiltersPropertyName #>="{Binding BindingContext.<#= HiddenFiltersDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= SelectedRowCommandPropertyName #>="{Binding BindingContext.<#= SelectedRowCommandDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= TableMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= TableMenuItemsCommandDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= RowMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= RowMenuItemsCommandDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= TableMenuItemsPropertyName #>="{Binding BindingContext.<#= TableMenuItemsDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= RowMenuItemsPropertyName #>="{Binding BindingContext.<#= RowMenuItemsDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CanAddPropertyName #>="{Binding BindingContext.<#= CanAddDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CanUpdPropertyName #>="{Binding BindingContext.<#= CanUpdDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CanDelPropertyName #>="{Binding BindingContext.<#= CanDelDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= IsParentLoadedPropertyName #>="{Binding BindingContext.<#= IsDetailReadyPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            />
                    </ControlTemplate>
<#
            } // foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) { ... }
        } // foreach(string detailViewName in detailViewNames) { ... }
    } // { ... }
#>
                </ResourceDictionary>
            </ContentView.Resources>
            <ContentView.Triggers>
<#
    {
        int id = -1;
        foreach(string detailViewName in detailViewNames) {
            if(detailViewNamesToExclude.Any(s => s == detailViewName)) continue;
            id++;
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
<!--  can not find the view by Name <#= detailViewName #> -->
<#
                continue;
            }
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) {
#>
<!--  can not find Foreign Keys for <#= detailViewName #> -->
<#
                continue;
            }
            if (foreignKeys.Count < 1) {
#>
<!--  can not find Foreign Keys for <#= detailViewName #> -->
<#
                continue;
            }
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                if(isM2m) {
                    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                    tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                    if (tmpSearchSchema != null) {
                        int  cnt = 0;
                        if(tmpSearchSchema.Item5 == null) continue;
                        if(tmpSearchSchema.Item5.Count != 1) continue;
                        if(tmpSearchSchema.Item4 != null) continue;
                        if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                        ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
                        string viewToNavigateClassName = GetModelClassName(viewToNavigate, LformUserControlFolder);
#>
                    <MultiTrigger TargetType="ContentView">
                        <MultiTrigger.Conditions>
                            <BindingCondition Binding="{Binding BindingContext.<#= SelectedDetailsListItemPropertyName #>.<#= RegionPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}}" Value="<#= viewToNavigateClassName #><#= DetailRegionPropertyName #>"/>
                            <BindingCondition Binding="{Binding BindingContext.<#= IsDetailReadyPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}}" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ControlTemplate" Value="{StaticResource <#= viewToNavigateClassName #><#= TemplateViewSuffixPropertyName #>}" />
                    </MultiTrigger>
<#
                    } // the end of if (tmpSearchSchema != null) { ... }
                } // the end of if(isM2m) { ... }
                string detailViewClassName = GetModelClassName(detailView, LformUserControlFolder);
#>
                    <MultiTrigger TargetType="ContentView">
                        <MultiTrigger.Conditions>
                            <BindingCondition Binding="{Binding BindingContext.<#= SelectedDetailsListItemPropertyName #>.<#= RegionPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}}" Value="<#= detailViewClassName #><#= DetailRegionPropertyName #>"/>
                            <BindingCondition Binding="{Binding BindingContext.<#= IsDetailReadyPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}}" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ControlTemplate" Value="{StaticResource <#= detailViewClassName #><#= TemplateViewSuffixPropertyName #>}" />
                    </MultiTrigger>
<#
            } // foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) { ... }
        } // foreach(string detailViewName in detailViewNames) { ... }
    } // { ... }
#>
                    <MultiTrigger TargetType="ContentView">
                        <MultiTrigger.Conditions>
                            <BindingCondition Binding="{Binding BindingContext.<#= IsDetailReadyPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}}" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ControlTemplate" Value="{StaticResource NoMasterRowIsSelectedView}" />
                    </MultiTrigger>
            </ContentView.Triggers>
        </ContentView>
    </StackLayout>
  </ScrollView>
</ContentPage>



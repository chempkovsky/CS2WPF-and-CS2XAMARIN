<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>

<#

    string ProxyUserControlFolder           = "00280-ProxyUserControl.xaml.cs";
    string ProxyUserControlClassName        = GetContextModelClassName(Context, ProxyUserControlFolder);
    string ProxyUserControlNameSpace        = GetContextModelNameSpace(Context, ProxyUserControlFolder);
    string ProxyUserControlProject          = GetContextModelProjectName(Context, ProxyUserControlFolder);

    string LformUserControlFolder           = "01596-LformUserControl.xaml.cs";
    string LformUserControlClassName        = GetModelClassName(Model, LformUserControlFolder);
    string LformUserControlNameSpace        = GetModelNameSpace(Model, LformUserControlFolder);
    string LformUserControlProject          = GetModelProjectName(Model, LformUserControlFolder);
    
    string O2mPageFolder                    = "01697-O2mPage.xaml.cs";
    string O2mPageClassName                 = GetModelClassName(Model, O2mPageFolder);
    string O2mPageNameSpace                 = GetModelNameSpace(Model, O2mPageFolder);
    string O2mPageProject                   = GetModelProjectName(Model, O2mPageFolder);

    string O2mPageXamlFolder                = "01699-O2mPage.xaml";
    string O2mPageXamlClassName             = GetModelClassName(Model, O2mPageXamlFolder);
    string O2mPageXamlNameSpace             = GetModelNameSpace(Model, O2mPageXamlFolder);
    string O2mPageXamlProject               = GetModelProjectName(Model, O2mPageXamlFolder);


    string CaptionPropertyName              = "Caption";
    string FilterHeightPropertyName         = "FilterHeight";
    string ShowFilterPropertyName           = "ShowFilter";
    string ShowAddFilterBtnPropertyName     = "ShowAddFilterBtn";
    string ShowBackBtnPropertyName          = "ShowBackBtn";
    string GridHeightPropertyName           = "GridHeight";
    string TableMenuItemsPropertyName       = "TableMenuItems";
    string RowMenuItemsPropertyName         = "RowMenuItems";
    string ContainerMenuItemsPropertyName   = "ContainerMenuItems";
    string HiddenFiltersPropertyName        = "HiddenFilters";
    string SelectedRowCommandPropertyName   = "SelectedRowCommand";

    string SformAfterAddItemPropertyName    = "SformAfterAddItem";
    string SformAfterUpdItemPropertyName    = "SformAfterUpdItem";
    string SformAfterDelItemPropertyName    = "SformAfterDelItem";

    string TableMenuItemsCommandPropertyName    = "TableMenuItemsCommand";
    string RowMenuItemsCommandPropertyName      = "RowMenuItemsCommand";
    
    string CanAddPropertyName                   = "CanAdd";
    string CanUpdPropertyName                   = "CanUpdate";
    string CanDelPropertyName                   = "CanDelete";

    string CanAddDetailPropertyName                 = "CanAddDetail"; 
    string CanUpdDetailPropertyName                 = "CanUpdateDetail"; 
    string CanDelDetailPropertyName                 = "CanDeleteDetail"; 
    string TableMenuItemsDetailPropertyName         = "TableMenuItemsDetail"; 
    string RowMenuItemsDetailPropertyName           = "RowMenuItemsDetail"; 
    string TableMenuItemsCommandDetailPropertyName  = "TableMenuItemsCommandDetail";
    string RowMenuItemsCommandDetailPropertyName    = "RowMenuItemsCommandDetail";
    string SelectedRowCommandDetailPropertyName     = "SelectedRowCommandDetail";
    string HiddenFiltersDetailPropertyName          = "HiddenFiltersDetail"; 
    string GridHeightDetailPropertyName             = "GridHeightDetail"; 
    string FilterHeightDetailPropertyName           = "FilterHeightDetail"; 

   
    string RegionPropertyName                       = "Region";
    string MasterRegionPropertyName                 = "MasterRegion";
    string DetailRegionPropertyName                 = "DetailRegion";


    string DetailsListPropertyName                  = "DetailsList"; 
    string SelectedDetailsListItemPropertyName      = "SelectedDetailsListItem"; 
    string IsDetailReadyPropertyName                = "IsDetailReady"; 

    string TemplateViewSuffixPropertyName           = "TemplateView"; 

    string IsParentLoadedPropertyName               = "IsParentLoaded";
    string IsDestroyedPropertyName                  = "IsDestroyed";
    string IsSwitchingPropertyName                  = "IsSwitching";


    string proxyPrefix = "clr-namespace:" + ProxyUserControlNameSpace;
    if(ProxyUserControlProject != O2mPageProject) {
        proxyPrefix = proxyPrefix + ";assembly=" + ProxyUserControlProject;
    }
    string lformPrefix = "clr-namespace:" + LformUserControlNameSpace;
    if(LformUserControlProject != O2mPageProject) {
        lformPrefix = lformPrefix + ";assembly=" + LformUserControlProject;
    }

    bool IsInTheSameModule = (LformUserControlProject == O2mPageProject);

    List<string> detailViews = GetDetailViews(Model, Context, null);

#>

<ContentPage x:Class="<#= O2mPageNameSpace #>.<#= O2mPageClassName #>"
             xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com" 
             prism:ViewModelLocator.AutowireViewModel="True"

<#
    if(IsInTheSameModule) {
#>
             xmlns:lfrm="<#= lformPrefix #>" 
<#
    } else {
#>
             xmlns:prx="<#= proxyPrefix #>" 
<#
    }
#>

<#
    {
        int id = -1;
        foreach(string detailViewName in detailViews) {
            id++;
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
#>
<!--  can not find the view by Name <#= detailViewName #> -->
<#
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, LformUserControlFolder);
            if (string.IsNullOrEmpty(detailViewClassName)) {
                continue;
            }
            string localLformUserControlProject  = GetModelProjectName(detailView, LformUserControlFolder);
            if (localLformUserControlProject == O2mPageProject)
            {
                string locallformPrefix = "clr-namespace:" + GetModelNameSpace(detailView, LformUserControlFolder);
#>
             xmlns:lfrm<#= id #>="<#= locallformPrefix #>" 
<#
            }
        }
    }
#>


             x:Name="o2mUsrCntrlRootNode"
             >
  <ScrollView Orientation="Vertical" VerticalOptions="StartAndExpand">
    <StackLayout>
        <ActivityIndicator 
                IsVisible="{Binding BindingContext.<#= IsSwitchingPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}"
                IsRunning="{Binding BindingContext.<#= IsSwitchingPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}"/>
        <!-- <ProgressBar 
                         Progress="0.75"
                         IsVisible="{Binding BindingContext.<#= IsSwitchingPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}"/>-->

<#
    {
        int id = -1;
        foreach(string detailViewName in detailViews) {
            id++;
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            if(detailView == null) {
                continue;
            }
            string detailViewClassName = GetModelClassName(detailView, LformUserControlFolder);
            if (string.IsNullOrEmpty(detailViewClassName)) {
#>
<!--  can not find Lform User control for the view which named: <#= detailViewName #> -->
<#
                continue;
            }
        }
    }
#>


<#
    if(IsInTheSameModule) {
#>
        <lfrm:<#= LformUserControlClassName #>  
<#
    } else {
#>
        <prx:<#= ProxyUserControlClassName #> 
            prism:RegionManager.RegionName="<#= LformUserControlClassName #><#= MasterRegionPropertyName #>"
<#
    }
#>
            <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= CaptionPropertyName #>="{Binding BindingContext.<#= CaptionPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= FilterHeightPropertyName #>="{Binding BindingContext.<#= FilterHeightPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= ShowFilterPropertyName #>="True" 
            <#= ShowAddFilterBtnPropertyName #>="True" 
            <#= GridHeightPropertyName #>="{Binding BindingContext.<#= GridHeightPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= ShowBackBtnPropertyName #>="False" 
            <#= HiddenFiltersPropertyName #>="{Binding BindingContext.<#= HiddenFiltersPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= SelectedRowCommandPropertyName #>="{Binding BindingContext.<#= SelectedRowCommandPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= TableMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= TableMenuItemsCommandPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= RowMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= RowMenuItemsCommandPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= TableMenuItemsPropertyName #>="{Binding BindingContext.<#= TableMenuItemsPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= RowMenuItemsPropertyName #>="{Binding BindingContext.<#= RowMenuItemsPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= CanAddPropertyName #>="{Binding BindingContext.<#= CanAddPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= CanUpdPropertyName #>="{Binding BindingContext.<#= CanUpdPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= CanDelPropertyName #>="{Binding BindingContext.<#= CanDelPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            <#= IsParentLoadedPropertyName #>="{Binding BindingContext.<#= IsParentLoadedPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
            
            />

        <StackLayout>
            <Label Text="Selected detail"/>
            <Picker ItemsSource="{Binding BindingContext.<#= DetailsListPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                    ItemDisplayBinding="{Binding <#= CaptionPropertyName #>}" 
                    SelectedItem="{Binding BindingContext.<#= SelectedDetailsListItemPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}, Mode=TwoWay}">
            </Picker>
        </StackLayout>

        <ContentView ControlTemplate="{StaticResource NoMasterRowIsSelectedView}">
            <ContentView.Resources>
                <ResourceDictionary>
                    <ControlTemplate x:Key="NoMasterRowIsSelectedView">
                            <Label Text="Master row not selected or access denied for detail" />
                    </ControlTemplate> 
<#
    {
        int id = -1;
        foreach(string detailViewName in detailViews) {
            id++;
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            string detailViewClassName = GetModelClassName(detailView, LformUserControlFolder);
            if(detailView == null) {
#>
<!--  can not find the view by Name <#= detailViewName #> -->
<#
                continue;
            }
            string localDetailViewClassName = GetModelClassName(detailView, LformUserControlFolder);
            if (string.IsNullOrEmpty(localDetailViewClassName)) {
#>
<!--  can not find Lform User control for the view which named: <#= detailViewName #> -->
<#
                continue;
            }

            string localLformUserControlProject  = GetModelProjectName(detailView, LformUserControlFolder);
#>
                    <ControlTemplate x:Key="<#= detailViewClassName #><#= TemplateViewSuffixPropertyName #>">
<#

            if (localLformUserControlProject == O2mPageProject)
            {
#>
                        <lfrm<#= id #>:<#= GetModelClassName(detailView, LformUserControlFolder) #> 
<#
            } else {
            // reset RegionPropertyName
#>
                        <prx:<#= ProxyUserControlClassName #> 
                            prism:RegionManager.RegionName="<#= detailViewClassName #><#= DetailRegionPropertyName #>"
<#
            }
#>
                            <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CaptionPropertyName #>="{Binding BindingContext.<#= SelectedDetailsListItemPropertyName #>.<#= CaptionPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= FilterHeightPropertyName #>="{Binding BindingContext.<#= FilterHeightDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= ShowFilterPropertyName #>="True" 
                            <#= ShowAddFilterBtnPropertyName #>="True" 
                            <#= GridHeightPropertyName #>="{Binding BindingContext.<#= GridHeightDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= ShowBackBtnPropertyName #>="False" 
                            <#= HiddenFiltersPropertyName #>="{Binding BindingContext.<#= HiddenFiltersDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= SelectedRowCommandPropertyName #>="{Binding BindingContext.<#= SelectedRowCommandDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= TableMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= TableMenuItemsCommandDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= RowMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= RowMenuItemsCommandDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= TableMenuItemsPropertyName #>="{Binding BindingContext.<#= TableMenuItemsDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= RowMenuItemsPropertyName #>="{Binding BindingContext.<#= RowMenuItemsDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CanAddPropertyName #>="{Binding BindingContext.<#= CanAddDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CanUpdPropertyName #>="{Binding BindingContext.<#= CanUpdDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= CanDelPropertyName #>="{Binding BindingContext.<#= CanDelDetailPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            <#= IsParentLoadedPropertyName #>="{Binding BindingContext.<#= IsDetailReadyPropertyName #>, Mode=OneWay, Source={x:Reference o2mUsrCntrlRootNode}}" 
                            />
                    </ControlTemplate>

<#
        }
    }
#>
                </ResourceDictionary>
            </ContentView.Resources>
            <ContentView.Triggers>
<#
    {
        int id = -1;
        foreach(string detailViewName in detailViews) {
            id++;
            ModelViewSerializable detailView = GetModelViewByName(Context, detailViewName);
            string detailViewClassName = GetModelClassName(detailView, LformUserControlFolder);
            if(detailView == null) {
#>
<!--  can not find the view by Name <#= detailViewName #> -->
<#
                continue;
            }
            string localDetailViewClassName = GetModelClassName(detailView, LformUserControlFolder);
            if (string.IsNullOrEmpty(localDetailViewClassName)) {
#>
<!--  can not find Lform User control for the view which named: <#= detailViewName #> -->
<#
                continue;
            }

            string localLformUserControlProject  = GetModelProjectName(detailView, LformUserControlFolder);
#>
                    <MultiTrigger TargetType="ContentView">
                        <MultiTrigger.Conditions>
                            <BindingCondition Binding="{Binding BindingContext.<#= SelectedDetailsListItemPropertyName #>.<#= RegionPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}}" Value="<#= detailViewClassName #><#= DetailRegionPropertyName #>"/>
                            <BindingCondition Binding="{Binding BindingContext.<#= IsDetailReadyPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}}" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ControlTemplate" Value="{StaticResource <#= detailViewClassName #><#= TemplateViewSuffixPropertyName #>}" />
                    </MultiTrigger>
<#
        }
    }
#>
                    <MultiTrigger TargetType="ContentView">
                        <MultiTrigger.Conditions>
                            <BindingCondition Binding="{Binding BindingContext.<#= IsDetailReadyPropertyName #>, Source={x:Reference o2mUsrCntrlRootNode}}" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ControlTemplate" Value="{StaticResource NoMasterRowIsSelectedView}" />
                    </MultiTrigger>
            </ContentView.Triggers>
        </ContentView>
    </StackLayout>
  </ScrollView>
</ContentPage>


<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelProjectName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    bool IsBooleanInput(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return"System.Boolean".Equals(sclrProp.UnderlyingTypeName) || "Boolean".Equals(sclrProp.UnderlyingTypeName) || "bool".Equals(sclrProp.UnderlyingTypeName);
    }
    bool hasSortHeader(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if ((model == null) || (modelViewUIListPropertySerializable == null)) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        return model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting);
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetModelPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    string GetModelPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetModelPropertyName(sclrProp, model);
    }
    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }
    List<string> GetDetailViews(ModelViewSerializable model, DbContextSerializable context, List<string> result)
    {
        if (result == null)
        {
            result = new List<string>();
        }
        if ((model == null) || (context == null))
        {
            return result;
        }
        if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (context.ModelViews == null)) {
            return result;
        }
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
        {
            return result;
        }
        List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
        if(primKeys == null)
        {
            return result;
        }
        if (primKeys.Count != model.PrimaryKeyProperties.Count)
        {
            return result;
        }
        string RootEntityFullClassName = model.RootEntityFullClassName;
        string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
        List<ModelViewSerializable> details =
            context.ModelViews.Where(m => m.ForeignKeys.Any(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName))).ToList();
        if(details.Count < 1)
        {
            return result;
        }
        foreach(ModelViewSerializable detail in details)
        {
            if (detail.ScalarProperties == null) continue;
            if (detail.ForeignKeys == null) continue;
            if (detail.ForeignKeys.Count < 1) continue;
            List<ModelViewForeignKeySerializable> ForeignKeys =
                detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
            if (ForeignKeys.Count < 1) continue;
            bool canBeUsed = false;
            foreach(ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
            {
                bool hasForeignKeyProps = true;
                if (ForeignKey.ForeignKeyProps != null)
                {
                    for(int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                    {
                        ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                        if (!(detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)))))
                        {
                            hasForeignKeyProps = false;
                        }
                        if(!hasForeignKeyProps)
                        {
                            ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                            if (detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName)))
                            {
                                hasForeignKeyProps = true;
                            } else
                            {
                                break;
                            }
                        }
                    }
                } else
                {
                    hasForeignKeyProps = false;
                }
                if (hasForeignKeyProps)
                {
                    canBeUsed = true;
                    break;
                }
            }
            if(canBeUsed)
            {
                if(!result.Contains(detail.ViewName))
                {
                    result.Add(detail.ViewName);
                }
            }
        }
        return result;
    }
    ModelViewSerializable GetModelViewByName(DbContextSerializable context, string viewName) {
        if ((context == null) || (string.IsNullOrEmpty(viewName))) {
            return null;
        }
        if (context.ModelViews == null) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
    }

#>

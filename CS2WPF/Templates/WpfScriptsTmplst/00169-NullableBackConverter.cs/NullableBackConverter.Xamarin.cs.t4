<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System;
using Xamarin.Forms;
<#

    string NullableBackConverterFolder      = "00169-NullableBackConverter.cs";
    string NullableBackConverterClassName   = GetModelClassName(Model, NullableBackConverterFolder);
    string NullableBackConverterNameSpace   = GetModelNameSpace(Model, NullableBackConverterFolder);
    
#>

namespace <#= NullableBackConverterNameSpace #> {

    public class <#= NullableBackConverterClassName #>: IValueConverter
    {
        #region IValueConverter Members
        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            return value;
        }
        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {

            if (value == null || String.IsNullOrWhiteSpace(value.ToString())) return null;
            string strval = value.ToString();
            string typeName = parameter as string;
            if(string.IsNullOrEmpty(typeName))
                throw new InvalidOperationException("Converter parameter is a required");
            typeName = typeName.ToLower().Replace("system.", "");
            if (string.IsNullOrEmpty(typeName))
                throw new InvalidOperationException("Converter parameter is required");
            switch (typeName)
            {
                case "int16":
                    {
                        Int16 v;
                        if (Int16.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "int":
                case "int32":
                    {
                        Int32 v;
                        if (Int32.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "int64":
                    {
                        Int64 v;
                        if (Int64.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "uint16":
                    {
                        UInt16 v;
                        if (UInt16.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "uint32":
                    {
                        UInt32 v;
                        if (UInt32.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "uint64":
                    {
                        UInt64 v;
                        if (UInt64.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "double":
                    {
                        Double v;
                        if (Double.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "decimal":
                    {
                        Decimal v;
                        if (Decimal.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "float":
                case "single":
                    {
                        Single v;
                        if (Single.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "date":
                case "datetime":
                    {
                        DateTime v;
                        if (DateTime.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "datetimeoffset":
                    {
                        DateTimeOffset v;
                        if (DateTimeOffset.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "boolean":
                    {
                        Boolean v;
                        if (Boolean.TryParse(strval, out v))
                            return v;
                    }
                    break;
                case "string":
                    return strval;
                case "guid":
                    {
                        Guid v;
                        if (Guid.TryParse(strval, out v))
                            return v;
                    }
                    break;
                default:
                    throw new InvalidOperationException("Unknown typename of converter parameter");
            }
            return null;
        }
        #endregion
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>
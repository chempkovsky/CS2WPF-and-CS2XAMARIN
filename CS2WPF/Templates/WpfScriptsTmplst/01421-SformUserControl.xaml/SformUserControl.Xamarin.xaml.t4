<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>

<#

    string InverseBooleanConverterFolder     = "00170-InverseBooleanConverter.cs";
    string InverseBooleanConverterClassName  = GetContextModelClassName(Context, InverseBooleanConverterFolder);
    string InverseBooleanConverterNameSpace  = GetContextModelNameSpace(Context, InverseBooleanConverterFolder);
    string InverseBooleanConverterProject    = GetContextModelProjectName(Context, InverseBooleanConverterFolder);

    string InternalContentChangedFolder     = "00102-InternalContentChanged.cs";
    string InternalContentChangedClassName  = GetContextModelClassName(Context, InternalContentChangedFolder);
    string InternalContentChangedNameSpace  = GetContextModelNameSpace(Context, InternalContentChangedFolder);
    string InternalContentChangedProject    = GetContextModelProjectName(Context, InternalContentChangedFolder);

    string MaxScrollViewHeightFolder        = "00104-MaxScrollViewHeight.cs";
    string MaxScrollViewHeightClassName     = GetContextModelClassName(Context, MaxScrollViewHeightFolder);
    string MaxScrollViewHeightNameSpace     = GetContextModelNameSpace(Context, MaxScrollViewHeightFolder);
    string MaxScrollViewHeightProject       = GetContextModelProjectName(Context, MaxScrollViewHeightFolder);

    string IconFontFolder      = "00178-IconFont.cs";
    string IconFontClassName   = GetContextModelClassName(Context, IconFontFolder);
    string IconFontNameSpace   = GetContextModelNameSpace(Context, IconFontFolder);
    string IconFontNameProject = GetContextModelProjectName(Context, IconFontFolder);

    string ButtonDestroyedFolder        = "00188-ButtonDestroyed.cs";
    string ButtonDestroyedClassName     = GetContextModelClassName(Context, ButtonDestroyedFolder);
    string ButtonDestroyedNameSpace     = GetContextModelNameSpace(Context, ButtonDestroyedFolder);
    string ButtonDestroyedProject       = GetContextModelProjectName(Context, ButtonDestroyedFolder);

    string RadioDestroyedFolder         = "00190-RadioDestroyed.cs";
    string RadioDestroyedlassName       = GetContextModelClassName(Context, RadioDestroyedFolder);
    string RadioDestroyedNameSpace      = GetContextModelNameSpace(Context, RadioDestroyedFolder);
    string RadioDestroyedProject        = GetContextModelProjectName(Context, RadioDestroyedFolder);

    string WebServiceFilterUserControlFolder      = "00242-WebServiceFilterUserControl.xaml.cs";
    string WebServiceFilterUserControlClassName   = GetContextModelClassName(Context, WebServiceFilterUserControlFolder);
    string WebServiceFilterUserControlNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterUserControlFolder);
    string WebServiceFilterUserControlProject     = GetContextModelProjectName(Context, WebServiceFilterUserControlFolder);

    string TablePaginationUserControlFolder      = "00252-TablePaginationUserControl.xaml.cs";
    string TablePaginationUserControlClassName   = GetContextModelClassName(Context, TablePaginationUserControlFolder);
    string TablePaginationUserControlNameSpace   = GetContextModelNameSpace(Context, TablePaginationUserControlFolder);
    string TablePaginationUserControlProject     = GetContextModelProjectName(Context, TablePaginationUserControlFolder);

    string SformUserControlBaseFolder      = "00630-SformUserControlBase.xaml.cs";
    string SformUserControlBaseClassName   = GetContextModelClassName(Context, SformUserControlBaseFolder);
    string SformUserControlBaseNameSpace   = GetContextModelNameSpace(Context, SformUserControlBaseFolder);
    string SformUserControlBaseProject     = GetContextModelProjectName(Context, SformUserControlBaseFolder);

    string SformUserControlFolder           = "01420-SformUserControl.xaml.cs";
    string SformUserControlClassName        = GetModelClassName(Model, SformUserControlFolder);
    string SformUserControlNameSpace        = GetModelNameSpace(Model, SformUserControlFolder);
    string SformUserControlProject          = GetModelProjectName(Model, SformUserControlFolder);




    string SformUserControlXamlFolder      = "01421-SformUserControl.xaml";
    string SformUserControlXamlClassName   = GetModelClassName(Model, SformUserControlXamlFolder);
    string SformUserControlXamlNameSpace   = GetModelNameSpace(Model, SformUserControlXamlFolder);
    string SformUserControlXamlProject     = GetModelProjectName(Model, SformUserControlXamlFolder);
    


    string CaptionPropertyName = "Caption";
    string ShowFilterPropertyName = "ShowFilter";
    string FilterHeightPropertyName = "FilterHeight";
    string HiddenFiltersPropertyName = "HiddenFilters";
    string HiddenFiltersVMPropertyName = "HiddenFiltersVM"; // correct:  to exclude HResult=0x800703E9 System.StackOverflowException
    string FiltersPropertyName = "Filters";
    string FilterOperatorsPropertyName = "FilterOperators";
    string FilterDefinitionsPropertyName = "FilterDefinitions";
    string ShowAddFilterBtnPropertyName = "ShowAddFilterBtn";

    string ShowBackBtnPropertyName = "ShowBackBtn";
    string NavigationBackCommandPropertyName = "NavigationBackCommand";
    string OnNavigationBackCommandPropertyName = "OnNavigationBackCommand";


    string ContainerMenuItemsPropertyName = "ContainerMenuItems";
    string ContainerMenuItemsCommandPropertyName = "ContainerMenuItemsCommand";
    string OnContainerMenuItemsCommandPropertyName = "OnContainerMenuItemsCommand";

    string IsInQueryPropertyName = "IsInQuery";
    string SelectedColumnsPropertyName = "SelectedColumns";

    string ApplyFilterCommandPropertyName = "ApplyFilterCommand";
    string FilterCommandPropertyName = "FilterCommand";


    string RowsPerPageOptionsPropertyName = "RowsPerPageOptions";
    string TotalCountPropertyName = "TotalCount";

    string CurrentSortInfoPropertyName = "CurrentSortInfo";
    string OnSortCommandPropertyName = "OnSortCommand";

    string OnLoadedCommandPropertyName = "OnLoadedCommand";

    string RegisterRoutedCommandBindingsPropertyName = "RegisterRoutedCommandBindings";
    string RegisterRoutedEventBindingsPropertyName = "RegisterRoutedEventBindings";
    string DataGridServerSortingPropertyName = "DataGridServerSorting";
    string RoutedCommandHandlersPropertyName = "RoutedCommandHandlers";
    string RoutedEventHandlersPropertyName = "RoutedEventHandlers";
    string DataSourcePropertyName = "DataSource";
    string ShortNameLabelProperty   = "ShortName";
    string RowMenuItemsPropertyName = "RowMenuItems";
    string RowMenuItemsVMPropertyName = "RowMenuItemsVM";
    string RowMenuItemsCommandPropertyName = "RowMenuItemsCommand";

    string TableMenuItemsPropertyName = "TableMenuItems";
    string TableMenuItemsVMPropertyName = "TableMenuItemsVM";
    string TableMenuItemsCommandPropertyName = "TableMenuItemsCommand";

    string CurrentPagePropertyName = "CurrentPage";
    string CurrentPageChangedCommandPropertyName="CurrentPageChangedCommand";
    string OnCurrentPageChangedCommandPropertyName="OnCurrentPageChangedCommand";

    string RowsPerPagePropertyName = "RowsPerPage";
    string RowsPerPageChangedCommandPropertyName="RowsPerPageChangedCommand";
    string OnRowsPerPageChangedCommandPropertyName="OnRowsPerPageChangedCommand";

    string GridHeightPropertyName = "GridHeight";
    string FontFamilyPropertyName = "CustomIconFontAlias";

    string SelectedRowPropertyName="SelectedRow";
    string BindingContextFeedbackRefPropertyName = "BindingContextFeedbackRef";

    string RadioGroupNamePropertyName        = "RadioGroupName";

    string InternalContentProperty           = "InternalContent";
    string MaxHeightProperty                 = "MaxHeight";

    string IsDestroyedPropertyName = "IsDestroyed";
    string OnDestroyedPropertyName = "OnDestroyed";
    string IsDsDestroyedPropertyName = "IsDsDestroyed";
    

    string wsfucPrefix = "clr-namespace:" + WebServiceFilterUserControlNameSpace;
    if(SformUserControlProject != WebServiceFilterUserControlProject) {
        wsfucPrefix = wsfucPrefix + ";assembly=" + WebServiceFilterUserControlProject;
    }
    string tpgnucPrefix = "clr-namespace:" + TablePaginationUserControlNameSpace;
    if(SformUserControlProject != TablePaginationUserControlProject) {
        tpgnucPrefix = tpgnucPrefix + ";assembly=" + TablePaginationUserControlProject;
    }
    string invboolcnvPrefix = "clr-namespace:" + InverseBooleanConverterNameSpace;
    if(SformUserControlProject != InverseBooleanConverterProject) {
        invboolcnvPrefix = invboolcnvPrefix + ";assembly=" + InverseBooleanConverterProject;
    }
    string IconFontPrefix = "clr-namespace:" + IconFontNameSpace;
    if(SformUserControlProject != IconFontNameProject) {
        IconFontPrefix = IconFontPrefix + ";assembly=" + IconFontNameProject;
    }
    string sfrmBasePrefix = "clr-namespace:" + SformUserControlBaseNameSpace;
    if(SformUserControlProject != SformUserControlBaseProject) {
        sfrmBasePrefix = sfrmBasePrefix + ";assembly=" + SformUserControlBaseProject;
    }
    string InternalContentPrefix = "clr-namespace:" + InternalContentChangedNameSpace;
    if(SformUserControlProject != InternalContentChangedProject) {
        InternalContentPrefix = InternalContentPrefix + ";assembly=" + InternalContentChangedProject;
    }
    string MaxScrollViewHeightPrefix = "clr-namespace:" + MaxScrollViewHeightNameSpace;
    if(SformUserControlProject != MaxScrollViewHeightProject) {
        MaxScrollViewHeightPrefix = MaxScrollViewHeightPrefix + ";assembly=" + MaxScrollViewHeightProject;
    }
    string ButtonDestroyedPrefix = "clr-namespace:" + ButtonDestroyedNameSpace;
    if(SformUserControlProject != ButtonDestroyedProject) {
        ButtonDestroyedPrefix = ButtonDestroyedPrefix + ";assembly=" + ButtonDestroyedProject;
    }
    string RadioDestroyedPrefix = "clr-namespace:" + RadioDestroyedNameSpace;
    if(SformUserControlProject != RadioDestroyedProject) {
        RadioDestroyedPrefix = ButtonDestroyedPrefix + ";assembly=" + RadioDestroyedProject;
    }
    
#>

<sfrmbs:<#= SformUserControlBaseClassName #> 
             x:Class="<#= SformUserControlNameSpace #>.<#= SformUserControlClassName #>"
             xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Name="sformUsrCntrlRootNode"

             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"

             xmlns:sfrmbs="<#= sfrmBasePrefix #>" 
             xmlns:wsfuc="<#= wsfucPrefix #>" 
             xmlns:fontIcons="<#= IconFontPrefix #>"
             xmlns:tpgnuc="<#= tpgnucPrefix #>" 
             xmlns:invboolcnv="<#= invboolcnvPrefix #>"
             xmlns:intcntxt="<#= InternalContentPrefix #>"
             xmlns:maxscrlvw="<#= MaxScrollViewHeightPrefix #>"
             xmlns:btnDstr="<#= ButtonDestroyedPrefix #>"
             xmlns:rdoDstr="<#= RadioDestroyedPrefix #>"

             <#= BindingContextFeedbackRefPropertyName #>="{Binding BindingContext.<#= BindingContextFeedbackRefPropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}"
            >
    <sfrmbs:<#= SformUserControlBaseClassName #>.Resources>
        <invboolcnv:<#= InverseBooleanConverterClassName #> x:Key="<#= InverseBooleanConverterClassName #>"/>
    </sfrmbs:<#= SformUserControlBaseClassName #>.Resources>
    <ScrollView Orientation="Vertical" VerticalOptions="FillAndExpand">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <wsfuc:<#= WebServiceFilterUserControlClassName #> Grid.Row="0" 
                <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                IsVisible="{Binding <#= ShowFilterPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                IsEnabled="{Binding BindingContext.<#= IsInQueryPropertyName #>, Mode=OneWay, Converter={StaticResource <#= InverseBooleanConverterClassName #>}, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= CaptionPropertyName #>="{Binding <#= CaptionPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= ShowBackBtnPropertyName #>="{Binding <#= ShowBackBtnPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= ShowAddFilterBtnPropertyName #>="{Binding <#= ShowAddFilterBtnPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= HiddenFiltersPropertyName #>="{Binding BindingContext.<#= HiddenFiltersVMPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= FilterDefinitionsPropertyName #>="{Binding BindingContext.<#= FilterDefinitionsPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= ContainerMenuItemsPropertyName #>="{Binding <#= ContainerMenuItemsPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= FilterHeightPropertyName #>="{Binding <#= FilterHeightPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= ContainerMenuItemsCommandPropertyName #>="{Binding <#= OnContainerMenuItemsCommandPropertyName #>, Mode=OneTime, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= NavigationBackCommandPropertyName #>="{Binding <#= OnNavigationBackCommandPropertyName #>, Mode=OneTime, Source={x:Reference sformUsrCntrlRootNode}}"   
                <#= FilterCommandPropertyName #>="{Binding BindingContext.<#= ApplyFilterCommandPropertyName #>, Mode=OneTime, Source={x:Reference sformUsrCntrlRootNode} }"
                />
<!--
            FilterOperators="{Binding FilterOperators, Source={x:Reference sformUsrCntrlRootNode}}"
-->
            <ActivityIndicator Grid.Row="1" IsVisible="{Binding BindingContext.IsInQuery, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                IsRunning="{Binding BindingContext.IsInQuery, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"/>

            <ScrollView Orientation="Horizontal" Grid.Row="2" 
                    intcntxt:<#= InternalContentChangedClassName #>.<#= InternalContentProperty #>="{Binding BindingContext.<#= InternalContentProperty #>, Source={x:Reference sformUsrCntrlRootNode}}"
                    maxscrlvw:<#= MaxScrollViewHeightClassName #>.<#= MaxHeightProperty #>="{Binding <#= GridHeightPropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}">
                <StackLayout   Orientation="Vertical"   Margin="0, 0, 0, 12" Spacing="0">
                    <FlexLayout Direction="Row"  HorizontalOptions="StartAndExpand" JustifyContent="Start" BackgroundColor="{DynamicResource DataGridHeaderBackGroundColor}" >
                        <Frame  OutlineColor="{DynamicResource DataGridLineColor}" BackgroundColor="{DynamicResource DataGridHeaderBackGroundColor}"
                                Padding="2, 2, 2, 2" FlexLayout.Basis="64" CornerRadius="0" >
                            <Button Text="{x:Static fontIcons:<#= IconFontClassName #>.More_vert}" FontFamily="<#= FontFamilyPropertyName #>" BackgroundColor="Transparent" 
                                Command="{Binding BindingContext.<#= TableMenuItemsCommandPropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}"/>
                        </Frame>
<#
    {
        int cntr= 0; 
    foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in Model.UIListProperties) {
        if (!modelViewUIListPropertySerializable.IsShownInView) {
            continue;
        }
        bool IsSortable= hasSortHeader(modelViewUIListPropertySerializable, Model);
        int FlexLayoutBasis = GetGridColumnWidth(modelViewUIListPropertySerializable, Model);
        string headercolor= "";
#>
                        <Frame OutlineColor="{DynamicResource DataGridLineColor}" BackgroundColor="{DynamicResource DataGridHeaderBackGroundColor}"
                            Padding="8, 8, 2, 2" CornerRadius="0"
                            IsVisible="{Binding BindingContext.<#= SelectedColumnsPropertyName #>[<#= cntr #>].IsChecked, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                            FlexLayout.Basis="<#= FlexLayoutBasis #>" >
<#
            if (IsSortable) { 
#>
                            <StackLayout Orientation="Horizontal">
                                <Label TextColor="{DynamicResource DataGridHeaderTextColor}"
                                    Text="<#= GetDisplayAttributeValueString2(modelViewUIListPropertySerializable, Model, ShortNameLabelProperty) #>" />
                                <Label Text="" FontFamily="CustomIconFontAlias" >
                                    <Label.Triggers>
                                        <DataTrigger TargetType="Label" Binding="{Binding BindingContext.<#= CurrentSortInfoPropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}" Value="<#= GetModelPropertyNameEx2(modelViewUIListPropertySerializable, Model) #> asc">
                                            <Setter Property="Text" Value="{x:Static fontIcons:IconFont.Expand_less}"/>
                                        </DataTrigger>
                                        <DataTrigger TargetType="Label" Binding="{Binding BindingContext.<#= CurrentSortInfoPropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}" Value="<#= GetModelPropertyNameEx2(modelViewUIListPropertySerializable, Model) #> desc">
                                            <Setter Property="Text" Value="{x:Static fontIcons:IconFont.Expand_more}"/>
                                        </DataTrigger>
                                    </Label.Triggers>
                                </Label>
                            </StackLayout>
                            <Frame.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding BindingContext.<#= OnSortCommandPropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}" CommandParameter="<#= GetModelPropertyNameEx2(modelViewUIListPropertySerializable, Model) #>"/>
                            </Frame.GestureRecognizers>
<#
            } else {
#>
                            <Label TextColor="{DynamicResource DataGridHeaderTextColor}"
                                Text="<#= GetDisplayAttributeValueString2(modelViewUIListPropertySerializable, Model, ShortNameLabelProperty) #>" />
<#
            }
#>
                        </Frame>
<#
        cntr++;
    }
    }
#>
                    </FlexLayout>
                    <ScrollView Orientation="Vertical" Margin="0">
                        <StackLayout RadioButtonGroup.SelectedValue="{Binding BindingContext.<#= SelectedRowPropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}" RadioButtonGroup.GroupName="{Binding <#= RadioGroupNamePropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}"
                            BindableLayout.ItemsSource="{Binding BindingContext.<#= DataSourcePropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}" Spacing="0" BackgroundColor="{DynamicResource DataGridBodyBackgroundColor}" >
                            <BindableLayout.ItemTemplate>
                                <DataTemplate>
                                    <FlexLayout   Direction="Row"   HorizontalOptions="StartAndExpand" JustifyContent="Start">
                                        <Frame OutlineColor="{DynamicResource DataGridLineColor}" BackgroundColor="{DynamicResource DataGridBodyBackgroundColor}"
                                            
                                            Padding="2, 0, 2, 0" FlexLayout.Basis="64" CornerRadius="0" >
                                            <StackLayout Orientation="Horizontal" Spacing="0">
                                                <rdoDstr:<#= RadioDestroyedlassName #> WidthRequest="20" Value="{Binding .}"/>
<!-- Command and CommandParameter are cleared automatically without <#= ButtonDestroyedClassName #>. BindingContext plays its role here. -->
                                                <btnDstr:<#= ButtonDestroyedClassName #> WidthRequest="45"
                                                        <#= IsDestroyedPropertyName #>="{Binding BindingContext.<#= IsDsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}" 

                                                        Text="{x:Static fontIcons:IconFont.More_vert}" FontFamily="CustomIconFontAlias" BackgroundColor="Transparent" 
                                                        Command="{Binding BindingContext.<#= RowMenuItemsCommandPropertyName #>, Source={x:Reference sformUsrCntrlRootNode}}" CommandParameter="{Binding .}"/>
                                            </StackLayout>
                                        </Frame>
<#
    {
        int cntr= 0; 
    foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in Model.UIListProperties) {
        if (!modelViewUIListPropertySerializable.IsShownInView) {
            continue;
        }
        int FlexLayoutBasis = GetGridColumnWidth(modelViewUIListPropertySerializable, Model);
        if (IsBooleanInput(modelViewUIListPropertySerializable, Model)) {
#>
                                        <Frame OutlineColor="{DynamicResource DataGridLineColor}" BackgroundColor="{DynamicResource DataGridBodyBackgroundColor}"
                                            Padding="8, 0, 2, 0" CornerRadius="0" 
                                            IsVisible="{Binding BindingContext.<#= SelectedColumnsPropertyName #>[<#= cntr #>].IsChecked, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                                            FlexLayout.Basis="<#= FlexLayoutBasis #>">
                                            <CheckBox IsChecked="{Binding <#= GetModelPropertyNameEx2(modelViewUIListPropertySerializable, Model) #>}"  IsEnabled="False"/>
                                        </Frame>
<#
        } else {
#>
                                        <Frame OutlineColor="{DynamicResource DataGridLineColor}" BackgroundColor="{DynamicResource DataGridBodyBackgroundColor}"
                                            Padding="8, 0, 2, 0" CornerRadius="0"  
                                            IsVisible="{Binding BindingContext.<#= SelectedColumnsPropertyName #>[<#= cntr #>].IsChecked, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                                            FlexLayout.Basis="<#= FlexLayoutBasis #>">
                                            <Label  TextColor="{DynamicResource DataGridBodyTextColor}"
<#
                if (IsDateInput(modelViewUIListPropertySerializable, Model)) { 
#>
                                                Text="{Binding <#= GetModelPropertyNameEx2(modelViewUIListPropertySerializable, Model) #>, StringFormat='{0:d}'}" 
<#
                } else if (IsCurrencyInput(modelViewUIListPropertySerializable, Model)) {
#>
                                                Text="{Binding <#= GetModelPropertyNameEx2(modelViewUIListPropertySerializable, Model) #>, StringFormat='{0:C2}'}" 
<#
                } else {
#>
                                                Text="{Binding <#= GetModelPropertyNameEx2(modelViewUIListPropertySerializable, Model) #>}" 
<#
                }
#>
                                                />
                                        </Frame>
<#
        }
        cntr++;
    }
    }
#>
                                    </FlexLayout>
                                </DataTemplate>
                            </BindableLayout.ItemTemplate>
                        </StackLayout>
                    </ScrollView>
                </StackLayout>
            </ScrollView>


            <tpgnuc:<#= TablePaginationUserControlClassName #> Grid.Row="3"
                <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= TotalCountPropertyName #>="{Binding BindingContext.<#= TotalCountPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= CurrentPagePropertyName #>="{Binding BindingContext.<#= CurrentPagePropertyName #>, Mode=TwoWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= RowsPerPagePropertyName #>="{Binding BindingContext.<#= RowsPerPagePropertyName #>, Mode=TwoWay, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= RowsPerPageOptionsPropertyName #>="{Binding BindingContext.<#= RowsPerPageOptionsPropertyName #>, Mode=OneWay, Source={x:Reference sformUsrCntrlRootNode}}"
                IsEnabled="{Binding BindingContext.<#= IsInQueryPropertyName #>, Mode=OneWay,  Converter={StaticResource <#= InverseBooleanConverterClassName #>}, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= CurrentPageChangedCommandPropertyName #>="{Binding BindingContext.<#= OnCurrentPageChangedCommandPropertyName #>, Mode=OneTime, Source={x:Reference sformUsrCntrlRootNode}}"
                <#= RowsPerPageChangedCommandPropertyName #>="{Binding BindingContext.<#= OnRowsPerPageChangedCommandPropertyName #>, Mode=OneTime, Source={x:Reference sformUsrCntrlRootNode}}"
                />
        </Grid>
    </ScrollView>
</sfrmbs:<#= SformUserControlBaseClassName #>>



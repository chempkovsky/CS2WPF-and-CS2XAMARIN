<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>

<#

    string IUniqServiceFilterDefInterfaceFolder      = "00246-IUniqServiceFilterDefInterface.cs";
    string IUniqServiceFilterDefInterfaceClassName   = GetModelClassName(Model, IUniqServiceFilterDefInterfaceFolder);
    string IUniqServiceFilterDefInterfaceNameSpace   = GetModelNameSpace(Model, IUniqServiceFilterDefInterfaceFolder);


    string UniqServiceFilterDefFolder      = "00247-UniqServiceFilterDef.cs";
    string UniqServiceFilterDefClassName   = GetModelClassName(Model, UniqServiceFilterDefFolder);
    string UniqServiceFilterDefNameSpace   = GetModelNameSpace(Model, UniqServiceFilterDefFolder);
    
#>

<# 
    if(IUniqServiceFilterDefInterfaceNameSpace != UniqServiceFilterDefNameSpace) { 
#>
using <#= IUniqServiceFilterDefInterfaceNameSpace #>;
<#
    }
#>

namespace <#= UniqServiceFilterDefNameSpace #> {
    public class <#= UniqServiceFilterDefClassName #>: <#= IUniqServiceFilterDefInterfaceClassName #>
    {
        public string  fltrName { get; set; }
        public string  fltrDispMemb { get; set; }
        public string  fltrTextMemb { get; set; }
        public string  fltrCaption { get; set; }
        public string  fltrDataType { get; set; }
        public int?    fltrMaxLen { get; set; }
        public object  fltrMin { get; set; }
        public object  fltrMax { get; set; }
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>
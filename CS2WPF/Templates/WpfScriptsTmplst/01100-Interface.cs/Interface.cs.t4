<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using System.ComponentModel.DataAnnotations;
<# if(Model.GenerateJSonAttribute) { #>
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
<# } #>
<#

    string modelInterfaceFolder      = "01100-Interface.cs";
    string modelInterfaceClassName   = GetInterfaceName(Model);
    string modelInterfaceNameSpace   = GetModelNameSpace(Model, modelInterfaceFolder);
    
#>

namespace <#= modelInterfaceNameSpace #> {
    public interface <#= modelInterfaceClassName #>
    {
<#
        foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(Model.GenerateJSonAttribute) { 
#>
        [JsonProperty(PropertyName = "<#= prop.JsonPropertyName #>")]
<# 
            } 
            if (prop.IsRequiredInView) {
#>
        [Required]
<# 
            }
            if(prop.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in prop.Attributes) {
                    if ("Required".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("DatabaseGenerated".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Key".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("ForeignKey".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Column".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Index".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("NotMapped".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("InverseProperty".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                
                
#>
        <#= AttribToString(a) #>
<#
                }
            }
#>
        <#= GetPropertyTypeName(prop) #>  <#= GetModelPropertyName(prop, Model) #> { get; set; }

<# 
       } 
#>
    }
}


<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
using Xamarin.Forms;
using System.Collections;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Linq;
using Prism.Mvvm;
using Prism.Services.Dialogs;
using System.Threading.Tasks;
using Xamarin.Essentials;
using Prism.Navigation;
<#
    string IAppGlblSettingsServiceFolder      = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName   = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace   = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string BindingContextFeedbackFolder      = "00166-BindingContextFeedback.cs";
    string BindingContextFeedbackClassName   = GetContextModelClassName(Context, BindingContextFeedbackFolder);
    string BindingContextFeedbackNameSpace   = GetContextModelNameSpace(Context, BindingContextFeedbackFolder);


    string IconFontFolder      = "00178-IconFont.cs";
    string IconFontClassName   = GetContextModelClassName(Context, IconFontFolder);
    string IconFontNameSpace   = GetContextModelNameSpace(Context, IconFontFolder);


    string ISformViewModelInterfaceFolder      = "00198-ISformViewModelInterface.cs";
    string ISformViewModelInterfaceClassName   = GetContextModelClassName(Context, ISformViewModelInterfaceFolder);
    string ISformViewModelInterfaceNameSpace   = GetContextModelNameSpace(Context, ISformViewModelInterfaceFolder);

    string IWebServiceFilterDefInterfaceFolder      = "00200-IWebServiceFilterDefInterface.cs";
    string IWebServiceFilterDefInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterDefInterfaceFolder);
    string IWebServiceFilterDefInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterDefInterfaceFolder);

    string IWebServiceFilterRsltInterfaceFolder      = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder      = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName   = GetContextModelClassName(Context, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace   = GetContextModelNameSpace(Context, IWebServiceFilterMenuInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string WebServiceFilterDefViewModelFolder      = "00211-WebServiceFilterDefViewModel.cs";
    string WebServiceFilterDefViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterDefViewModelFolder);
    string WebServiceFilterDefViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterDefViewModelFolder);

    string WebServiceFilterMenuViewModelFolder      = "00217-WebServiceFilterMenuViewModel.cs";
    string WebServiceFilterMenuViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterMenuViewModelFolder);
    string WebServiceFilterMenuViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterMenuViewModelFolder);

    string ValueChangedCmdParamFolder               = "00218-ValueChangedCmdParam.cs";
    string ValueChangedCmdParamClassName            = GetContextModelClassName(Context, ValueChangedCmdParamFolder);
    string ValueChangedCmdParamNameSpace            = GetContextModelNameSpace(Context, ValueChangedCmdParamFolder);


    string IBindingContextChangedFolder      = "00220-IBindingContextChanged.cs";
    string IBindingContextChangedClassName   = GetContextModelClassName(Context, IBindingContextChangedFolder);
    string IBindingContextChangedNameSpace   = GetContextModelNameSpace(Context, IBindingContextChangedFolder);

    string IUniqServiceFilterDefInterfaceFolder     = "00246-IUniqServiceFilterDefInterface.cs";
    string IUniqServiceFilterDefInterfaceClassName  = GetContextModelClassName(Context, IUniqServiceFilterDefInterfaceFolder);
    string IUniqServiceFilterDefInterfaceNameSpace  = GetContextModelNameSpace(Context, IUniqServiceFilterDefInterfaceFolder);

    string UniqServiceFilterDefFolder               = "00247-UniqServiceFilterDef.cs";
    string UniqServiceFilterDefClassName            = GetContextModelClassName(Context, UniqServiceFilterDefFolder);
    string UniqServiceFilterDefNameSpace            = GetContextModelNameSpace(Context, UniqServiceFilterDefFolder);

    string TablePaginationUserControlFolder      = "00252-TablePaginationUserControl.xaml.cs";
    string TablePaginationUserControlClassName   = GetContextModelClassName(Context, TablePaginationUserControlFolder);
    string TablePaginationUserControlNameSpace   = GetContextModelNameSpace(Context, TablePaginationUserControlFolder);

    string IColumnSelectorItemDefInterfaceFolder      = "00258-IColumnSelectorItemDefInterface.cs";
    string IColumnSelectorItemDefInterfaceClassName   = GetContextModelClassName(Context, IColumnSelectorItemDefInterfaceFolder);
    string IColumnSelectorItemDefInterfaceNameSpace   = GetContextModelNameSpace(Context, IColumnSelectorItemDefInterfaceFolder);

    string ColumnSelectorItemDefViewModelFolder      = "00262-ColumnSelectorItemDefViewModel.cs";
    string ColumnSelectorItemDefViewModelClassName   = GetContextModelClassName(Context, ColumnSelectorItemDefViewModelFolder);
    string ColumnSelectorItemDefViewModelNameSpace   = GetContextModelNameSpace(Context, ColumnSelectorItemDefViewModelFolder);


    string modelInterfaceFolder         = "01100-Interface.cs";
    string modelInterfaceClassName      = GetInterfaceName(Model);
    string modelInterfaceNameSpace      = GetModelNameSpace(Model, modelInterfaceFolder);

    string modelPageInterfaceFolder         = "01200-Page.interface.cs";
    string modelPageInterfaceClassName      = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace      = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelFilterInterfaceFolder       = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName    = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace    = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelFilterFolder                = "01302-Filter.model.cs";
    string modelFilterClassName             = GetFilterName(Model);
    string modelFilterNameSpace             = GetModelNameSpace(Model, modelFilterFolder);

    string modelServiceInterfaceFolder       = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName    = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace    = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string SformUserControlFolder           = "01420-SformUserControl.xaml.cs";
    string SformUserControlClassName        = GetModelClassName(Model, SformUserControlFolder);
    string SformUserControlNameSpace        = GetModelNameSpace(Model, SformUserControlFolder);
    string SformUserControlProject          = GetModelProjectName(Model, SformUserControlFolder);

    string SformViewModelFolder      = "01422-SformViewModel.cs";
    string SformViewModelClassName   = GetModelClassName(Model, SformViewModelFolder);
    string SformViewModelNameSpace   = GetModelNameSpace(Model, SformViewModelFolder);

    string CurrentFilterPropertyName                    = "CurrentFilter";
    string FilterDefinitionsPropertyName                = "FilterDefinitions";

    string HiddenFiltersVMPropertyName                  = "HiddenFiltersVM"; // correct:  to exclude HResult=0x800703E9 System.StackOverflowException
    string OnHiddenFiltersChangedPropertyName           = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName     = "HiddenFiltersPropertyChanged";

    string TableMenuItemsVMPropertyName                 = "TableMenuItemsVM"; // correct:  to exclude HResult=0x800703E9 System.StackOverflowException
    string OnTableMenuItemsChangedPropertyName          = "OnTableMenuItemsChanged";
    string TableMenuItemsPropertyChangedPropertyName    = "TableMenuItemsPropertyChanged";
    string TableMenuItemsCommandPropertyName            = "TableMenuItemsCommand";

    string RowMenuItemsPropertyName                     = "RowMenuItemsVM";   // correct:  to exclude HResult=0x800703E9 System.StackOverflowException
    string OnRowMenuItemsChangedPropertyName            = "OnRowMenuItemsChanged";
    string RowMenuItemsPropertyChangedPropertyName      = "RowMenuItemsPropertyChanged";
    string RowMenuItemsCommandPropertyName              = "RowMenuItemsCommand";

    string ApplyFilterCommandPropertyName = "ApplyFilterCommand";

    string DataGridSortingChangedPropertyName = "DataGridSortingChanged";

    string IsInQueryPropertyName                = "IsInQuery";
    string IsOnLoadedCalledPropertyName         = "IsOnLoadedCalled";
    string OnLoadedPropertyName                 = "OnLoaded";

    string RowsPerPageOptionsPropertyName = "RowsPerPageOptions";
    string TotalCountPropertyName = "TotalCount";
    string DataSourcePropertyName = "DataSource";
    string RefreshSformCommandPropertyName = "RefreshSformCommand";
    string SelectColumnsCommandPropertyName = "SelectColumnsCommand";
    string SelectedColumnsPropertyName = "SelectedColumns";
    string SformSelectionChangedPropertyName = "SformSelectionChanged";
    string RegionPropertyName = "Region";
    string SformSelectionChangedCommandPropertyName = "SformSelectionChangedCommand";
    string CopyToModelMethodName            = "CopyToModel";
    string CopyToModelNotifyMethodName      = "CopyToModelNotify";

    string CurrentSortInfoPropertyName = "CurrentSortInfo";
    string OnSortCommandPropertyName = "OnSortCommand";

    string CurrentPagePropertyName = "CurrentPage";
    string OnCurrentPageChangedCommandPropertyName="OnCurrentPageChangedCommand";

    string RowsPerPagePropertyName = "RowsPerPage";
    string RowsPerPageDefaultPropertyName = "10";
    string OnRowsPerPageChangedCommandPropertyName="OnRowsPerPageChangedCommand";

    string SelectedRowPropertyName="SelectedRow";

    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";

    string FormRootServicePropertyName      = "FrmRootSrv";
    string FormServicePrefixPropertyName    = "FrmSrv";

    string AppSettingServicePropertyName    = "GlblSettingsSrv";
    string FilterOperatorSuffix             = "Oprtr";
    string EqualOperator                    = "eq";
    string LikeOperator                     = "lk";
    string GetWithFilterMethodName          = "getwithfilter";
    string ColumnSelectorDlgPropertyName    = "ColumnSelectorDlg";

    string SformAfterAddItemCommandPropertyName     = "SformAfterAddItemCommand";
    string SformAfterUpdItemCommandPropertyName     = "SformAfterUpdItemCommand";
    string SformAfterDelItemCommandPropertyName     = "SformAfterDelItemCommand";
    string SformLoadedCommandPropertyName           = "SformLoadedCommand";
    string UIDispatcherInvokePropertyName           = "Application.Current.Dispatcher.Invoke";
    string BindingContextFeedbackRefPropertyName    = "BindingContextFeedbackRef";

    string InternalContentProperty                  = "InternalContent";
    string IsDsDestroyedPropertyName                = "IsDsDestroyed";
    string IsDestroyedPropertyName                  = "IsDestroyed";
    string IsSearchDestroyedPropertyName            = "IsSearchDestroyed";
    string IsSearchGridFlexPropertyName             = "IsSearchGridFlex";
    string SearchMethodPropertyName                 = "SearchMethod";
    string NoSearchMethodPropertyName               = "NoSearchMethod";
    string ScanByUkModePropertyName                 = "ScanByUk";
    string ScanByVwModePropertyName                 = "ScanByVw";
    string TextChangedCommandPropertyName           = "TextChangedCommand";
    string QuerySubmittedCommandPropertyName        = "QuerySubmitted";
    string GetManyByRepUnqMethodNamePrefix          = "getmanybyrepunq";
    string GetManyByRepPrimMethodNamePrefix         = "getmanybyrepprim";
    string FullScanPropertyName                     = "FullScan";
    string SearchDoSelectRowMethodName              = "SrchDoSlctRw";
    string HiddenFilterAsFltRsltSuffix              = "HiddenFilterAsFltRslt";
    string HiddenFilterByRowSuffix                  = "HiddenFilterByRow";
    string FilterRslt2FilterMethodName              = "FilterRslt2Filter";
    string ShowErrorMethodName                      = "ShowErrorMessage";
    string UnfocusedCommandPropertyName             = "UnfocusedCommand";

    string OnDestroyPropertyName                    = "OnDestroy";

    List<string> nmSpaces = new List<string>();
    if ((SformViewModelNameSpace != IWebServiceFilterDefInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterDefInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterDefInterfaceNameSpace);
    if ((SformViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((SformViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((SformViewModelNameSpace != WebServiceFilterDefViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterDefViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterDefViewModelNameSpace);
    if ((SformViewModelNameSpace != modelServiceInterfaceNameSpace) && (nmSpaces.IndexOf(modelServiceInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelServiceInterfaceNameSpace);
    if ((SformViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((SformViewModelNameSpace != WebServiceFilterMenuViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterMenuViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterMenuViewModelNameSpace);
    if ((SformViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((SformViewModelNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((SformViewModelNameSpace != IColumnSelectorItemDefInterfaceNameSpace) && (nmSpaces.IndexOf(IColumnSelectorItemDefInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IColumnSelectorItemDefInterfaceNameSpace);
    if ((SformViewModelNameSpace != ColumnSelectorItemDefViewModelNameSpace) && (nmSpaces.IndexOf(ColumnSelectorItemDefViewModelNameSpace) < 0)) 
        nmSpaces.Add(ColumnSelectorItemDefViewModelNameSpace);
    if ((SformViewModelNameSpace != TablePaginationUserControlNameSpace) && (nmSpaces.IndexOf(TablePaginationUserControlNameSpace) < 0)) 
        nmSpaces.Add(TablePaginationUserControlNameSpace);
    if ((SformViewModelNameSpace != ISformViewModelInterfaceNameSpace) && (nmSpaces.IndexOf(ISformViewModelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(ISformViewModelInterfaceNameSpace);
    if ((SformViewModelNameSpace != IBindingContextChangedNameSpace) && (nmSpaces.IndexOf(IBindingContextChangedNameSpace) < 0)) 
        nmSpaces.Add(IBindingContextChangedNameSpace);
    if ((SformViewModelNameSpace != IconFontNameSpace) && (nmSpaces.IndexOf(IconFontNameSpace) < 0)) 
        nmSpaces.Add(IconFontNameSpace);
    if ((SformViewModelNameSpace != ValueChangedCmdParamNameSpace) && (nmSpaces.IndexOf(ValueChangedCmdParamNameSpace) < 0)) 
        nmSpaces.Add(ValueChangedCmdParamNameSpace);
    if ((SformViewModelNameSpace != BindingContextFeedbackNameSpace) && (nmSpaces.IndexOf(BindingContextFeedbackNameSpace) < 0)) 
        nmSpaces.Add(BindingContextFeedbackNameSpace);
    if ((SformViewModelNameSpace != IUniqServiceFilterDefInterfaceNameSpace) && (nmSpaces.IndexOf(IUniqServiceFilterDefInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IUniqServiceFilterDefInterfaceNameSpace);
    if ((SformViewModelNameSpace != UniqServiceFilterDefNameSpace) && (nmSpaces.IndexOf(UniqServiceFilterDefNameSpace) < 0)) 
        nmSpaces.Add(UniqServiceFilterDefNameSpace);
    

    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = GetModelUniqueKeys(Model, new List<ModelViewUniqueKeyOfVwSerializable>());
    ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
    if(pk!= null) uniqueKeys.Add(pk);

    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> searchSchemas =
        GetSearchResources(Model, Context);


    if(searchSchemas!= null) {
        string msi = null;
        List<ModelViewSerializable> smds = new List<ModelViewSerializable>();
        foreach(var sch in searchSchemas) {
            ModelViewSerializable m2mModel = sch.Item1;
            msi = GetModelNameSpace(m2mModel, modelServiceInterfaceFolder);
            if ((SformViewModelNameSpace != msi) && (nmSpaces.IndexOf(msi) < 0)) nmSpaces.Add(msi);
            msi = GetModelNameSpace(m2mModel, modelFilterInterfaceFolder);
            if ((SformViewModelNameSpace != msi) && (nmSpaces.IndexOf(msi) < 0)) nmSpaces.Add(msi);
            msi = GetModelNameSpace(m2mModel, modelPageInterfaceFolder);
            if ((SformViewModelNameSpace != msi) && (nmSpaces.IndexOf(msi) < 0)) nmSpaces.Add(msi);
            foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                if(smds.Any(p => p == searchModel)) continue;
                smds.Add(searchModel);
                msi = GetModelNameSpace(searchModel, modelServiceInterfaceFolder);
                if ((SformViewModelNameSpace != msi) && (nmSpaces.IndexOf(msi) < 0)) nmSpaces.Add(msi);
                msi = GetModelNameSpace(searchModel, modelFilterInterfaceFolder);
                if ((SformViewModelNameSpace != msi) && (nmSpaces.IndexOf(msi) < 0)) nmSpaces.Add(msi);
                msi = GetModelNameSpace(searchModel, modelPageInterfaceFolder);
                if ((SformViewModelNameSpace != msi) && (nmSpaces.IndexOf(msi) < 0)) nmSpaces.Add(msi);
            }
        }
    } // if(searchSchemas!= null) {...}


#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>
/*

    "<#= SformUserControlClassName #>" UserControl is defined in the "<#= SformUserControlProject #>"-project.
    In the file of IModule-class of "<#= SformUserControlProject #>"-project the following line of code must be inserted:

        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...
            // According to requirements of the "<#= SformViewModelClassName #>.cs"-file of "<#= SformUserControlProject #>"-project. 
            ViewModelLocationProvider.Register<<#= SformUserControlClassName #>, <#= SformViewModelClassName #>>();
            // According to requirements of the "<#= SformViewModelClassName #>.cs"-file of "<#= SformUserControlProject #>"-project. 
            containerRegistry.Register<ContentView, <#= SformUserControlClassName #>>("<#= SformUserControlClassName #>");
            ...
        }

*/

namespace <#= SformViewModelNameSpace #> {
    public class <#= SformViewModelClassName #>: INotifyPropertyChanged, <#= ISformViewModelInterfaceClassName #>, <#= IBindingContextChangedClassName #>, IDestructible
    {
        protected <#= modelServiceInterfaceClassName #> <#= FormRootServicePropertyName #>=null;
        protected <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>=null;
        protected IDialogService _dialogService=null;
<#
        if(searchSchemas!= null) {
            List<ModelViewSerializable> smds = new List<ModelViewSerializable>();
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
#>
        protected <#= GetModelServiceInterfaceName(m2mModel) #> <#= FormServicePrefixPropertyName + m2mModel.ViewName #>;
<#
                foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                    ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                    if(smds.Any(p => p == searchModel)) continue;
                    smds.Add(searchModel);
#>
        protected <#= GetModelServiceInterfaceName(searchModel) #> <#= FormServicePrefixPropertyName + searchModel.ViewName #>;
<#
                }
            }
        } // if(searchSchemas!= null) {...}
#>    

        bool CnFllscn = false;
        public <#= SformViewModelClassName #>(<#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName  #>, <#= modelServiceInterfaceClassName #> <#= FormRootServicePropertyName #>, 
<#
        if(searchSchemas!= null) {
            List<ModelViewSerializable> smds = new List<ModelViewSerializable>();
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
#>
                <#= GetModelServiceInterfaceName(m2mModel) #> <#= FormServicePrefixPropertyName + m2mModel.ViewName #>,
<#
                foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                    ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                    if(smds.Any(p => p == searchModel)) continue;
                    smds.Add(searchModel);
#>
                <#= GetModelServiceInterfaceName(searchModel) #> <#= FormServicePrefixPropertyName + searchModel.ViewName #>,
<#
                }
            }
        } // if(searchSchemas!= null) {...}
#>    
            IDialogService dialogService) {
            this.<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
            this.<#= FormRootServicePropertyName #> = <#= FormRootServicePropertyName #>;
            this._dialogService = dialogService;
<#
        if(searchSchemas!= null) {
            List<ModelViewSerializable> smds = new List<ModelViewSerializable>();
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
#>
                this.<#= FormServicePrefixPropertyName + m2mModel.ViewName #> = <#= FormServicePrefixPropertyName + m2mModel.ViewName #>;
<#
                foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                    ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                    if(smds.Any(p => p == searchModel)) continue;
                    smds.Add(searchModel);
#>
                this.<#= FormServicePrefixPropertyName + searchModel.ViewName #> = <#= FormServicePrefixPropertyName + searchModel.ViewName #>;
<#
                }
            }
        } // if(searchSchemas!= null) {...}
#>    
            _<#= TableMenuItemsVMPropertyName #> = GetDefault<#= TableMenuItemsVMPropertyName #>();
            CnFllscn = (<#= AppSettingServicePropertyName #>.GetViewModelMask("<#= Model.ViewName #>") & 16) == 16;
        }
        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion


        object _<#= BindingContextFeedbackRefPropertyName #> = null;
        public object <#= BindingContextFeedbackRefPropertyName #> {
            get { return _<#= BindingContextFeedbackRefPropertyName #>; }
            set { 
                if(_<#= BindingContextFeedbackRefPropertyName #> != value) {
                    _<#= BindingContextFeedbackRefPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }


        #region <#= SelectedRowPropertyName #>
        public object _<#= SelectedRowPropertyName #> = null;
        public object <#= SelectedRowPropertyName #> {
            get { return _<#= SelectedRowPropertyName #>;}
            set { 
                if (_<#= SelectedRowPropertyName #> != value) {
                    _<#= SelectedRowPropertyName #> = value;
                    OnPropertyChanged();
                    <#= BindingContextFeedbackRefPropertyName #> = new <#= BindingContextFeedbackClassName #>() {
		                BcfName = "<#= SelectedRowPropertyName #>",
		                BcfData = _<#= SelectedRowPropertyName #>
                    };
                }
            }
        }
        #endregion


        public async Task <#= OnLoadedPropertyName #>(object sender, object newValue)
        {
            if (newValue is bool) {
                bool v = (bool)newValue;
                if ((!<#= IsOnLoadedCalledPropertyName #>) && v) {
                    <#= IsOnLoadedCalledPropertyName #> = true;
                    defineSearchMethod();
                    await onFilter();
                } else {
                    <#= IsOnLoadedCalledPropertyName #> = v;
                }
            }
        }
        protected bool <#= IsOnLoadedCalledPropertyName #> = false;
        protected IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= CurrentFilterPropertyName #> = null;

        #region <#= InternalContentProperty #>
        int _<#= InternalContentProperty #> = 0;
        protected void <#= InternalContentProperty #>Changed()
        {
            if (_<#= InternalContentProperty #> < 10) _<#= InternalContentProperty #>++; else _<#= InternalContentProperty #> = 0;
            MainThread.InvokeOnMainThreadAsync(async () =>
            {
                await Task.Delay(1);
                this.OnPropertyChanged("<#= InternalContentProperty #>");
            });
        }
        public int <#= InternalContentProperty #>
        {
            get { return _<#= InternalContentProperty #>; }
        }
        #endregion

        #region <#= DataSourcePropertyName #>
        protected IEnumerable<<#= modelInterfaceClassName #>> _<#= DataSourcePropertyName #> = new ObservableCollection<<#= modelInterfaceClassName #>>();
        public IEnumerable<<#= modelInterfaceClassName #>> <#= DataSourcePropertyName #>
        { 
            get
            {
                return _<#= DataSourcePropertyName #>;
            }
            set
            {
                if (_<#= DataSourcePropertyName #> != value)
                {
                    _<#= DataSourcePropertyName #> = value;
                    OnPropertyChanged();
                    <#= InternalContentProperty #>Changed();
                }
            }
        }
        #endregion
        #region <#= ApplyFilterCommandPropertyName #>
        protected ICommand _<#= ApplyFilterCommandPropertyName #> = null;
        public ICommand <#= ApplyFilterCommandPropertyName #>
        {
            get
            {
                return _<#= ApplyFilterCommandPropertyName #> ?? (_<#= ApplyFilterCommandPropertyName #> = new Command((prm) => <#= ApplyFilterCommandPropertyName #>Execute(prm), (prm) => <#= ApplyFilterCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= ApplyFilterCommandPropertyName #>Execute(object prm)
        {
            <#= CurrentFilterPropertyName #> = prm as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>;
            Actual<#= CurrentPagePropertyName #> = 0;
            await onFilter();
        }
        protected bool <#= ApplyFilterCommandPropertyName #>CanExecute(object prm)
        {
            return !<#= IsInQueryPropertyName #>;
        }
        #endregion
        #region <#= RefreshSformCommandPropertyName #>
        public async void <#= RefreshSformCommandPropertyName #>() {
            await onFilter();
        }
        #endregion
        
        #region <#= SelectedColumnsPropertyName #>
        protected IEnumerable<<#= IColumnSelectorItemDefInterfaceClassName #>> _<#= SelectedColumnsPropertyName #> = new ObservableCollection<<#= IColumnSelectorItemDefInterfaceClassName #>>() {
<#      
        {
            string isCheckedVal= "true";
            foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in Model.UIListProperties) {
                if (modelViewUIListPropertySerializable.IsShownInView) {
#>
            new <#= ColumnSelectorItemDefViewModelClassName #>() {
                Name= "<#= GetModelPropertyNameEx2(modelViewUIListPropertySerializable, Model)#>", 
                Caption= "<#= GetDisplayAttributeValueString2(modelViewUIListPropertySerializable, Model, DisplayLabelProperty) #>", 
                IsChecked= <#= isCheckedVal #>
            }, 
<#
                }
                if (modelViewUIListPropertySerializable.IsNewLineAfter) {
                    isCheckedVal= "false";
                }
            }
        }
#>
        };
        public IEnumerable<<#= IColumnSelectorItemDefInterfaceClassName #>> <#= SelectedColumnsPropertyName #>
        { 
            get
            {
                return _<#= SelectedColumnsPropertyName #>;
            }
            set
            {
                if (_<#= SelectedColumnsPropertyName #> != value)
                {
                    _<#= SelectedColumnsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= SelectColumnsCommandPropertyName #>
        protected void <#= SelectColumnsCommandPropertyName #>Callback(IDialogResult rslt)
        {
            if ((!rslt.Parameters.ContainsKey("Result")) || (!rslt.Parameters.ContainsKey("Columns"))) return;
            bool aResult =  rslt.Parameters["Result"] is bool;
            if(aResult) aResult = (bool)rslt.Parameters["Result"];
            if (!aResult) return;
            if(rslt.Parameters.ContainsKey("Columns")) {
                IEnumerable<<#= IColumnSelectorItemDefInterfaceClassName #>> clms = rslt.Parameters.GetValue<IEnumerable<<#= IColumnSelectorItemDefInterfaceClassName #>>>("Columns");
                foreach(<#= IColumnSelectorItemDefInterfaceClassName #> c in clms) {
                    <#= IColumnSelectorItemDefInterfaceClassName #> r = <#= SelectedColumnsPropertyName #>.Where(i => i.Name == c.Name).FirstOrDefault();
                    if(r != null) r.IsChecked = c.IsChecked;
                }
            }
        }
        public void <#= SelectColumnsCommandPropertyName #>() {
            ObservableCollection<<#= IColumnSelectorItemDefInterfaceClassName #>> columns = new ObservableCollection<<#= IColumnSelectorItemDefInterfaceClassName #>>();
            foreach(<#= IColumnSelectorItemDefInterfaceClassName #> sc  in <#= SelectedColumnsPropertyName #>) {
                columns.Add( new <#= ColumnSelectorItemDefViewModelClassName #>() {Name = sc.Name, Caption=sc.Caption, IsChecked=sc.IsChecked });
            }
            IDialogParameters prms = new DialogParameters();
            prms.Add("Title", "Select columns");
            prms.Add("Columns", columns);
            this._dialogService.ShowDialog("<#= ColumnSelectorDlgPropertyName #>", prms, <#= SelectColumnsCommandPropertyName #>Callback);
        }
        #endregion

        #region <#= RowMenuItemsPropertyChangedPropertyName #>
        public void <#= RowMenuItemsPropertyChangedPropertyName #>(object Sender, object OldValue, object NewValue) {
            if (<#= IsDestroyedPropertyName #>) return;
            ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> tmis = new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>();
            IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> intmis = NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>;
            if(intmis != null) {
                foreach(<#= IWebServiceFilterMenuInterfaceClassName #> tmi  in intmis) {
                    tmis.Add( new <#= WebServiceFilterMenuViewModelClassName #>() {Id = tmi.Id, Caption=tmi.Caption,  IconName=tmi.IconName, IconColor=tmi.IconColor, Enabled=tmi.Enabled, Data=tmi.Data, Command = tmi.Command});
                }
            }
            <#= RowMenuItemsPropertyName #> = tmis;
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= RowMenuItemsPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= RowMenuItemsPropertyName #>
        { 
            get
            {
                return _<#= RowMenuItemsPropertyName #>;
            }
            set
            {
                if (_<#= RowMenuItemsPropertyName #> != value)
                {
                    _<#= RowMenuItemsPropertyName #> = value;
                    OnPropertyChanged();
                    (<#= RowMenuItemsCommandPropertyName #> as Command).ChangeCanExecute();
                }
            }
        }
        #endregion
        #region <#= RowMenuItemsCommandPropertyName  #>
        protected ICommand _<#= RowMenuItemsCommandPropertyName #> = null;
        public ICommand <#= RowMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= RowMenuItemsCommandPropertyName #> ?? (_<#= RowMenuItemsCommandPropertyName #> = new Command((prm) => <#= RowMenuItemsCommandPropertyName #>Execute(prm), (prm) => <#= RowMenuItemsCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= RowMenuItemsCommandPropertyName #>Execute(object prm)
        {
            List<string> lst = new List<string>();
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in <#= RowMenuItemsPropertyName #>) {
                if (mi.Command != null) {
                    mi.FeedbackData = prm;
                    if(mi.Command.CanExecute(mi)) lst.Add(mi.Caption);
                } else lst.Add(mi.Caption);
            }
            string action = await Application.Current.MainPage.DisplayActionSheet("Row commands:", "Cancel", null, lst.ToArray());
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in <#= RowMenuItemsPropertyName #>) {
                if(mi.Caption == action) {
                    <#= IWebServiceFilterMenuInterfaceClassName #> miToSend = new <#= WebServiceFilterMenuViewModelClassName #>() {Id = mi.Id, Caption = mi.Caption,  IconName = mi.IconName, IconColor = mi.IconColor, Enabled = mi.Enabled, Data = mi.Data,  FeedbackData = prm};
                    <#= BindingContextFeedbackRefPropertyName #> = new <#= BindingContextFeedbackClassName #>() {
		                BcfName = "<#= RowMenuItemsCommandPropertyName #>",
		                BcfData = miToSend
                    };
                    return;
                }
            }
        }
        protected bool <#= RowMenuItemsCommandPropertyName #>CanExecute(object prm)
        {
            bool rslt = (<#= RowMenuItemsPropertyName #> != null);
            if (rslt) rslt = <#= RowMenuItemsPropertyName #>.Any();
            return rslt;
        }

        #endregion

        #region <#= TableMenuItemsVMPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> GetDefault<#= TableMenuItemsVMPropertyName #>() {
            return new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>()  {
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "TableRefreshMI", Caption="Refresh table", IconName=<#= IconFontClassName #>.Refresh, IconColor=Color.Default, Enabled=true, Data=null, Command = <#= TableMenuItemsCommandPropertyName #>},
                new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "TableSettingsMI", Caption="Table columns", IconName=<#= IconFontClassName #>.Settings, IconColor=Color.Default, Enabled=true, Data=null, Command = <#= TableMenuItemsCommandPropertyName #>},
            };
        }
        public void <#= TableMenuItemsPropertyChangedPropertyName #>(object Sender, object OldValue, object NewValue) {
            if (<#= IsDestroyedPropertyName #>) return;
            ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> tmis = GetDefault<#= TableMenuItemsVMPropertyName #>();
            IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> intmis = NewValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>;
            if(intmis != null) {
                foreach(<#= IWebServiceFilterMenuInterfaceClassName #> tmi  in intmis) {
                    tmis.Add( new <#= WebServiceFilterMenuViewModelClassName #>() {Id = tmi.Id, Caption=tmi.Caption,  IconName=tmi.IconName, IconColor=tmi.IconColor, Enabled=tmi.Enabled, Data=tmi.Data, Command = tmi.Command});
                }
            }
            <#= TableMenuItemsVMPropertyName #> = tmis;
        }
        protected IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= TableMenuItemsVMPropertyName #> = null;
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= TableMenuItemsVMPropertyName #>
        { 
            get
            {
                return _<#= TableMenuItemsVMPropertyName #>;
            }
            set
            {
                if (_<#= TableMenuItemsVMPropertyName #> != value)
                {
                    _<#= TableMenuItemsVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= TableMenuItemsCommandPropertyName #>
        protected ICommand _<#= TableMenuItemsCommandPropertyName #> = null;
        public ICommand <#= TableMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= TableMenuItemsCommandPropertyName #> ?? (_<#= TableMenuItemsCommandPropertyName #> = new Command(() => <#= TableMenuItemsCommandPropertyName #>Execute(), () => <#= TableMenuItemsCommandPropertyName #>CanExecute()));
            }
        }
        protected async void <#= TableMenuItemsCommandPropertyName #>Execute()
        {
            List<string> lst = new List<string>();
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in <#= TableMenuItemsVMPropertyName #>) {
                if (mi.Command != null) {
                    if(mi.Command.CanExecute(mi)) lst.Add(mi.Caption);
                } else lst.Add(mi.Caption);
            }
            IList<<#= IWebServiceFilterMenuInterfaceClassName #>> timis = defineSearchMethodMenuItemsData();
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in timis) {
                lst.Add(mi.Caption);
            }
            string action = await Application.Current.MainPage.DisplayActionSheet("Table commands:", "Cancel", null, lst.ToArray());
            if(action == "Cancel") return;
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in timis) {
                if(mi.Caption == action) {
                    if(<#= SearchMethodPropertyName #> == mi.Id) return;
                    <#= IsSearchGridFlexPropertyName #> = false;
                    <#= IsSearchDestroyedPropertyName #> = true;
                    <#= IsSearchGridFlexPropertyName #> = true;
                    <#= IsSearchDestroyedPropertyName #> = false;
                    <#= SearchMethodPropertyName #> = mi.Id;
                    return;
                }
            }
            foreach(<#= IWebServiceFilterMenuInterfaceClassName #> mi in <#= TableMenuItemsVMPropertyName #>) {
                if(mi.Caption == action) {
                    if(mi.Id == "TableRefreshMI") {
                        <#= RefreshSformCommandPropertyName #>();
                    } else if(mi.Id == "TableSettingsMI") {
                        <#= SelectColumnsCommandPropertyName #>();
                    } else {
                        <#= BindingContextFeedbackRefPropertyName #> = new <#= BindingContextFeedbackClassName #>() {
		                    BcfName = "<#= TableMenuItemsCommandPropertyName #>",
		                    BcfData = mi
                        };
                    };
                    return;
                }
            }
        }
        protected bool <#= TableMenuItemsCommandPropertyName #>CanExecute()
        {
            return true;
        }
        #endregion




        #region <#= HiddenFiltersVMPropertyName #>
        public async Task <#= HiddenFiltersPropertyChangedPropertyName #>(object Sender, object OldValue, object NewValue)
        {
            if(<#= IsDestroyedPropertyName #>) return;
            if(NewValue == null) {
                if(_<#= HiddenFiltersVMPropertyName #> == null) return;
                if(!_<#= HiddenFiltersVMPropertyName #>.Any()) return;
            }
            IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> hfs = NewValue as IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>;
            ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>> newhfs = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
            if(hfs != null) {
                foreach(<#= IWebServiceFilterRsltInterfaceClassName #> hf  in hfs) {
                    newhfs.Add( new <#= WebServiceFilterRsltViewModelClassName #>() {fltrName=hf.fltrName, fltrDataType=hf.fltrDataType,  fltrOperator=hf.fltrOperator, fltrValue=hf.fltrValue, fltrError=hf.fltrError });
                }
            }
            <#= HiddenFiltersVMPropertyName #> = newhfs;
            <#= CurrentFilterPropertyName #> = newhfs;

            ObservableCollection<<#= IWebServiceFilterDefInterfaceClassName #>> fltDf = 
                new ObservableCollection<<#= IWebServiceFilterDefInterfaceClassName #>>() {
<#
            foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in Model.ScalarProperties) {
                if (modelViewPropertyOfVwSerializable.IsUsedByfilter &&  string.IsNullOrEmpty(modelViewPropertyOfVwSerializable.ForeignKeyNameChain)) {
#>
                    new <#= WebServiceFilterDefViewModelClassName #>() {fltrName="<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>", fltrCaption="<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>",  fltrDataType="<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>", fltrMaxLen=<#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin=<#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax=<#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #> },
<#
                }
            }
#>
                };
<#
    {
        bool isFilterDefinitionsResetable = false;
        bool hasForeignKeys = Model.ForeignKeys != null;
        bool isNotDescl = true;
        if(hasForeignKeys) {
            hasForeignKeys = Model.ForeignKeys.Count > 0;
        }
        if (hasForeignKeys) {
            foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in Model.ForeignKeys) {
                List<ModelViewPropertyOfVwSerializable> fKprops = GetPropsByForeignKey(Model, modelViewForeignKeySerializable);
                if (fKprops.Count < 1) {
                    foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in Model.ScalarProperties) {
                        if (modelViewPropertyOfVwSerializable.IsUsedByfilter &&  (!string.IsNullOrEmpty(modelViewPropertyOfVwSerializable.ForeignKeyNameChain))) {
                            if ( modelViewPropertyOfVwSerializable.ForeignKeyNameChain.StartsWith(modelViewForeignKeySerializable.NavigationName + ".") || 
                                (modelViewPropertyOfVwSerializable.ForeignKeyNameChain == modelViewForeignKeySerializable.NavigationName) ) {
                                    isFilterDefinitionsResetable = true;
#>
            fltDf.Add(new <#= WebServiceFilterDefViewModelClassName #>() {fltrName='<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>', fltrCaption='<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>',  fltrDataType='<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>', fltrMaxLen=<#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin=<#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax=<#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #> });
<#
                            }
                        }
                    }
                } else {
                    if(isNotDescl) {
#>
            bool isDsbl = true;
<#
                        isNotDescl = false;
                    } else {
#>
            isDsbl = true;
<#
                    }
                    foreach(ModelViewPropertyOfVwSerializable fKprop in fKprops) {
#>
            if (this.<#= HiddenFiltersVMPropertyName #> != null) {
                isDsbl = isDsbl && this.<#= HiddenFiltersVMPropertyName #>.Any(v => v.fltrName == "<#= GetModelPropertyName(fKprop, Model) #>");
            } else isDsbl = false;
<#
                    }
#>
            if(!isDsbl) {
<#
                    foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in Model.ScalarProperties) {
                        if (modelViewPropertyOfVwSerializable.IsUsedByfilter &&  (!string.IsNullOrEmpty(modelViewPropertyOfVwSerializable.ForeignKeyNameChain))) {
                            if ( modelViewPropertyOfVwSerializable.ForeignKeyNameChain.StartsWith(modelViewForeignKeySerializable.NavigationName + ".") || 
                                (modelViewPropertyOfVwSerializable.ForeignKeyNameChain == modelViewForeignKeySerializable.NavigationName) ) {
                                    isFilterDefinitionsResetable = true;
#>
                fltDf.Add(new <#= WebServiceFilterDefViewModelClassName #>() {fltrName="<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>", fltrCaption="<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>",  fltrDataType="<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>", fltrMaxLen=<#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin=<#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax=<#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #> });
<#
                            }
                        }
                    }
#>
            }
<#
                }
            }
        }
        if (isFilterDefinitionsResetable) {
#>
            <#= FilterDefinitionsPropertyName #> = fltDf;
<#
        }
    }
#>
            Actual<#= CurrentPagePropertyName #> = 0;
            defineSearchMethod();
            await onFilter();
        }
        IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> _<#= HiddenFiltersVMPropertyName #> = new ObservableCollection<<#= IWebServiceFilterRsltInterfaceClassName #>>();
        public IEnumerable<IWebServiceFilterRsltInterface> <#= HiddenFiltersVMPropertyName #>
        {
            get
            {
                return _<#= HiddenFiltersVMPropertyName #>;
            }
            set
            {
                if (_<#= HiddenFiltersVMPropertyName #> != value)
                {
                    _<#= HiddenFiltersVMPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= FilterDefinitionsPropertyName #>
        IEnumerable<<#= IWebServiceFilterDefInterfaceClassName #>> _<#= FilterDefinitionsPropertyName #> = new ObservableCollection<<#= IWebServiceFilterDefInterfaceClassName #>>()
        {
                <#
                    {
                        bool isNotFirst = false;
                        foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in Model.ScalarProperties) {
                            if (modelViewPropertyOfVwSerializable.IsUsedByfilter) {
                #>
                            new <#= WebServiceFilterDefViewModelClassName #>() {fltrName="<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>", fltrCaption="<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>",  fltrDataType="<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>", fltrMaxLen=<#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin=<#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax=<#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #> },
                <#
                            }
                        }
                    }
                #>
        };
        public IEnumerable<<#= IWebServiceFilterDefInterfaceClassName #>> <#= FilterDefinitionsPropertyName #>
        { 
            get
            {
                return _<#= FilterDefinitionsPropertyName #>;
            }
            set
            {
                if (_<#= FilterDefinitionsPropertyName #> != value)
                {
                    _<#= FilterDefinitionsPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion

        #region <#= IsInQueryPropertyName #>
        protected bool _<#= IsInQueryPropertyName #> = false;
        public bool <#= IsInQueryPropertyName #> {
            get { return _<#= IsInQueryPropertyName #>; }
            set { if(_<#= IsInQueryPropertyName #> != value) { _<#= IsInQueryPropertyName #> = value; OnPropertyChanged(); } }
        }
        #endregion

        #region <#= RowsPerPageOptionsPropertyName #>
        protected IEnumerable<int> _<#= RowsPerPageOptionsPropertyName #> = new ObservableCollection<int>() {10,25,50,100};
        public IEnumerable<int> <#= RowsPerPageOptionsPropertyName #> {
            get { return _<#= RowsPerPageOptionsPropertyName #>; }
            set { if(_<#= RowsPerPageOptionsPropertyName #> != value) { _<#= RowsPerPageOptionsPropertyName #> = value; OnPropertyChanged(); } }
        }
        #endregion

        #region <#= TotalCountPropertyName #>
        protected int _<#= TotalCountPropertyName #> = 0;
        public int <#= TotalCountPropertyName #> {
            get { return _<#= TotalCountPropertyName #>; }
            set { if(_<#= TotalCountPropertyName #> != value) { _<#= TotalCountPropertyName #> = value; OnPropertyChanged(); } }
        }
        #endregion

        #region <#= CurrentPagePropertyName #>
        protected int _Actual<#= CurrentPagePropertyName #> = 0;
        protected int Actual<#= CurrentPagePropertyName #>
        {
            get { return _Actual<#= CurrentPagePropertyName #>; }
            set
            {
                _Actual<#= CurrentPagePropertyName #> = value;
                <#= CurrentPagePropertyName #> = _Actual<#= CurrentPagePropertyName #>;
            }
        }
        protected int _<#= CurrentPagePropertyName #> = 0;
        public int <#= CurrentPagePropertyName #> {
            get { return _<#= CurrentPagePropertyName #>; }
            set { 
                if(_<#= CurrentPagePropertyName #> != value) { 
                    _<#= CurrentPagePropertyName #> = value; 
                    OnPropertyChanged(); 
                } 
            }
        }
        #endregion

        #region <#= RowsPerPagePropertyName #>
        protected int _Actual<#= RowsPerPagePropertyName #> = 10;
        protected int Actual<#= RowsPerPagePropertyName #>
        {
            get { return _Actual<#= RowsPerPagePropertyName #>; }
            set
            {
                if (_Actual<#= RowsPerPagePropertyName #> != value)
                {
                    _Actual<#= RowsPerPagePropertyName #> = value;
                    Actual<#= CurrentPagePropertyName #> = 0;
                }
                <#= RowsPerPagePropertyName #> = _Actual<#= RowsPerPagePropertyName #>;
            }
        }
        protected int _<#= RowsPerPagePropertyName #> = <#= RowsPerPageDefaultPropertyName #>;
        public int <#= RowsPerPagePropertyName #> {
            get { return _<#= RowsPerPagePropertyName #>; }
            set { 
                if(_<#= RowsPerPagePropertyName #> != value) { 
                    bool cpc = _<#= CurrentPagePropertyName #> != 0;
                    _<#= CurrentPagePropertyName #> = 0;
                    _<#= RowsPerPagePropertyName #> = value; 
                    OnPropertyChanged(); 
                    if(cpc) OnPropertyChanged("<#= CurrentPagePropertyName #>"); 
                } 
            }
        }
        #endregion

        #region <#= OnRowsPerPageChangedCommandPropertyName #>
        protected ICommand _<#= OnRowsPerPageChangedCommandPropertyName #> = null;
        public ICommand <#= OnRowsPerPageChangedCommandPropertyName #>
        {
            get
            {
                return _<#= OnRowsPerPageChangedCommandPropertyName #> ?? (_<#= OnRowsPerPageChangedCommandPropertyName #> = new Command((prm) => <#= OnRowsPerPageChangedCommandPropertyName #>Execute(prm), (prm) => <#= OnRowsPerPageChangedCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= OnRowsPerPageChangedCommandPropertyName #>Execute(object prm)
        {
            <#= ValueChangedCmdParamClassName #><int> val = prm as <#= ValueChangedCmdParamClassName #><int>;
            if (val != null) {
                if (Actual<#= RowsPerPagePropertyName #> != val.NewVal)
                {
                    await onFilter();
                }
            }
        }
        protected bool <#= OnRowsPerPageChangedCommandPropertyName #>CanExecute(object prm)
        {
            return true;
        }
        #endregion

        #region <#= OnCurrentPageChangedCommandPropertyName #>
        protected ICommand _<#= OnCurrentPageChangedCommandPropertyName #> = null;
        public ICommand <#= OnCurrentPageChangedCommandPropertyName #>
        {
            get
            {
                return _<#= OnCurrentPageChangedCommandPropertyName #> ?? (_<#= OnCurrentPageChangedCommandPropertyName #> = new Command((prm) => <#= OnCurrentPageChangedCommandPropertyName #>Execute(prm), (prm) => <#= OnCurrentPageChangedCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= OnCurrentPageChangedCommandPropertyName #>Execute(object prm)
        {
            <#= ValueChangedCmdParamClassName #><int> val = prm as <#= ValueChangedCmdParamClassName #><int>;
            if (val != null) {
                if (Actual<#= CurrentPagePropertyName #> != val.NewVal)
                {
                    await onFilter();
                }
            }
        }
        protected bool <#= OnCurrentPageChangedCommandPropertyName #>CanExecute(object prm)
        {
            return true;
        }
        #endregion


        #region Sort
        public string <#= CurrentSortInfoPropertyName #> {
            get { 
                if(string.IsNullOrEmpty(CurrentSortColumn)) return null;
                return CurrentSortColumn + " " + CurrentSortdirection;
            }
        }
        protected string CurrentSortColumn = "";
        protected string CurrentSortdirection  = "";
        protected ICommand _<#= OnSortCommandPropertyName #> = null;
        public ICommand <#= OnSortCommandPropertyName #>
        {
            get
            {
                return _<#= OnSortCommandPropertyName #> ?? (_<#= OnSortCommandPropertyName #> = new Command((prm) => <#= OnSortCommandPropertyName #>Execute(prm), (prm) => <#= OnSortCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected async void <#= OnSortCommandPropertyName #>Execute(object prm)
        {
            string val = prm as string;
            if(string.IsNullOrEmpty(val)) return;
            if (val != CurrentSortColumn) {
                CurrentSortColumn = val;
                CurrentSortdirection  = "";
            }
            if (CurrentSortdirection  == "")
                CurrentSortdirection  = "asc";
            else if (CurrentSortdirection  == "asc")
                CurrentSortdirection = "desc";
            else CurrentSortdirection = "";
            OnPropertyChanged("<#= CurrentSortInfoPropertyName #>"); 
            await onFilter();
        }
        protected bool <#= OnSortCommandPropertyName #>CanExecute(object prm)
        {
            return true;
        }
        #endregion

        #region <#= IsDsDestroyedPropertyName #>
        protected bool _<#= IsDsDestroyedPropertyName #> = false;
        public bool <#= IsDsDestroyedPropertyName #>
        {
            get { return _<#= IsDsDestroyedPropertyName #>; }
            set { if (_<#= IsDsDestroyedPropertyName #> != value) { _<#= IsDsDestroyedPropertyName #> = value; OnPropertyChanged(); } }
        }
        #endregion
        #region <#= IsDestroyedPropertyName #>
        protected bool _<#= IsDestroyedPropertyName #> = false;
        public bool <#= IsDestroyedPropertyName #>
        {
            get { return _<#= IsDestroyedPropertyName #>; }
            set { 
                if (_<#= IsDestroyedPropertyName #> != value) { 
                    _<#= IsDestroyedPropertyName #> = value; 
                    OnPropertyChanged(); 
                    OnPropertyChanged("<#= IsSearchDestroyedPropertyName #>");
                } 
            }
        }
        #endregion

        #region Filter
        protected void ClearDataSource() {
                <#= IsDsDestroyedPropertyName #> = true;
                <#= DataSourcePropertyName #> = null;
                <#= IsDsDestroyedPropertyName #> = false;
        }
        protected async Task onFilter() {
            if(<#= IsDsDestroyedPropertyName #>) return;
            if ((<#= IsInQueryPropertyName #>) || (!<#= IsOnLoadedCalledPropertyName #>)) return;
            <#= IsInQueryPropertyName #> = true;
            if(<#= SearchMethodPropertyName #> == "<#= NoSearchMethodPropertyName #>") {
                ClearDataSource();
                <#= DataSourcePropertyName #> = new ObservableCollection<<#= modelInterfaceClassName #>>();
                <#= SelectedRowPropertyName #> = null;
                <#= IsInQueryPropertyName #> = false;
                return;
            }

<#
        if(searchSchemas!= null) {
            if(searchSchemas.Count > 0) {
#>
        switch (this.curIndexMenuItemsData.id) {
<#
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
#>
            case "<#= ScanByVwModePropertyName + m2mModel.ViewName #>":  
                <#= SearchDoSelectRowMethodName + m2mModel.ViewName #>();
                return;
<#
            }
#>
        }
<#
            }
        }
#>

            <#= modelFilterInterfaceClassName #> flt  = <#= FormRootServicePropertyName #>.GetFilter();
            flt.page = this.<#= CurrentPagePropertyName #>; 
            flt.pagesize = this.<#= RowsPerPagePropertyName #>;
            if(!string.IsNullOrEmpty(CurrentSortColumn)) {
                string asc = "";
                if("desc".Equals(CurrentSortdirection, System.StringComparison.OrdinalIgnoreCase)) {
                    asc = "-";
                }
                flt.orderby = new List<string>() { asc + CurrentSortColumn };
            }
            if(<#= CurrentFilterPropertyName #> != null) {
                foreach(<#= IWebServiceFilterRsltInterfaceClassName #> e in <#= CurrentFilterPropertyName #>) {
                    if((!string.IsNullOrEmpty(e.fltrError)) || string.IsNullOrEmpty(e.fltrName)) continue;
                    switch(e.fltrName) {
<#
    foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) { 
        if (prop.IsUsedByfilter) {
#>
                        case "<#= GetModelPropertyName(prop, Model) #>":
                            if (flt.<#= GetModelPropertyName(prop, Model) #> == null) flt.<#= GetModelPropertyName(prop, Model) #> = new List<<#= GetPropertyTypeName(prop) #>>();
                            flt.<#= GetModelPropertyName(prop, Model) #>.Add((<#= GetPropertyTypeName(prop) #>)e.fltrValue);
                            if (flt.<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #> == null) flt.<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #> = new List<string>();
                            flt.<#= GetFilterPropertyOperatorName(prop, Model, FilterOperatorSuffix) #>.Add(e.fltrOperator);
                            break;
<#
        }
    }
#>
                        default: break;
                    }
                }
            }
            <#= modelPageInterfaceClassName #> rslt = await this.<#= FormRootServicePropertyName #>.<#= GetWithFilterMethodName #>(flt);
            if(rslt != null) {
                // <#= RowsPerPagePropertyName #> resets <#= CurrentPagePropertyName #> 
                // so the order is important: Actual<#= RowsPerPagePropertyName #> must be the first one and Actual<#= CurrentPagePropertyName #> must be the second
                Actual<#= RowsPerPagePropertyName #> = rslt.pagesize;
                Actual<#= CurrentPagePropertyName #> = rslt.page;
                <#= TotalCountPropertyName #> = rslt.total; 
                <#= SelectedRowPropertyName #> = null;
                ObservableCollection<<#= modelInterfaceClassName #>> ds = <#= DataSourcePropertyName #> as ObservableCollection<<#= modelInterfaceClassName #>>;
                <#= IsDsDestroyedPropertyName #> = true;
                if (ds == null) { ds = new ObservableCollection<<#= modelInterfaceClassName #>>(); } else { ds.Clear(); }
                <#= IsDsDestroyedPropertyName #> = false;
                <#= DataSourcePropertyName #> = null; 
                if(rslt.items != null) {
                    foreach(<#= modelInterfaceClassName #> itm in rslt.items) {
                        ds.Add(<#= FormRootServicePropertyName #>.<#= CopyToModelNotifyMethodName #>(itm, null));
                    }
                }
                <#= DataSourcePropertyName #> = ds;
                <#= SelectedRowPropertyName #> = <#= DataSourcePropertyName #>?.FirstOrDefault();
                // <#= InternalContentProperty #>Changed();
            }
            <#= IsInQueryPropertyName #> = false;
        }
        #endregion
        #region <#= SformAfterAddItemCommandPropertyName #>
        public void <#= SformAfterAddItemCommandPropertyName #>(object sender, object item) {
            <#= modelInterfaceClassName #> prm = item as  <#= modelInterfaceClassName #>;
            if(prm == null) return;
            ObservableCollection<<#= modelInterfaceClassName #>> ds = <#= DataSourcePropertyName #> as ObservableCollection<<#= modelInterfaceClassName #>>;
            ds.Add(<#= FormRootServicePropertyName #>.<#= CopyToModelNotifyMethodName #>(prm, null));
            <#= InternalContentProperty #>Changed();
        }
        #endregion
        #region <#= SformAfterUpdItemCommandPropertyName #>
        public void <#= SformAfterUpdItemCommandPropertyName #>(object sender, object item) {
            <#= modelInterfaceClassName #> prm = item as  <#= modelInterfaceClassName #>;
            if(prm == null) return;
            ObservableCollection<<#= modelInterfaceClassName #>> ds = <#= DataSourcePropertyName #> as ObservableCollection<<#= modelInterfaceClassName #>>;
            if (ds.IndexOf(prm) > -1) {
                return;
            }
<#
    {
        List<ModelViewPropertyOfVwSerializable> primKeyProps = GetModelPrimaryKeyProps(Model);
#>
            <#= modelInterfaceClassName #> rw = ds.Where(d => 
<#
        bool isNotFirst= false;
        foreach(ModelViewPropertyOfVwSerializable pkpModelViewPropertyOfVwSerializable in primKeyProps) {
            if(isNotFirst) {
#>
                    && (d.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #> == prm.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #>)
<#
            } else {
                isNotFirst = true;
#>
                        (d.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #> == prm.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #>)
<#
            }
        }
#>
                    ).FirstOrDefault();
<#
    }
#>
            if (rw != null) {
                <#= FormRootServicePropertyName #>.<#= CopyToModelMethodName #>(prm, rw);
            } else {
                ds.Add(<#= FormRootServicePropertyName #>.<#= CopyToModelNotifyMethodName #>(prm, null));
            }
            <#= InternalContentProperty #>Changed();
        }
        #endregion
        #region <#= SformAfterDelItemCommandPropertyName #>
        public void <#= SformAfterDelItemCommandPropertyName #>(object sender, object item) {
            <#= modelInterfaceClassName #> prm = item as  <#= modelInterfaceClassName #>;
            if(prm == null) return;
            ObservableCollection<<#= modelInterfaceClassName #>> ds = <#= DataSourcePropertyName #> as ObservableCollection<<#= modelInterfaceClassName #>>;
            int indx = ds.IndexOf(prm);
            if (indx > -1) {
                ds.RemoveAt(indx);
                <#= InternalContentProperty #>Changed();
                return;
            }
<#
    {
        List<ModelViewPropertyOfVwSerializable> primKeyProps = GetModelPrimaryKeyProps(Model);
#>
            <#= modelInterfaceClassName #> rw = ds.Where(d => 
<#
        bool isNotFirst= false;
        foreach(ModelViewPropertyOfVwSerializable pkpModelViewPropertyOfVwSerializable in primKeyProps) {
            if(isNotFirst) {
#>
                    && (d.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #> == prm.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #>)
<#
            } else {
                isNotFirst = true;
#>
                        (d.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #> == prm.<#= GetModelPropertyName(pkpModelViewPropertyOfVwSerializable, Model) #>)
<#
            }
        }
#>
                    ).FirstOrDefault();
<#
    }
#>
            if (rw != null) {
                indx = ds.IndexOf(rw);
                if (indx > -1) {
                    ClearDataSource();
                    ds.RemoveAt(indx);
                    <#= DataSourcePropertyName #> = ds;
                    //<#= InternalContentProperty #>Changed();
                    return;
                }
            }
        }
        #endregion
        public void <#= OnDestroyPropertyName #>() {
            <#= IsDestroyedPropertyName #> = true;
            <#= IsDsDestroyedPropertyName #> = true; // notify UI
            _<#= RowMenuItemsPropertyName #> = null; 
            _<#= TableMenuItemsVMPropertyName #> = null;
            _<#= FilterDefinitionsPropertyName #> = null; 
            _<#= HiddenFiltersVMPropertyName #> = null;
            _<#= BindingContextFeedbackRefPropertyName #> = null;
            _<#= SelectedRowPropertyName #> = null; 
            <#= DataSourcePropertyName #> = null; 
        }
        #region IDestructible

        public void Destroy()
        {
            if(<#= IsDestroyedPropertyName #>) return;
            <#= OnDestroyPropertyName #>();
        }
        #endregion


        #region <#= SearchMethodPropertyName #>
        protected string _<#= SearchMethodPropertyName #> = "<#= NoSearchMethodPropertyName #>";
        public string <#= SearchMethodPropertyName #> {
            get {
                return _<#= SearchMethodPropertyName #>;
            }
            set {
                if(_<#= SearchMethodPropertyName #> != value) {
                    _<#= SearchMethodPropertyName #> = value;
                    OnPropertyChanged(); 
                }
            }
        }
        #endregion

        #region <#= IsSearchDestroyedPropertyName #>
        protected bool _<#= IsSearchDestroyedPropertyName #> = false;
        public bool <#= IsSearchDestroyedPropertyName #>
        {
            get { return _<#= IsSearchDestroyedPropertyName #> || _<#= IsDestroyedPropertyName #>; }
            set { 
                if (_<#= IsSearchDestroyedPropertyName #> != value) { 
                    _<#= IsSearchDestroyedPropertyName #> = value; 
                    OnPropertyChanged(); 
                } 
            }
        }
        #endregion

        #region <#= IsSearchGridFlexPropertyName #>
        protected bool _<#= IsSearchGridFlexPropertyName #> = false;
        public bool <#= IsSearchGridFlexPropertyName #>
        {
            get { return _<#= IsSearchGridFlexPropertyName #>; }
            set { 
                if (_<#= IsSearchGridFlexPropertyName #> != value) { 
                    _<#= IsSearchGridFlexPropertyName #> = value; 
                    OnPropertyChanged(); 
                } 
            }
        }
        #endregion

<#
    if(searchSchemas != null) {
        foreach(var sch in searchSchemas) {
            ModelViewSerializable m2mModel = sch.Item1;
            ModelViewForeignKeySerializable foreignKey2Model = sch.Item2;
#>
        #region <#= ScanByVwModePropertyName + m2mModel.ViewName + FilterDefinitionsPropertyName #>
        protected void <#= SearchDoSelectRowMethodName + m2mModel.ViewName #>() {
            <#= GetFilterInterfaceName(m2mModel) #> dtlflt = <#= FormServicePrefixPropertyName + m2mModel.ViewName #>.GetFilter();
            dtlflt.page = this.<#= CurrentPagePropertyName #>; 
            dtlflt.pagesize = this.<#= RowsPerPagePropertyName #>;
            bool isFltSet = true;
<#
            foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetFirstPropOfFirstUniqueKey(searchModel);
#>
            if(isFltSet) {
                if (<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #> is null) {  
                    isFltSet = false;
                } else {
                    IList<<#= IWebServiceFilterRsltInterfaceClassName #>> dfltrslt = 
                        <#= FormServicePrefixPropertyName + m2mModel.ViewName #>.get<#= HiddenFilterAsFltRsltSuffix #>(this.<#= FormServicePrefixPropertyName + m2mModel.ViewName #>.get<#= HiddenFilterByRowSuffix #>(<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #>, "<#= kvp.Key.NavigationName #>"));
                    if (dfltrslt is null) {
                        isFltSet = false;
                    } else {
                        <#= FormServicePrefixPropertyName + m2mModel.ViewName #>.<#= FilterRslt2FilterMethodName #>(dfltrslt, dtlflt);
                    } 
                } 
            }
<#
            }
#>
            if(!isFltSet) {
                <#= AppSettingServicePropertyName #>.<#= ShowErrorMethodName #>("http", "Could not apply filter as not all attributes are set");
            }
            // by requirements all common foreignkey props have the same names for <#= m2mModel.ViewName #> and <#= Model.ViewName #>
            foreach(var fld in reqHiddenProps["<#= m2mModel.ViewName #>"]) { 
                <#= IWebServiceFilterRsltInterfaceClassName #> hf = this.<#= HiddenFiltersVMPropertyName #>.FirstOrDefault(f => f.fltrName == fld);
                if(hf is not null) {
                    <#= FormServicePrefixPropertyName + m2mModel.ViewName #>.<#= FilterRslt2FilterMethodName #>(hf, dtlflt);
                }
            }
            foreach(var fld in extHiddenProps["<#= m2mModel.ViewName #>"]) { 
                <#= IWebServiceFilterRsltInterfaceClassName #> hf = this.<#= HiddenFiltersVMPropertyName #>.FirstOrDefault(f => f.fltrName == fld);
                if(hf is not null) {
                    <#= FormServicePrefixPropertyName + m2mModel.ViewName #>.<#= FilterRslt2FilterMethodName #>(hf, dtlflt);
                }
            }
            <#= GetPageInterfaceName(m2mModel) #> vd = await <#= FormServicePrefixPropertyName + m2mModel.ViewName #>.<#= GetManyByRepPrimMethodNamePrefix #>(dtlflt);
            if(vd is null) {
                ClearDataSource();
                <#= DataSourcePropertyName #> = new ObservableCollection<<#= modelInterfaceClassName #>>();
                <#= SelectedRowPropertyName #> = null;
                return;
            }
            // <#= RowsPerPagePropertyName #> resets <#= CurrentPagePropertyName #> 
            // so the order is important: Actual<#= RowsPerPagePropertyName #> must be the first one and Actual<#= CurrentPagePropertyName #> must be the second
            Actual<#= RowsPerPagePropertyName #> = vd.pagesize;
            Actual<#= CurrentPagePropertyName #> = vd.page;
            <#= TotalCountPropertyName #> = vd.total; 
            if(vd.Items is null) {
                ClearDataSource();
                <#= DataSourcePropertyName #> = new ObservableCollection<<#= modelInterfaceClassName #>>();
                <#= SelectedRowPropertyName #> = null;
                return;
            }
            if(vd.Items.Count < 1) {
                ClearDataSource();
                <#= DataSourcePropertyName #> = new ObservableCollection<<#= modelInterfaceClassName #>>();
                <#= SelectedRowPropertyName #> = null;
                return;
            }
            <#= GetFilterInterfaceName(Model) #> flt = <#= FormRootServicePropertyName #>.GetFilter();
            flt.page = 0;
            flt.pagesize = Actual<#= CurrentPagePropertyName #>;
            foreach(var src in vd.Items) {
                ILst<<#= IWebServiceFilterRsltInterfaceClassName #>> srcFlt = 
                    <#= FormServicePrefixPropertyName + m2mModel.ViewName #>.get<#= HiddenFilterAsFltRsltSuffix #>(<#= FormServicePrefixPropertyName + m2mModel.ViewName #>.get<#= HiddenFilterByRowSuffix #>(src, "<#= foreignKey2Model.NavigationName #>"));
                <#= FormRootServicePropertyName #>.<#= FilterRslt2FilterMethodName #>(srcFlt, flt);
            }
            <#= modelPageInterfaceClassName #> rslt = await this.<#= FormRootServicePropertyName #>.<#= GetManyByRepPrimMethodNamePrefix #>(flt);
            if(rslt != null) {
                // <#= RowsPerPagePropertyName #> resets <#= CurrentPagePropertyName #> 
                // so the order is important: Actual<#= RowsPerPagePropertyName #> must be the first one and Actual<#= CurrentPagePropertyName #> must be the second
                Actual<#= RowsPerPagePropertyName #> = rslt.pagesize;
                Actual<#= CurrentPagePropertyName #> = rslt.page;
                <#= TotalCountPropertyName #> = rslt.total; 
                <#= SelectedRowPropertyName #> = null;
                ObservableCollection<<#= modelInterfaceClassName #>> ds = <#= DataSourcePropertyName #> as ObservableCollection<<#= modelInterfaceClassName #>>;
                <#= IsDsDestroyedPropertyName #> = true;
                if (ds == null) { ds = new ObservableCollection<<#= modelInterfaceClassName #>>(); } else { ds.Clear(); }
                <#= IsDsDestroyedPropertyName #> = false;
                <#= DataSourcePropertyName #> = null; 
                if(rslt.items != null) {
                    foreach(<#= modelInterfaceClassName #> itm in rslt.items) {
                        ds.Add(<#= FormRootServicePropertyName #>.<#= CopyToModelNotifyMethodName #>(itm, null));
                    }
                }
                <#= DataSourcePropertyName #> = ds;
                <#= SelectedRowPropertyName #> = <#= DataSourcePropertyName #>?.FirstOrDefault();
            } else {
                ClearDataSource();
                <#= DataSourcePropertyName #> = new ObservableCollection<<#= modelInterfaceClassName #>>();
                <#= SelectedRowPropertyName #> = null;
            }
        }
        protected IList<<#= IUniqServiceFilterDefInterfaceClassName #>> _<#= ScanByVwModePropertyName + m2mModel.ViewName + FilterDefinitionsPropertyName #> = 
            new List<<#= IUniqServiceFilterDefInterfaceClassName #>>() {
<#
            foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetFirstPropOfFirstUniqueKey(searchModel);
#>
                new <#= UniqServiceFilterDefClassName #>() { fltrName = "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) #>", fltrDispMemb = "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel)#>", fltrTextMemb = "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel)#>", fltrCaption = "<#=  GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, searchModel, DisplayLabelProperty) #>", fltrDataType = "<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, searchModel) #>", fltrMaxLen = <#= GetMaxLen(modelViewPropertyOfVwSerializable, searchModel) #>, fltrMin = <#= GetMinVal(modelViewPropertyOfVwSerializable, searchModel) #>, fltrMax = <#= GetMaxVal(modelViewPropertyOfVwSerializable, searchModel) #> },
<#
            }
#>
            };
        public IList<<#= IUniqServiceFilterDefInterfaceClassName #>> <#= ScanByVwModePropertyName + m2mModel.ViewName + FilterDefinitionsPropertyName #> {
            get {
                return _<#= ScanByVwModePropertyName + m2mModel.ViewName + FilterDefinitionsPropertyName #>;
            }
        }
<#
            foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetFirstPropOfFirstUniqueKey(searchModel);
#>
        protected <#= GetInterfaceName(searchModel) #> _<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #> = null;
        public <#= GetInterfaceName(searchModel) #> <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #> {
            get {
                return _<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #>;
            }
            set {
                if (_<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #> != value) {
                    _<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #> = value;
                    OnPropertyChanged();
                    OnPropertyChanged("<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Text" #>");
                }
            }
        }
        protected IList<<#= GetInterfaceName(searchModel) #>> _<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) +  "ItemsSource" #> = null;
        public IList<<#= GetInterfaceName(searchModel) #>> <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "ItemsSource" #> {
            get {
                return _<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "ItemsSource" #>;
            }
            set {
                if(_<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "ItemsSource" #> != value) {
                    _<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "ItemsSource" #> = value;
                    OnPropertyChanged();
                }
            }
        }
        protected string _<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Text" #> = null;
        public string <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Text" #> {
            get {
                <#= GetInterfaceName(searchModel) #> dmObj = <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #> as <#= GetInterfaceName(searchModel) #>;
                if(dmObj!= null) {
<#
        if(IsStringInputEx(modelViewPropertyOfVwSerializable, searchModel)) {
#>
                    return dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) #>;
<#

        } else if(IsPropertyNullable(modelViewPropertyOfVwSerializable)) {
#>
                    // it's possible to write only: return dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) #>.ToString();
                    if (dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) #>.HasValue) {
                        return dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) #>.Value.ToString();
                    } else {
                        return "";
                    }
<#
        } else {
#>
                    return dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) #>.ToString();
<#
        }
#>
                } else {
                    return _<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Text" #>;
                }
            }
            set {
                if(_<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Text" #> != value) {
                    _<#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Text" #> = value;
                    OnPropertyChanged();
                }
            }
        }

<#
            }
#>

        protected ICommand _<#= ScanByVwModePropertyName + m2mModel.ViewName +  TextChangedCommandPropertyName #> = null;
        public ICommand <#= ScanByVwModePropertyName + m2mModel.ViewName +  TextChangedCommandPropertyName #>
        {
            get
            {
                return _<#= ScanByVwModePropertyName + m2mModel.ViewName +  TextChangedCommandPropertyName #> ?? (_<#= ScanByVwModePropertyName + m2mModel.ViewName +  TextChangedCommandPropertyName #> = new Command((prm) => <#= ScanByVwModePropertyName + m2mModel.ViewName +  TextChangedCommandPropertyName #>Execute(prm), (prm) => <#= ScanByVwModePropertyName + m2mModel.ViewName +  TextChangedCommandPropertyName #>CanExecute(prm)));
            }
        }
        // Reason: UserInput = 0, ProgrammaticChange = 1, SuggestionChosen = 2
        protected async void <#= ScanByVwModePropertyName + m2mModel.ViewName +  TextChangedCommandPropertyName #>Execute(object prm)
        {
            if ((<#= IsDsDestroyedPropertyName #>) || (prm is null)) return;
            (object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, int Reason, string QueryText) tprm  = ((object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, int Reason, string QueryText))prm;
            if(tprm.Reason != 0) return;
            switch(tprm.FltDef.fltrName) {
<#
            foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetFirstPropOfFirstUniqueKey(searchModel);
#>
                case "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) #>":
                    <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #> = null;
                    <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Text" #> = tprm.QueryText;
                    {
                        <#= GetFilterInterfaceName(searchModel) #> fltr = <#= FormServicePrefixPropertyName + searchModel.ViewName #>.GetFilter();
                        fltr.page = 0;
                        fltr.pagesize = 15;
<#
                if(IsPropertyString(modelViewPropertyOfVwSerializable)) {
#>
                        fltr.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel)#> = new List<string>() { tprm.QueryText };
<#
                } else {
#>
                        <#= GetPropertyTypeName(modelViewPropertyOfVwSerializable) #> val;
                        if (<#= GetPropertyTypeName(modelViewPropertyOfVwSerializable) #>.TryParse(tprm.QueryText, out val)) {
                            fltr.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel)#> = new List<<#= GetPropertyTypeName(modelViewPropertyOfVwSerializable) #>>() { val };
                        }
<#
                }
#>
                        fltr.<#= GetFilterPropertyOperatorName(modelViewPropertyOfVwSerializable, searchModel, FilterOperatorSuffix) #> = new List<string>() { "<#= LikeOperator #>" };
                        <#= GetPageInterfaceName(searchModel) #> rslt = await <#= FormServicePrefixPropertyName + searchModel.ViewName #>.<#= GetManyByRepUnqMethodNamePrefix + searchModel.UniqueKeys[0].UniqueKeyName #>(fltr);
                        if(rslt is null) {
                            <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "ItemsSource" #> = null;
                        } else {
                            <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "ItemsSource" #> = rslt.items;
                        }
                    }
                    break;
<#
            }
#>
                default:
                    break;
            }            
        }
        protected bool <#= ScanByVwModePropertyName + m2mModel.ViewName +  TextChangedCommandPropertyName #>CanExecute(object prm)
        {
            return true;
        }

        protected ICommand _<#= ScanByVwModePropertyName + m2mModel.ViewName +  QuerySubmittedCommandPropertyName #> = null;
        public ICommand <#= ScanByVwModePropertyName + m2mModel.ViewName +  QuerySubmittedCommandPropertyName #>
        {
            get
            {
                return _<#= ScanByVwModePropertyName + m2mModel.ViewName +  QuerySubmittedCommandPropertyName #> ?? (_<#= ScanByVwModePropertyName + m2mModel.ViewName +  QuerySubmittedCommandPropertyName #> = new Command((prm) => <#= ScanByVwModePropertyName + m2mModel.ViewName +  QuerySubmittedCommandPropertyName #>Execute(prm), (prm) => <#= ScanByVwModePropertyName + m2mModel.ViewName +  QuerySubmittedCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected void <#= ScanByVwModePropertyName + m2mModel.ViewName +  QuerySubmittedCommandPropertyName #>Execute(object prm)
        {
            if ((<#= IsDsDestroyedPropertyName #>) || (prm is null)) return;
            (object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, object ChosenSuggestion, string QueryText) tprm  = 
                ((object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, object ChosenSuggestion, string QueryText))prm;
            switch(tprm.FltDef.fltrName) {
<#
            foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetFirstPropOfFirstUniqueKey(searchModel);
#>
                case "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) #>":
                    <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "Item" #> = tprm.ChosenSuggestion as <#= GetInterfaceName(searchModel) #>;
                    <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "ItemsSource" #> = null;
                    break;
<#
            }
#>
                default:
                    break;
            }
        }
        protected bool <#= ScanByVwModePropertyName + m2mModel.ViewName +  QuerySubmittedCommandPropertyName #>CanExecute(object prm)
        {
            return true;
        }
        protected ICommand _<#= ScanByVwModePropertyName + m2mModel.ViewName + UnfocusedCommandPropertyName #> = null;
        public ICommand <#= ScanByVwModePropertyName + m2mModel.ViewName + UnfocusedCommandPropertyName #>
        {
            get
            {
                return _<#= ScanByVwModePropertyName + m2mModel.ViewName + UnfocusedCommandPropertyName #> ?? (_<#= ScanByVwModePropertyName + m2mModel.ViewName +  UnfocusedCommandPropertyName #> = new Command((prm) => <#= ScanByVwModePropertyName + m2mModel.ViewName +  UnfocusedCommandPropertyName #>Execute(prm), (prm) => <#= ScanByVwModePropertyName + m2mModel.ViewName +  UnfocusedCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected void <#= ScanByVwModePropertyName + m2mModel.ViewName +  UnfocusedCommandPropertyName #>Execute(object prm)
        {
            if ((<#= IsDsDestroyedPropertyName #>) || (prm is null)) return;
            (object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef) tprm  = 
                ((object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef))prm;
            switch(tprm.FltDef.fltrName) {
<#
            foreach(KeyValuePair<ModelViewForeignKeySerializable,int> kvp in sch.Item3) {
                ModelViewSerializable searchModel = GetViewByName(Context, kvp.Key.ViewName);
                ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetFirstPropOfFirstUniqueKey(searchModel);
#>
                case "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) #>":
                    <#= ScanByVwModePropertyName + m2mModel.ViewName + GetModelPropertyName(modelViewPropertyOfVwSerializable, searchModel) + "ItemsSource" #> = null;
                    break;
<#
            }
#>
                default:
                    break;
            }
        }
        protected bool <#= ScanByVwModePropertyName + m2mModel.ViewName +  UnfocusedCommandPropertyName #>CanExecute(object prm) {
            return true;
        }


        #endregion
<#
        }
    }
    if (Model.IsWebApiSelectOneByPrimarykey) {
        for(int i = 0; i < uniqueKeys.Count; i++) { 
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, uniqueKeys[i], out indErrrorText);
            if (!indIsCorrect) {
#>

//
// Could not generate fragment of code
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//

<#
            } else {
                string caption = "Primary";
                string localRouteManyName = GetManyByRepPrimMethodNamePrefix;
                if(!uniqueKeys[i].IsPrimary) {
                    caption = uniqueKeys[i].UniqueKeyName;
                }
                if(!uniqueKeys[i].IsPrimary) {
                    localRouteManyName = GetManyByRepUnqMethodNamePrefix + caption;
                }

#>
        #region <#= ScanByUkModePropertyName + caption + FilterDefinitionsPropertyName #>
        protected IList<<#= IUniqServiceFilterDefInterfaceClassName #>> _<#= ScanByUkModePropertyName + caption + FilterDefinitionsPropertyName #> =
            new List<<#= IUniqServiceFilterDefInterfaceClassName #>>() {
<#
            foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
#>
                new <#= UniqServiceFilterDefClassName #>() { fltrName = "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) #>", fltrDispMemb = "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>", fltrTextMemb = "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#>", fltrCaption = "<#=  GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>", fltrDataType = "<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>", fltrMaxLen = <#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin = <#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax = <#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #> },
<#
            }
#>
            };
        public IList<<#= IUniqServiceFilterDefInterfaceClassName #>> <#= ScanByUkModePropertyName + caption + FilterDefinitionsPropertyName #> {
            get {
                return _<#= ScanByUkModePropertyName + caption + FilterDefinitionsPropertyName #>;
            }
        }

<#
            foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
#>
        protected <#= GetInterfaceName(Model) #> _<#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Item" #> = null;
        public <#= GetInterfaceName(Model) #> <#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Item" #> {
            get {
                return _<#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Item" #>;
            }
            set {
                if (_<#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Item" #> != value) {
                    _<#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Item" #> = value;
                    OnPropertyChanged();
                    OnPropertyChanged("<#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Text" #>");
                }
            }
        }
<#
            }
#>
        
        protected IList<<#= GetInterfaceName(Model) #>> _<#= ScanByUkModePropertyName + caption +  "ItemsSource" #> = null;
        public IList<<#= GetInterfaceName(Model) #>> <#= ScanByUkModePropertyName + caption + "ItemsSource" #> {
            get {
                return _<#= ScanByUkModePropertyName + caption + "ItemsSource" #>;
            }
            set {
                if(_<#= ScanByUkModePropertyName + caption + "ItemsSource" #> != value) {
                    _<#= ScanByUkModePropertyName + caption + "ItemsSource" #> = value;
                    OnPropertyChanged();
                }
            }
        }

<#
            foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
#>
        protected string _<#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Text" #> = null;
        public string <#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Text" #> {
            get {
                <#= GetInterfaceName(Model) #> dmObj = <#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Item" #>;
                if(dmObj != null) {
<#
        if(IsStringInputEx(modelViewPropertyOfVwSerializable, Model)) {
#>
                    return dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) #>;
<#

        } else if(IsPropertyNullable(modelViewPropertyOfVwSerializable)) {
#>
                    // it's possible to write only: return dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) #>.ToString();
                    if (dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) #>.HasValue) {
                        return dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) #>.Value.ToString();
                    } else {
                        return "";
                    }
<#
        } else {
#>
                    return dmObj.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) #>.ToString();
<#
        }
#>
                } else {
                    return _<#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Text" #>;
                }

            }
            set {
                if(_<#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Text" #> != value) {
                    _<#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Text" #> = value;
                    OnPropertyChanged();
                }
            }
        }
<#
            }
#>
        protected ICommand _<#= ScanByUkModePropertyName + caption + TextChangedCommandPropertyName #> = null;
        public ICommand <#= ScanByUkModePropertyName + caption + TextChangedCommandPropertyName #>
        {
            get
            {
                return _<#= ScanByUkModePropertyName + caption + TextChangedCommandPropertyName #> ?? (_<#= ScanByUkModePropertyName + caption + TextChangedCommandPropertyName #> = new Command((prm) => <#= ScanByUkModePropertyName + caption + TextChangedCommandPropertyName #>Execute(prm), (prm) => <#= ScanByUkModePropertyName + caption + TextChangedCommandPropertyName #>CanExecute(prm)));
            }
        }
        // Reason: UserInput = 0, ProgrammaticChange = 1, SuggestionChosen = 2
        protected async void <#= ScanByUkModePropertyName + caption + TextChangedCommandPropertyName #>Execute(object prm)
        {
            if ((<#= IsDsDestroyedPropertyName #>) || (prm is null)) return;
            (object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, int Reason, string QueryText) tprm  = ((object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, int Reason, string QueryText))prm;
            if(tprm.Reason != 0) return;
            int k = -1;
            switch(tprm.FltDef.fltrName) {
<#
        {
            int k = -1;
            foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
                k++;
                if (!modelViewPropertyOfVwSerializable.IsUsedByfilter) continue;
                if(IsUsebByForeignKey(Model, modelViewPropertyOfVwSerializable)) continue;
#>
                case "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) #>":
                    k = <#= k #>;
                    break;
<#
            }
        }
#>
                default:
                    return;
            }
            <#= GetInterfaceName(Model) #> itm = null;
            <#= GetFilterInterfaceName(Model) #> fltr = <#= FormRootServicePropertyName #>.GetFilter();
            fltr.page = 0;
            fltr.pagesize = 15;
            bool runQuery = true;
<#
        {
            int k = -1;
            foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
                k++;
                if (!modelViewPropertyOfVwSerializable.IsUsedByfilter) continue;
                if(IsUsebByForeignKey(Model, modelViewPropertyOfVwSerializable)) continue;
#>
            itm = <#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Item" #>;
            if (k > <#= k #>)  { 
                if(itm is null) {
                    runQuery = false;
                } else {
                    fltr.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) #> = new List<<#= GetPropertyTypeName(modelViewPropertyOfVwSerializable) #>>() { itm.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#> }; 
                    fltr.<#= GetFilterPropertyOperatorName(modelViewPropertyOfVwSerializable, Model, FilterOperatorSuffix)#> = new List<string>() { "<#= EqualOperator #>" };
                }
             } else if(k == <#= k #>) { 
                <#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Item" #> = null;
                <#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Text" #> = tprm.QueryText;
<#
                if(IsPropertyString(modelViewPropertyOfVwSerializable)) {
#>
                    fltr.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#> = new List<string>() { tprm.QueryText };
<#
                } else {
#>
                {
                    <#= GetPropertyTypeName(modelViewPropertyOfVwSerializable) #> val;
                    if (<#= GetPropertyTypeName(modelViewPropertyOfVwSerializable) #>.TryParse(tprm.QueryText, out val)) {
                        fltr.<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model)#> = new List<<#= GetPropertyTypeName(modelViewPropertyOfVwSerializable) #>>() { val };
                    }
                }
<#
                }
#>
                fltr.<#= GetFilterPropertyOperatorName(modelViewPropertyOfVwSerializable, Model, FilterOperatorSuffix)#> = new List<string>() { "<#= LikeOperator #>" };
             }
<#
            }
        }
#>
            if (runQuery) {
                <#= GetPageInterfaceName(Model) #> rslt = await <#= FormRootServicePropertyName #>.<#= localRouteManyName #>(fltr);
                if(rslt is null) {
                    <#= ScanByUkModePropertyName + caption + "ItemsSource" #> = null;
                } else {
                    <#= ScanByUkModePropertyName + caption + "ItemsSource" #> = rslt.items;
                }
            } else {
                <#= ScanByUkModePropertyName + caption + "ItemsSource" #> = null;
            }
        }
        protected bool <#= ScanByUkModePropertyName + caption + TextChangedCommandPropertyName #>CanExecute(object prm)
        {
            return true;
        }
        protected ICommand _<#= ScanByUkModePropertyName + caption + QuerySubmittedCommandPropertyName #> = null;
        public ICommand <#= ScanByUkModePropertyName + caption + QuerySubmittedCommandPropertyName #>
        {
            get
            {
                return _<#= ScanByUkModePropertyName + caption + QuerySubmittedCommandPropertyName #> ?? (_<#= ScanByUkModePropertyName + caption +  QuerySubmittedCommandPropertyName #> = new Command((prm) => <#= ScanByUkModePropertyName + caption +  QuerySubmittedCommandPropertyName #>Execute(prm), (prm) => <#= ScanByUkModePropertyName + caption +  QuerySubmittedCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected void <#= ScanByUkModePropertyName + caption +  QuerySubmittedCommandPropertyName #>Execute(object prm)
        {
            if ((<#= IsDsDestroyedPropertyName #>) || (prm is null)) return;
            (object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, object ChosenSuggestion, string QueryText) tprm  = 
                ((object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, object ChosenSuggestion, string QueryText))prm;
            switch(tprm.FltDef.fltrName) {
<#
        {
            foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
                if (!modelViewPropertyOfVwSerializable.IsUsedByfilter) continue;
                if(IsUsebByForeignKey(Model, modelViewPropertyOfVwSerializable)) continue;
#>
                case "<#= GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) #>":
                    <#= ScanByUkModePropertyName + caption + GetModelPropertyName(modelViewPropertyOfVwSerializable, Model) + "Item" #> = tprm.ChosenSuggestion as <#= GetInterfaceName(Model) #>;
                    break;
<#
            }
        }
#>
                default:
                    return;
            }
            <#= ScanByUkModePropertyName + caption + "ItemsSource" #> = null;
        }
        protected bool <#= ScanByUkModePropertyName + caption +  QuerySubmittedCommandPropertyName #>CanExecute(object prm) {
            return true;
        }
        protected ICommand _<#= ScanByUkModePropertyName + caption + UnfocusedCommandPropertyName #> = null;
        public ICommand <#= ScanByUkModePropertyName + caption + UnfocusedCommandPropertyName #>
        {
            get
            {
                return _<#= ScanByUkModePropertyName + caption + UnfocusedCommandPropertyName #> ?? (_<#= ScanByUkModePropertyName + caption +  UnfocusedCommandPropertyName #> = new Command((prm) => <#= ScanByUkModePropertyName + caption +  UnfocusedCommandPropertyName #>Execute(prm), (prm) => <#= ScanByUkModePropertyName + caption +  UnfocusedCommandPropertyName #>CanExecute(prm)));
            }
        }
        protected void <#= ScanByUkModePropertyName + caption +  UnfocusedCommandPropertyName #>Execute(object prm)
        {
            if ((<#= IsDsDestroyedPropertyName #>) || (prm is null)) return;
            <#= ScanByUkModePropertyName + caption + "ItemsSource" #> = null;
        }
        protected bool <#= ScanByUkModePropertyName + caption +  UnfocusedCommandPropertyName #>CanExecute(object prm) {
            return true;
        }
        #endregion
<#
            } // if (!indIsCorrect) { ... } else { ... }
        } // for(int i = 0; i < uniqueKeys.Count; i++) { ... }
    } // if (Model.IsWebApiSelectOneByPrimarykey) { ... }
#>
        #region SearchMethod
<#
    { 
        if(searchSchemas!= null) {
            if(searchSchemas.Count > 0) {
                string mdlPrpsLst = "";
                string mdlMptLst = "";
                if(Model.ScalarProperties != null) {
                    foreach(ModelViewPropertyOfVwSerializable msprp in Model.ScalarProperties) {
                        if(msprp.IsUsedByfilter) {
                            if(mdlMptLst == "")
                                mdlMptLst = " \"" + GetModelPropertyName(msprp, Model) + "\"";
                            else 
                                mdlMptLst = mdlMptLst + ", \"" + GetModelPropertyName(msprp, Model) + "\"";
                        }
                    }
                }
                if(Model.ForeignKeys != null) {
                    List<ModelViewPropertyOfVwSerializable> addedSclPrp = new List<ModelViewPropertyOfVwSerializable>();
                    foreach(ModelViewForeignKeySerializable mdlFk in Model.ForeignKeys) {
                        if(!IsForeigKeyMapedToScalars(mdlFk, Model)) continue;
                        foreach(var fkp in mdlFk.ForeignKeyProps) {
                            ModelViewPropertyOfVwSerializable sclPrp = GetScalarPropByOriginaPropName(fkp.OriginalPropertyName, Model);
                            if(addedSclPrp.Any(p => p == sclPrp)) continue;
                            addedSclPrp.Add(sclPrp);
                            if(mdlPrpsLst == "")
                                mdlPrpsLst = " \"" + GetModelPropertyName(sclPrp, Model) + "\"";
                            else 
                                mdlPrpsLst = mdlPrpsLst + ", \"" + GetModelPropertyName(sclPrp, Model) + "\"";
                        }  // foreach(var fkp in mdlFk.ForeignKeyProps) { ... }
                    } // foreach(ModelViewForeignKeySerializable mdlFk in Model.ForeignKeys) { ... }
                } // if(Model.ForeignKeys != null) { ... }
#>
        IList<string> mdlDrctFkProps = new List<string>{ <#= mdlPrpsLst #> };
        IList<string> mdlMptProps = new List<string>{ <#= mdlMptLst #> };
        Dictionary<string, IList<string>> reqHiddenProps = new Dictionary<string, IList<string>>() {
<#
                foreach(var sch in searchSchemas) {
                    string fldLst = "";
                    ModelViewSerializable m2mModel = sch.Item1;
                    List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = sch.Item4;
                    if(otherFks != null) {
                        foreach(var fk in otherFks) {
                            foreach(var fkp in fk.Key.ForeignKeyProps) {
                                ModelViewPropertyOfVwSerializable sclPrp = GetScalarPropByOriginaPropName(fkp.OriginalPropertyName, m2mModel);
                                if(fldLst == "")
                                    fldLst = " \"" + GetModelPropertyName(sclPrp, m2mModel) + "\"";
                                else 
                                    fldLst = fldLst + ", \"" + GetModelPropertyName(sclPrp, m2mModel) + "\"";
                            }
                        }
                    }
#>
                    {"<#= m2mModel.ViewName #>", new List<string> { <#= fldLst #> }},
<#
                } // foreach(var sch in searchSchemas) { ... }
#>
        };
        Dictionary<string, IList<string>> extHiddenProps = {
<#
                foreach(var sch in searchSchemas) {
                    string fldLst = "";
                    ModelViewSerializable m2mModel = sch.Item1;
                    List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = sch.Item5;
                    if(externalFks != null) {
                        foreach(var fk in externalFks) {
                            foreach(var fkp in fk.Key.ForeignKeyProps) {
                                ModelViewPropertyOfVwSerializable sclPrp = GetScalarPropByOriginaPropName(fkp.OriginalPropertyName, m2mModel);
                                if(fldLst == "")
                                    fldLst = " \"" + GetModelPropertyName(sclPrp, m2mModel) + "\"";
                                else 
                                    fldLst = fldLst + ", \"" + GetModelPropertyName(sclPrp, m2mModel) + "\"";
                            }
                        }
                    }
#>
                    {"<#= m2mModel.ViewName #>", new List<string> { <#= fldLst #>}},
<#
                } // foreach(var sch in searchSchemas) { ... }
#>
        };
<#
            } // if(searchSchemas.Count > 0) { ... }
        } // if(searchSchemas!= null) { ... }
    }
#>
        public void defineSearchMethod() {
            if (<#= IsDsDestroyedPropertyName #>) return;
            IList<<#= IWebServiceFilterMenuInterfaceClassName #>> timis = defineSearchMethodMenuItemsData();
            if(timis is null) {
                <#= SearchMethodPropertyName #> = "<#= NoSearchMethodPropertyName #>";
                return;
            }
            if (timis.Any(t => t.Id == <#= SearchMethodPropertyName #>)) return;
            if(timis.Count < 1) {
                <#= SearchMethodPropertyName #> = "<#= NoSearchMethodPropertyName #>";
                return;
            }
            <#= SearchMethodPropertyName #> = timis[0].Id;
        }
        public IList<<#= IWebServiceFilterMenuInterfaceClassName #>> defineSearchMethodMenuItemsData() {
            if (<#= IsDsDestroyedPropertyName #>) return null;
            IList<<#= IWebServiceFilterMenuInterfaceClassName #>> rslt = new List<<#= IWebServiceFilterMenuInterfaceClassName #>>();
            bool hasNtExternal = true;
<#
    { 
        // m2mMdl, m2mFk, searchFks, otherFks, externalFks
        if(searchSchemas!= null) { 
#>
            IList<string> extHiddflt = new List<string>();
            foreach(var f in <#= HiddenFiltersVMPropertyName #>) {
                if(!mdlMptProps.Contains(f.fltrName)) extHiddflt.Add(f.fltrName);
            }
            hasNtExternal = extHiddflt.Count == 0;
<#
          if(searchSchemas.Count > 0) {
#>
            IList<string> crrMDFP = new List<string>();
            foreach(var fld in mdlDrctFkProps) { 
                if (<#= HiddenFiltersVMPropertyName #>.Any(f => f.fltrName == fld))
                    crrMDFP.Add(fld);
                }
            }
            bool doIns = false;
<#
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
#>
            doIns = crrMDFP.length == this.reqHiddenProps["<#= m2mModel.ViewName #>"].Count;
            if(doIns) {
                doIns = (this.reqHiddenProps["<#= m2mModel.ViewName #>"].Count(s => crrMDFP.Contains(s))) == crrMDFP.Count;
                
                if(doIns) {
                    if(hasNtExternal) {
                        foreach (var fld in this.extHiddenProps["<#= m2mModel.ViewName #>"]) { 
                            doIns = this.<#= HiddenFiltersVMPropertyName #>.Any(f => f.fltrName == fld);
                            if(!doIns) break;
                        }
                    } else {
                        doIns = extHiddflt.Count === this.extHiddenProps["<#= m2mModel.ViewName #>"].Count;
                        if(doIns) doIns = extHiddflt.Count(s => this.extHiddenProps["<#= m2mModel.ViewName #>"].Contains(s)) === extHiddflt.Count;
                    }
                }
            }
            if(doIns) {
                rslt.Add( 
                    new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= ScanByVwModePropertyName + m2mModel.ViewName #>", Caption="filter by <#= m2mModel.Title #>", IconName=<#= IconFontClassName #>.Refresh, IconColor=Color.Default, Enabled=true, Data=null, Command = <#= TableMenuItemsCommandPropertyName #>}
                );
            }
<#
            } // foreach(var sch in searchSchemas) { ... }
          } // if(searchSchemas.Count > 0) { ... }
        } // if(searchSchemas!= null) { ... }
        if (Model.IsWebApiSelectOneByPrimarykey) {
            for(int i = 0; i < uniqueKeys.Count; i++) { 
                string indErrrorText = "";
                bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, uniqueKeys[i], out indErrrorText);
                if (!indIsCorrect) {
#>

//
// Could not generate fragment of code
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//

<#
                } else {
                    string caption = "Primary";
                    if(!uniqueKeys[i].IsPrimary) {
                        caption = uniqueKeys[i].UniqueKeyName;
                    }
                    int UkPropsUsedByFltrCount = 0;
                    foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
                        if(uniqueKeys[i].IsPrimary) {
                            UkPropsUsedByFltrCount++;
                        } else {
                            if (modelViewPropertyOfVwSerializable.IsUsedByfilter) {
                                if(!IsUsebByForeignKey(Model, modelViewPropertyOfVwSerializable)) UkPropsUsedByFltrCount++;
                            }
                        }
                    }
                    string requiredForeigKeyPropList = GetRequiredForeignKeyProps(uniqueKeys[i], Model);
                    if ((UkPropsUsedByFltrCount > 0) && (requiredForeigKeyPropList != null)) {
#>
            if(hasNtExternal) {
                IList<string> reqFkPrps = new List<string><#= requiredForeigKeyPropList #>;
                if(this.<#= HiddenFiltersVMPropertyName #>.Count() == reqFkPrps.Count) {
                    bool insmi = true;
                    foreach(var vmfn in reqFkPrps) {
                        if(! <#= HiddenFiltersVMPropertyName #>.Any(hfp => vmfn == hfp.fltrName)) {
                            insmi = false;
                            break;
                        }
                    }
                    if(insmi) {
                        rslt.Add( 
                            new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= ScanByUkModePropertyName + caption #>", Caption="filter by <#= caption #>", IconName=<#= IconFontClassName #>.Refresh, IconColor=Color.Default, Enabled=true, Data=null, Command = <#= TableMenuItemsCommandPropertyName #>}
                        );
                    }
                }
            }

<#
                    } // if ((UkPropsUsedByFltrCount > 0) && (requiredForeigKeyPropList != null)) { ... }
                } // if (!indIsCorrect) { ... } else { ... }
            } // for(int i = 0; i < uniqueKeys.Count; i++) { ... }
        } // if (Model.IsWebApiSelectOneByPrimarykey) { ... }
    }
#>
            if(hasNtExternal && this.CnFllscn) {
                rslt.Insert(
                    0, new <#= WebServiceFilterMenuViewModelClassName #>() { Id = "<#= FullScanPropertyName #>", Caption="full scan", IconName=<#= IconFontClassName #>.Refresh, IconColor=Color.Default, Enabled=true, Data=null, Command = <#= TableMenuItemsCommandPropertyName #>}
                );
            }
            return rslt;
        }
        #endregion
    }
}


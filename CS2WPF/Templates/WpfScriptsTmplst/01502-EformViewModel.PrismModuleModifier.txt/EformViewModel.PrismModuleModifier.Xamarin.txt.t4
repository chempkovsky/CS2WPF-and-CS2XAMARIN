<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="jsonpmm2txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
<#

    string EformModeEnumFolder                      = "00026-EformModeEnum.cs";
    string EformModeEnumClassName                   = GetContextModelClassName(Context, EformModeEnumFolder);
    string EformModeEnumNameSpace                   = GetContextModelNameSpace(Context, EformModeEnumFolder);

    string IAppGlblSettingsServiceFolder            = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName         = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace         = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);

    string BindingContextFeedbackFolder             = "00166-BindingContextFeedback.cs";
    string BindingContextFeedbackClassName          = GetContextModelClassName(Context, BindingContextFeedbackFolder);
    string BindingContextFeedbackNameSpace          = GetContextModelNameSpace(Context, BindingContextFeedbackFolder);

    string IEformViewModelInterfaceFolder           = "00199-IEformViewModelInterface.cs";
    string IEformViewModelInterfaceClassName        = GetContextModelClassName(Context, IEformViewModelInterfaceFolder);
    string IEformViewModelInterfaceNameSpace        = GetContextModelNameSpace(Context, IEformViewModelInterfaceFolder);


    string IWebServiceFilterRsltInterfaceFolder     = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName  = GetContextModelClassName(Context, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace  = GetContextModelNameSpace(Context, IWebServiceFilterRsltInterfaceFolder);

    string WebServiceFilterRsltViewModelFolder      = "00215-WebServiceFilterRsltViewModel.cs";
    string WebServiceFilterRsltViewModelClassName   = GetContextModelClassName(Context, WebServiceFilterRsltViewModelFolder);
    string WebServiceFilterRsltViewModelNameSpace   = GetContextModelNameSpace(Context, WebServiceFilterRsltViewModelFolder);

    string IBindingContextChangedFolder             = "00220-IBindingContextChanged.cs";
    string IBindingContextChangedClassName          = GetContextModelClassName(Context, IBindingContextChangedFolder);
    string IBindingContextChangedNameSpace          = GetContextModelNameSpace(Context, IBindingContextChangedFolder);

    string SdlgViewModelBaseFolder                  = "00633-SdlgViewModelBase.cs";
    string SdlgViewModelBaseClassName               = GetContextModelClassName(Context, SdlgViewModelBaseFolder);
    string SdlgViewModelBaseNameSpace               = GetContextModelNameSpace(Context, SdlgViewModelBaseFolder);

    string modelInterfaceFolder                     = "01100-Interface.cs";
    string modelInterfaceClassName                  = GetInterfaceName(Model);
    string modelInterfaceNameSpace                  = GetModelNameSpace(Model, modelInterfaceFolder);

    string NotifyInterfaceFolder                    = "01104-NotifyInterface.cs";
    string NotifyInterfaceClassName                 = GetNotifyInterfaceName(Model);
    string NotifyInterfaceNameSpace                 = GetModelNameSpace(Model, NotifyInterfaceFolder);

    string modelPageInterfaceFolder                 = "01200-Page.interface.cs";
    string modelPageInterfaceClassName              = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace              = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelFilterInterfaceFolder               = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName            = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace            = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelFilterFolder                        = "01302-Filter.model.cs";
    string modelFilterClassName                     = GetFilterName(Model);
    string modelFilterNameSpace                     = GetModelNameSpace(Model, modelFilterFolder);

    string modelServiceInterfaceFolder              = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName           = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace           = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string SdlgViewModelFolder                      = "01440-SdlgViewModel.cs";
    //string SdlgViewModelClassName                   = GetModelClassName(Model, SdlgViewModelFolder);
    //string SdlgViewModelNameSpace                   = GetModelNameSpace(Model, SdlgViewModelFolder);

    string EformUserControlFolder                   = "01496-EformUserControl.xaml.cs";
    string EformUserControlClassName                = GetModelClassName(Model, EformUserControlFolder);
    string EformUserControlNameSpace                = GetModelNameSpace(Model, EformUserControlFolder);
    string EformUserControlProject                  = GetModelProjectName(Model, EformUserControlFolder);

    string EformViewModelFolder                     = "01500-EformViewModel.cs";
    string EformViewModelClassName                  = GetModelClassName(Model, EformViewModelFolder);
    string EformViewModelNameSpace                  = GetModelNameSpace(Model, EformViewModelFolder);
    string EformViewModelProject                    = GetModelProjectName(Model, EformViewModelFolder);


    string EformModePropertyName                    = "EformMode";
    string EformModeVMPropertyName                  = "EformModeVM";
    string OnEformModeChangedPropertyName           = "OnEformModeChanged";
    string EformModeChangedPropertyName             = "EformModeChanged";

    string FormControlModelPropertyName             = "FormControlModel";
    string FormControlModelVMPropertyName           = "FormControlModelVM";
    string OnFormControlModelChangedPropertyName    = "OnFormControlModelChanged";
    string FormControlModelChangedPropertyName      = "FormControlModelChanged";

    string HiddenFiltersPropertyName                = "HiddenFilters";
    string HiddenFiltersVMPropertyName              = "HiddenFiltersVM";

    string OnHiddenFiltersChangedPropertyName       = "OnHiddenFiltersChanged";
    string HiddenFiltersPropertyChangedPropertyName = "HiddenFiltersPropertyChanged";

    string IsOnLoadedCalledPropertyName             = "IsOnLoadedCalled";
    string IsLoadingPropertyName                    = "IsLoading";
    string OnLoadedPropertyName                     = "OnLoaded";

    string OnAutoSuggestBoxTextChangedPropertyName   = "OnAutoSuggestBoxTextChanged";
    string OnAutoSuggestBoxQuerySubmittedPropertyName= "OnAutoSuggestBoxQuerySubmitted";


    string ComboSufix                = "CmbCntrl";
    string ComboErrorSufix           = "CmbCntrlSuffixError"; // ComboSufix  + "SuffixError" it is used by RaiseErrorsChanged(string propertyName)
    string ButtonSufix               = "BttnItm";
    string ButtonErrorSufix          = "BttnItmSuffixError"; // ButtonSufix + "SuffixError" it is used by RaiseErrorsChanged(string propertyName)
    string TypeaheadSufix            = "TphdCntrl";
    string TypeaheadErrorSufix       = "TphdCntrlSuffixError"; // TypeaheadSufix + "SuffixError" it is used by RaiseErrorsChanged(string propertyName)
    string TypeaheadTextSufix        = "TphdCntrlText";
    string TypeaheadItemsSourceSufix = "TphdCntrlItemsSource";
    string TypeaheadCalledSufix      = "TphdCntrlCalled";
    string ValueErrorSufix           = "SuffixError"; // ValueField + "SuffixError" it is used by RaiseErrorsChanged(string propertyName)

    string FormServicePrefix        = "FrmSrv";
    string EnabledSufix             = "Enabled";
    string FilterOperatorSuffix     = "Oprtr";
    string SearchClickSufix         = "SrchClck";


    string RegionPropertyName       = "Region";
    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";


    string FormRootServicePropertyName      = "FrmRootSrv";
    string AppSettingServicePropertyName    = "GlblSettingsSrv";
    string TitleCaptionVal                  = "Select Item";


    string GetAllMethodName                 = "getall";
    string GetWithFilterMethodName          = "getwithfilter";
    string GetOneMethodName                 = "getone";
    string UpdateOneMethodName              = "updateone";
    string AddOneMethodName                 = "addone";
    string DeleteOneMethodName              = "deleteone";
    string CopyToModelMethodName            = "CopyToModel";
    string CopyToModelNotifyMethodName      = "CopyToModelNotify";
    string ShowErrorMethodName              = "ShowErrorMessage";

    string SubmitCommandPropertyName        = "SubmitCommand";
    string CancelCommandPropertyName        = "CancelCommand";

    string BindingContextFeedbackRefPropertyName    = "BindingContextFeedbackRef";

    string UIDispatcherInvokePropertyName   =       "await MainThread.InvokeOnMainThreadAsync";

    List<string> FKViewsDict =  GetFKViewsList(Model, Context, new List<string>());
    if (! FKViewsDict.Contains(Model.ViewName) ) {
        FKViewsDict.Add(Model.ViewName);
    }

    List<string> SDViewsDict = GetSearchDialogViewsList(Model, Context, new List<string>());

    bool ModelHasAutoCompleteTextBox = false;
    bool ModelHasAutoSearchTextBox = false;
    bool ModelHasDoInitMethod = false;
    bool ModeAddEqualUpdate = true;
    bool ModeAddEqualDelete = true;
    bool ModeUpdateEqualDelete = true;
   

    foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
        ModelHasAutoCompleteTextBox = ModelHasAutoCompleteTextBox ?  ModelHasAutoCompleteTextBox :
                                                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ;
        ModelHasAutoSearchTextBox = ModelHasAutoSearchTextBox ?  ModelHasAutoSearchTextBox :
                                                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                                                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ;
        if(!ModelHasDoInitMethod) {
            if (modelViewUIFormPropertySerializable.IsShownInView) { 
                for(int inptTp = 1; inptTp < 4; inptTp++) {
                    if(HasInitMethodForInputMode(modelViewUIFormPropertySerializable, Model, inptTp)) {
                        if ( GetDirectDetails(modelViewUIFormPropertySerializable, Model, Context, inptTp).Count < 1) {
                            ModelHasDoInitMethod = true;
                            break;
                        }
                    }
                }
            }
        }
        if (ModeAddEqualUpdate) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog)) {
                ModeAddEqualUpdate = (modelViewUIFormPropertySerializable.InputTypeWhenAdd == modelViewUIFormPropertySerializable.InputTypeWhenUpdate);
                if (ModeAddEqualUpdate) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd ))) {
                        ModeAddEqualUpdate =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                    }
                }
            }
        }
        if (ModeAddEqualDelete) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog)) {
                ModeAddEqualDelete = (modelViewUIFormPropertySerializable.InputTypeWhenAdd == modelViewUIFormPropertySerializable.InputTypeWhenDelete);
                if (ModeAddEqualDelete) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel ))) {
                        ModeAddEqualDelete =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                    }
                }
            }
        }
        if (ModeUpdateEqualDelete) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||

            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
            (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog)) {
                ModeUpdateEqualDelete = (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == modelViewUIFormPropertySerializable.InputTypeWhenDelete);
                if (ModeUpdateEqualDelete) {
                    if( (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd )) ||
                        (!string.IsNullOrEmpty( modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel ))) {
                        ModeUpdateEqualDelete =
                            modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd ==  modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                    }
                }
            }
        }
    }


    List<string> nmSpaces = new List<string>();
    if ((EformViewModelNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
    if ((EformViewModelNameSpace != modelInterfaceNameSpace) && (nmSpaces.IndexOf(modelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelInterfaceNameSpace);
    if ((EformViewModelNameSpace != EformModeEnumNameSpace) && (nmSpaces.IndexOf(EformModeEnumNameSpace) < 0)) 
        nmSpaces.Add(EformModeEnumNameSpace);
    if ((EformViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((EformViewModelNameSpace != WebServiceFilterRsltViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltViewModelNameSpace);
    if ((EformViewModelNameSpace != NotifyInterfaceNameSpace) && (nmSpaces.IndexOf(NotifyInterfaceNameSpace) < 0)) 
        nmSpaces.Add(NotifyInterfaceNameSpace);
    if ((EformViewModelNameSpace != BindingContextFeedbackNameSpace) && (nmSpaces.IndexOf(BindingContextFeedbackNameSpace) < 0)) 
        nmSpaces.Add(BindingContextFeedbackNameSpace);
    if ((EformViewModelNameSpace != IBindingContextChangedNameSpace) && (nmSpaces.IndexOf(IBindingContextChangedNameSpace) < 0)) 
        nmSpaces.Add(IBindingContextChangedNameSpace);
    if ((EformViewModelNameSpace != IEformViewModelInterfaceNameSpace) && (nmSpaces.IndexOf(IEformViewModelInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IEformViewModelInterfaceNameSpace);

        

    foreach(string viewNm in FKViewsDict) {
        ModelViewSerializable locmodel = GetModelByName(Context, viewNm);
        if (locmodel == null) continue;
        string nmspc = GetModelNameSpace(locmodel, modelInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        nmspc = GetModelNameSpace(locmodel, modelPageInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        nmspc = GetModelNameSpace(locmodel, modelFilterInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        // nmspc = GetModelNameSpace(locmodel, modelFilterNameSpace);
        // if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);
        nmspc = GetModelNameSpace(locmodel, modelServiceInterfaceFolder);
        if ((EformViewModelNameSpace != nmspc) && (nmSpaces.IndexOf(nmspc) < 0)) nmSpaces.Add(nmspc);

        
    }

#>
{
"PrismMMMCallItems": [

<#

    {
        List<string> searchViewNames= new List<string>();
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in Model.UIFormProperties) {
            for(int inptTp = 1; inptTp < 4; inptTp++) {
                if (GetInputTypeWhenXXX(modelViewUIFormPropertySerializable, inptTp) == InputTypeEnum.SearchDialog) {
                    string viewName = GetViewNameForControlList(modelViewUIFormPropertySerializable, Model, Context, inptTp);
                    if (!string.IsNullOrEmpty(viewName)) {
                        if(searchViewNames.IndexOf(viewName) < 0) searchViewNames.Add(viewName);
                    }
                }
            }
        }
        foreach(string searchViewName in searchViewNames) {
            ModelViewSerializable searchView = GetModelByName(Context, searchViewName);
            string localSdlgUserControlFolder       = "01436-SdlgUserControl.xaml.cs";
            string localSdlgUserControlClassName    = GetModelClassName(searchView, localSdlgUserControlFolder);
            string localSdlgUserControlNameSpace     = GetModelNameSpace(searchView, localSdlgUserControlFolder);
            string localSdlgUserControlProject      = GetModelProjectName(searchView, localSdlgUserControlFolder);
            string localSdlgViewModelFolder         = "01440-SdlgViewModel.cs";
            string localSdlgViewModelClassName      = GetModelClassName(searchView, localSdlgViewModelFolder);
            string localSdlgViewModelNameSpace      = GetModelNameSpace(searchView, localSdlgViewModelFolder);
            string localSdlgViewModelProject        = GetModelProjectName(searchView, localSdlgViewModelFolder);
#>
    {
    "Description": [
       ' Reminder:',
       ' "<#= localSdlgUserControlClassName #>" UserControl is defined in the "<#= localSdlgUserControlProject #>"-project.',
       ' In the file of IModule-class of "<#= localSdlgUserControlProject #>"-project the following line of code must be inserted:',
       ' ',
       '     public void RegisterTypes(IContainerRegistry containerRegistry)',
       '     {',
       '         ...',
       '         // According to requirements of the "<#= localSdlgViewModelClassName #>.cs"-file of "<#= localSdlgViewModelProject #>"-project. ',
       '         containerRegistry.RegisterDialog<<#= localSdlgUserControlClassName #>, <#= SdlgViewModelBaseClassName #>>("<#= localSdlgViewModelClassName #>");',
       '         ...',
       '     }',
    ],
<#
{
    string localSdlgUserControlClassNameNameSpaceAndClassName   = localSdlgUserControlNameSpace + "." + localSdlgUserControlClassName;
    string SdlgViewModelBaseNameSpaceAndClassName               = SdlgViewModelBaseNameSpace + "." + SdlgViewModelBaseClassName;
    string destProjectName                                      = GetModelProjectUniqueName(Model, localSdlgUserControlFolder);
    string destImplementedInterface                             = "Prism.Modularity.IModule";
    string destMethodName                                       = "RegisterTypes";
    string[] destMethodParamTypes                               = new string[] {"Prism.Ioc.IContainerRegistry"};
    string destMethodAccessType                                 = "public";
    string invocationParamType                                  = "Prism.Ioc.IContainerRegistry";
    string invocationMethodName                                 = "RegisterDialog";
    string[] invocationGenerics                                 = new string[]{localSdlgUserControlClassNameNameSpaceAndClassName,SdlgViewModelBaseNameSpaceAndClassName};
    string[] invocationParams                                   = new string[]{"\"" + localSdlgViewModelClassName +"\""};
    //result = PrismModifier.UpdateMethodWithParamIdentifier(destProjectName,  destImplementedInterface, destMethodName, destMethodParamTypes, destMethodAccessType,
    //                    invocationParamType, invocationMethodName, invocationGenerics, invocationParams);
#>
    "MethodName": 'UpdateMethodWithParamIdentifier',
    "DestProjectName": '<#= destProjectName #>',
    "DestImplementedInterface": '<#= destImplementedInterface #>',
    "DestMethodName": '<#= destMethodName #>',
    "DestMethodParamTypes": ['<#= destMethodParamTypes[0] #>'],
    "DestMethodAccessType": '<#= destMethodAccessType #>',
    "DestMethodParamTypeForVar": '',
    "InvocationVarType": '',
    "InvocationParamType": '<#= invocationParamType #>',
    "InvocationClassType": '',
    "InvocationMethodName": '<#= invocationMethodName #>',
    "InvocationGenerics": ['<#= invocationGenerics[0] #>', '<#= invocationGenerics[1] #>'],
    "InvocationParams": ['<#= invocationParams[0] #>'],
    "StepDescription": 'Insertion the line : containerRegistry.RegisterDialog<<#= localSdlgUserControlClassName #>, <#= SdlgViewModelBaseClassName #>>("<#= localSdlgViewModelClassName #>");'
    },
<#
}
        }
    }
#>


    {
    "Description": [

    '"<#= EformUserControlClassName #>" UserControl is defined in the "<#= EformUserControlProject #>"-project.',
    'In the file of IModule-class of "<#= EformUserControlProject #>"-project the following line of code must be inserted:',
    ' ',
    '    public void RegisterTypes(IContainerRegistry containerRegistry)',
    '    {',
    '        ...',
    '        // According to requirements of the "<#= EformViewModelClassName #>.cs"-file of "<#= EformViewModelProject #>"-project. ',
    '        ViewModelLocationProvider.Register<<#= EformUserControlClassName #>, <#= EformViewModelClassName #>>();',
    '        // According to requirements of the "<#= EformViewModelClassName #>.cs"-file of "<#= EformViewModelProject #>"-project. ',
    '        containerRegistry.Register<ContentView, <#= EformUserControlClassName #>>("<#= EformUserControlClassName #>");',
    '        ...',
    '    }'
    ],
    

<#
    {
    string EformUserControlNameSpaceAndClassName            = EformUserControlNameSpace + "." + EformUserControlClassName;
    string EformViewModelNameSpaceAndClassName              = EformViewModelNameSpace + "." + EformViewModelClassName;
    string destProjectName                                  = GetModelProjectUniqueName(Model, EformUserControlFolder);
    string destImplementedInterface                         = "Prism.Modularity.IModule";
    string destMethodName                                   = "RegisterTypes";
    string[] destMethodParamTypes                           = new string[] {"Prism.Ioc.IContainerRegistry"};
    string destMethodAccessType                             = "public";
    string invocationClassType                              = "Prism.Mvvm.ViewModelLocationProvider";
    string invocationMethodName                             = "Register";
    string[] invocationGenerics                             = new string[]{EformUserControlNameSpaceAndClassName, EformViewModelNameSpaceAndClassName};
    string[] invocationParams                               = new string[]{};
    //result = PrismModifier.UpdateMethodWithClassIdentifier(destProjectName,  destImplementedInterface, destMethodName, destMethodParamTypes, destMethodAccessType,
    //                    invocationClassType, invocationMethodName, invocationGenerics, invocationParams);
#>
    "MethodName": 'UpdateMethodWithClassIdentifier',
    "DestProjectName": '<#= destProjectName #>',
    "DestImplementedInterface": '<#= destImplementedInterface #>',
    "DestMethodName": '<#= destMethodName #>',
    "DestMethodParamTypes": ['<#= destMethodParamTypes[0] #>'],
    "DestMethodAccessType": '<#= destMethodAccessType #>',
    "DestMethodParamTypeForVar": '',
    "InvocationVarType": '',
    "InvocationParamType": '',
    "InvocationClassType": '<#= invocationClassType #>',
    "InvocationMethodName": '<#= invocationMethodName #>',
    "InvocationGenerics": ['<#= invocationGenerics[0] #>','<#= invocationGenerics[1] #>'],
    "InvocationParams": [],
    "StepDescription": 'Insertion the line : ViewModelLocationProvider.Register<<#= EformUserControlClassName #>, <#= EformViewModelClassName #>>();'
    },
<#
    }
#>


<#
{
    string EformUserControlNameSpaceAndClassName            = EformUserControlNameSpace + "." + EformUserControlClassName;
    string EformViewModelNameSpaceAndClassName              = EformViewModelNameSpace + "." + EformViewModelClassName;
    string destProjectName                                  = GetModelProjectUniqueName(Model, EformUserControlFolder);
    string destImplementedInterface                         = "Prism.Modularity.IModule";
    string destMethodName                                   = "RegisterTypes";
    string[] destMethodParamTypes                           = new string[] {"Prism.Ioc.IContainerRegistry"};
    string destMethodAccessType                             = "public";
    string invocationParamType                              = "Prism.Ioc.IContainerRegistry";
    string invocationMethodName                             = "Register";
    string[] invocationGenerics                             = new string[]{"Xamarin.Forms.ContentView",EformUserControlNameSpaceAndClassName};
    string[] invocationParams                               = new string[]{"\""+ EformUserControlClassName +"\""};
    //result = PrismModifier.UpdateMethodWithParamIdentifier(destProjectName,  destImplementedInterface, destMethodName, destMethodParamTypes, destMethodAccessType,
    //                    invocationParamType, invocationMethodName, invocationGenerics, invocationParams);
#>  
   {
    "Description": [],
    "MethodName": 'UpdateMethodWithParamIdentifier',
    "DestProjectName": '<#= destProjectName #>',
    "DestImplementedInterface": '<#= destImplementedInterface #>',
    "DestMethodName": '<#= destMethodName #>',
    "DestMethodParamTypes": ['<#= destMethodParamTypes[0] #>'],
    "DestMethodAccessType": '<#= destMethodAccessType #>',
    "DestMethodParamTypeForVar": '',
    "InvocationVarType": '',
    "InvocationParamType": '<#= invocationParamType #>',
    "InvocationClassType": '',
    "InvocationMethodName": '<#= invocationMethodName #>',
    "InvocationGenerics": ['<#= invocationGenerics[0] #>','<#= invocationGenerics[1] #>'],
    "InvocationParams": ['<#= invocationParams[0]  #>'],
    "StepDescription": 'Insertion the line : containerRegistry.Register<ContentView, <#= EformUserControlClassName #>>("<#= EformUserControlClassName #>");'
    },
<#

}
#>
    ]
}



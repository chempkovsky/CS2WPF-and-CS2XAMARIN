<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
using System.Collections.Generic;
using System.Windows.Input;
using System.Collections.ObjectModel;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using Xamarin.Essentials;
using System.Threading.Tasks;
using System.Linq;
using System.Collections;

<#
    string convertHelperModelFolder      = "00150-ConvertHelper.cs";
    string convertHelperModelClassName   = GetModelClassName(Model, convertHelperModelFolder);
    string convertHelperModelNameSpace   = GetModelNameSpace(Model, convertHelperModelFolder);

    string IWebServiceFilterRsltInterfaceFolder      = "00204-IWebServiceFilterRsltInterface.cs";
    string IWebServiceFilterRsltInterfaceClassName   = GetModelClassName(Model, IWebServiceFilterRsltInterfaceFolder);
    string IWebServiceFilterRsltInterfaceNameSpace   = GetModelNameSpace(Model, IWebServiceFilterRsltInterfaceFolder);

    string WebServiceFilterOperatorViewModelFolder      = "00213-WebServiceFilterOperatorViewModel.cs";
    string WebServiceFilterOperatorViewModelClassName   = GetModelClassName(Model, WebServiceFilterOperatorViewModelFolder);
    string WebServiceFilterOperatorViewModelNameSpace   = GetModelNameSpace(Model, WebServiceFilterOperatorViewModelFolder);

    string WebServiceFilterRsltFolder      = "00214-WebServiceFilterRslt.cs";
    string WebServiceFilterRsltClassName   = GetModelClassName(Model, WebServiceFilterRsltFolder);
    string WebServiceFilterRsltNameSpace   = GetModelNameSpace(Model, WebServiceFilterRsltFolder);

    string WebServiceFilterMenuViewModelFolder          = "00217-WebServiceFilterMenuViewModel.cs";
    string WebServiceFilterMenuViewModelClassName       = GetModelClassName(Model, WebServiceFilterMenuViewModelFolder);
    string WebServiceFilterMenuViewModelNameSpace       = GetModelNameSpace(Model, WebServiceFilterMenuViewModelFolder);

    string IUniqServiceFilterDefInterfaceFolder         = "00246-IUniqServiceFilterDefInterface.cs";
    string IUniqServiceFilterDefInterfaceClassName      = GetModelClassName(Model, IUniqServiceFilterDefInterfaceFolder);
    string IUniqServiceFilterDefInterfaceNameSpace      = GetModelNameSpace(Model, IUniqServiceFilterDefInterfaceFolder);

    string IWebServiceFilterViewModelInterfaceFolder    = "00239-IWebServiceFilterViewModelInterface.cs";
    string IWebServiceFilterViewModelInterfaceClassName = GetModelClassName(Model, IWebServiceFilterViewModelInterfaceFolder);
    string IWebServiceFilterViewModelInterfaceNameSpace = GetModelNameSpace(Model, IWebServiceFilterViewModelInterfaceFolder);

    string IWebServiceFilterMenuInterfaceFolder         = "00206-IWebServiceFilterMenuInterface.cs";
    string IWebServiceFilterMenuInterfaceClassName      = GetModelClassName(Model, IWebServiceFilterMenuInterfaceFolder);
    string IWebServiceFilterMenuInterfaceNameSpace      = GetModelNameSpace(Model, IWebServiceFilterMenuInterfaceFolder);

    string UniqServiceFilterUserControlFolder           = "00248-UniqServiceFilterUserControl.xaml.cs";
    string UniqServiceFilterUserControlClassName        = GetModelClassName(Model, UniqServiceFilterUserControlFolder);
    string UniqServiceFilterUserControlNameSpace        = GetModelNameSpace(Model, UniqServiceFilterUserControlFolder);

    string CaptionPropertyName = "Caption";
    string FilterHeightPropertyName = "FilterHeight";
    string FilterDefinitionsPropertyName = "FilterDefinitions";
    string ShowBackBtnPropertyName = "ShowBackBtn";
    string ContainerMenuItemsPropertyName = "ContainerMenuItems";
    string CurrentContainerMenuItemsPropertyName = "CurrentContainerMenuItems";
    string ApplyFilterBtnClickedNotificationPropertyName = "ApplyFilterBtnClickedNotification";
    string ApplyFilterBtnClickedCommandPropertyName = "ApplyFilterBtnClickedCommand";
    string AddFilterBtnClickedCommandPropertyName = "AddFilterBtnClickedCommand";
    string SelectedModelRefPropertyName = "SelectedModelRef";

    //////////////////////////////// 

    string FilterCommandPropertyName = "FilterCommand";
    string OnFilterCommandPropertyName = "OnFilterCommand";
    string NavigationBackCommandPropertyName = "NavigationBackCommand";
    string OnNavigationBackCommandPropertyName = "OnNavigationBackCommand";
    string AddWebServiceFilterItemCommandPropertyName = "AddWebServiceFilterItemCommand";
    string ContainerMenuItemsCommandPropertyName = "ContainerMenuItemsCommand";
    string OnContainerMenuItemsCommandPropertyName = "OnContainerMenuItemsCommand";

    ////////////////////////////////
    string InternalContentProperty              = "InternalContent";
    string IsDestroyedPropertyName              = "IsDestroyed";
    string OnDestroyedPropertyName              = "OnDestroyed";
    string IsGridFlexPropertyName               = "IsGridFlex";
    string TextChangedCommandPropertyName       = "TextChangedCommand";
    string QuerySubmittedCommandPropertyName    = "QuerySubmitted";
    string QuerySubmittedExPropertyName         = "QuerySubmittedEx";
    string UnfocusedCommandPropertyName         = "UnfocusedCommand";
    string HiddenFiltersPropertyName            = "HiddenFilters";


    List<string> nmSpaces = new List<string>();
    if (UniqServiceFilterUserControlNameSpace != IUniqServiceFilterDefInterfaceNameSpace) nmSpaces.Add(IUniqServiceFilterDefInterfaceNameSpace);
    if ((UniqServiceFilterUserControlNameSpace != IWebServiceFilterMenuInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterMenuInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterMenuInterfaceNameSpace);
    if ((UniqServiceFilterUserControlNameSpace != WebServiceFilterMenuViewModelNameSpace) && (nmSpaces.IndexOf(WebServiceFilterMenuViewModelNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterMenuViewModelNameSpace);
    if ((UniqServiceFilterUserControlNameSpace != convertHelperModelNameSpace) && (nmSpaces.IndexOf(convertHelperModelNameSpace) < 0)) 
        nmSpaces.Add(convertHelperModelNameSpace);
    if ((UniqServiceFilterUserControlNameSpace != WebServiceFilterRsltNameSpace) && (nmSpaces.IndexOf(WebServiceFilterRsltNameSpace) < 0)) 
        nmSpaces.Add(WebServiceFilterRsltNameSpace);
    if ((UniqServiceFilterUserControlNameSpace != IWebServiceFilterRsltInterfaceNameSpace) && (nmSpaces.IndexOf(IWebServiceFilterRsltInterfaceNameSpace) < 0)) 
        nmSpaces.Add(IWebServiceFilterRsltInterfaceNameSpace);
        
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>


namespace <#= UniqServiceFilterUserControlNameSpace #> {
    /// <summary>
    /// Interaction logic for <#= UniqServiceFilterUserControlClassName #>.xaml
    /// </summary>
    public partial class <#= UniqServiceFilterUserControlClassName #>: ContentView
    {

        public <#= UniqServiceFilterUserControlClassName #>()
        {
            InitializeComponent();
        }
        #region <#= CaptionPropertyName #>
        public static readonly BindableProperty <#= CaptionPropertyName #>Property =
                BindableProperty.Create(
                "<#= CaptionPropertyName #>", typeof(string),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                null);
        public string <#= CaptionPropertyName #>
        {
            get
            {
                return (string)GetValue(<#= CaptionPropertyName #>Property);
            }
            set
            {
                SetValue(<#= CaptionPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= ShowBackBtnPropertyName #>
        public static readonly BindableProperty <#= ShowBackBtnPropertyName #>Property =
                BindableProperty.Create(
                "<#= ShowBackBtnPropertyName #>", typeof(bool),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                false);
        public bool <#= ShowBackBtnPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= ShowBackBtnPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ShowBackBtnPropertyName #>Property, value);
            }
        }
        #endregion
        #region <#= OnNavigationBackCommandPropertyName #>
        public static readonly BindableProperty <#= NavigationBackCommandPropertyName #>Property =
            BindableProperty.Create(nameof(<#= NavigationBackCommandPropertyName #>), typeof(ICommand), typeof(<#= UniqServiceFilterUserControlClassName #>), null);
        public ICommand <#= NavigationBackCommandPropertyName #>
        {
            get { return (ICommand)GetValue(<#= NavigationBackCommandPropertyName #>Property); }
            set { SetValue(<#= NavigationBackCommandPropertyName #>Property, value); }
        }

        protected ICommand _<#= OnNavigationBackCommandPropertyName #> = null;
        public ICommand <#= OnNavigationBackCommandPropertyName #>
        {
            get
            {
                return _<#= OnNavigationBackCommandPropertyName #> ?? (_<#= OnNavigationBackCommandPropertyName #> = new Command(() => <#= OnNavigationBackCommandPropertyName #>Execute(), () => <#= OnNavigationBackCommandPropertyName #>CanExecute()));
            }
        }
        protected void <#= OnNavigationBackCommandPropertyName #>Execute()
        {
            if(<#= IsDestroyedPropertyName #>) return;
            ICommand cmd = <#= NavigationBackCommandPropertyName #>;
            if(cmd != null) {
                if(cmd.CanExecute(this)) cmd.Execute(this);
            }
        }
        protected bool <#= OnNavigationBackCommandPropertyName #>CanExecute()
        {
            return true;
        }
        #endregion
        
        #region <#= InternalContentProperty #>
        int _<#= InternalContentProperty #> = 0;
        protected void <#= InternalContentProperty #>Changed()
        {
            if (_<#= InternalContentProperty #> < 10) _<#= InternalContentProperty #>++; else _<#= InternalContentProperty #> = 0;
            MainThread.InvokeOnMainThreadAsync(async () =>
            {
                await Task.Delay(1);
                this.OnPropertyChanged("<#= InternalContentProperty #>");
            });
        }
        public int <#= InternalContentProperty #>
        {
            get { return _<#= InternalContentProperty #>; }
        }
        #endregion

        #region <#= FilterDefinitionsPropertyName #>
        private static void <#= FilterDefinitionsPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= UniqServiceFilterUserControlClassName #> inst = d as <#= UniqServiceFilterUserControlClassName #>;
            if (inst != null)
            {
                if(inst.<#= IsDestroyedPropertyName #>) return;
                bool gf = inst.<#= IsGridFlexPropertyName #>;
                if(gf) inst.<#= IsGridFlexPropertyName #> = false;
<#
    for (int i = 1; i < 9; i++) {
#>
                inst.OnPropertyChanged("IsVisible<#= i #>");
                inst.OnPropertyChanged("DisplayMemberPath<#= i #>");
                inst.OnPropertyChanged("TextMemberPath<#= i #>");
                inst.OnPropertyChanged("Caption<#= i #>");
<#
    }
#>
                if(gf) inst.<#= IsGridFlexPropertyName #> = true;
                inst.<#= InternalContentProperty #>Changed();
            }
        }
        public static readonly BindableProperty <#= FilterDefinitionsPropertyName #>Property =
                BindableProperty.Create(
                "<#= FilterDefinitionsPropertyName #>", typeof(IList<<#= IUniqServiceFilterDefInterfaceClassName #>>),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                null, propertyChanged: <#= FilterDefinitionsPropertyName #>Changed);
        public IList<<#= IUniqServiceFilterDefInterfaceClassName #>> <#= FilterDefinitionsPropertyName #>
        {
            get
            {
                return (IList<<#= IUniqServiceFilterDefInterfaceClassName #>>)GetValue(<#= FilterDefinitionsPropertyName #>Property);
            }
            set
            {
                SetValue(<#= FilterDefinitionsPropertyName #>Property, value);
            }
        }
        #endregion

        #region <#= CurrentContainerMenuItemsPropertyName #>
        protected ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> _<#= CurrentContainerMenuItemsPropertyName #> = new ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>>();
        public ObservableCollection<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= CurrentContainerMenuItemsPropertyName #> { get {return _<#= CurrentContainerMenuItemsPropertyName #>; } }
        public void <#= CurrentContainerMenuItemsPropertyName #>Clear() {
            if(_<#= CurrentContainerMenuItemsPropertyName #> != null) {
                foreach(<#= IWebServiceFilterMenuInterfaceClassName #> itm in _<#= CurrentContainerMenuItemsPropertyName #>) {
                    itm.<#= IsDestroyedPropertyName #> = true;
                }
                _<#= CurrentContainerMenuItemsPropertyName #>.Clear();
            }
        }
        #endregion

        #region <#= ContainerMenuItemsPropertyName #>
        private static void <#= ContainerMenuItemsPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= UniqServiceFilterUserControlClassName #> inst = d as <#= UniqServiceFilterUserControlClassName #>;
            if (inst != null)
            {
                inst.<#= CurrentContainerMenuItemsPropertyName #>Clear();
                if(inst.<#= IsDestroyedPropertyName #>) return;
                IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> cmitms =  newValue as IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>;
                if(cmitms != null) {
                    foreach(<#= IWebServiceFilterMenuInterfaceClassName #> itm in cmitms) {
                        inst.<#= CurrentContainerMenuItemsPropertyName #>.Add(
                            new <#= WebServiceFilterMenuViewModelClassName #>() {
                                Id = itm.Id,
                                Caption = itm.Caption,
                                IconName = itm.IconName,
                                IconColor = itm.IconColor,
                                Enabled = itm.Enabled,
                                Data = itm.Data,
                                FeedbackData = itm.FeedbackData,
                                Command = itm.Command,
                                <#= IsDestroyedPropertyName #> = itm.<#= IsDestroyedPropertyName #>
                            }
                        );
                    }
                }
            }
        }
        public static readonly BindableProperty <#= ContainerMenuItemsPropertyName #>Property =
                BindableProperty.Create(
                "<#= ContainerMenuItemsPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                propertyChanged: <#= ContainerMenuItemsPropertyName #>Changed);
        public IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>> <#= ContainerMenuItemsPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterMenuInterfaceClassName #>>)GetValue(<#= ContainerMenuItemsPropertyName #>Property);
            }
            set
            {
                SetValue(<#= ContainerMenuItemsPropertyName #>Property, value);
            }
        }
        #endregion

        #region <#= FilterCommandPropertyName #>
        public static readonly BindableProperty <#= FilterCommandPropertyName #>Property =
            BindableProperty.Create(nameof(<#= FilterCommandPropertyName #>), typeof(ICommand), typeof(<#= UniqServiceFilterUserControlClassName #>), 
            null); 
        public ICommand <#= FilterCommandPropertyName #>
        {
            get { return (ICommand)GetValue(<#= FilterCommandPropertyName #>Property); }
            set { SetValue(<#= FilterCommandPropertyName #>Property, value); }
        }
        #endregion

        #region <#= HiddenFiltersPropertyName #>
        public static readonly BindableProperty <#= HiddenFiltersPropertyName #>Property =
                BindableProperty.Create(
                "<#= HiddenFiltersPropertyName #>", typeof(IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                null);
        public IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>> <#= HiddenFiltersPropertyName #>
        {
            get
            {
                return (IEnumerable<<#= IWebServiceFilterRsltInterfaceClassName #>>)GetValue(<#= HiddenFiltersPropertyName #>Property);
            }
            set
            {
                SetValue(<#= HiddenFiltersPropertyName #>Property, value);
            }
        }
        #endregion

        #region <#= OnFilterCommandPropertyName #>
        protected IList<<#= IWebServiceFilterRsltInterfaceClassName #>> InternalDefineFilter()
        {
            IList<<#= IWebServiceFilterRsltInterfaceClassName #>> rslt = new List<<#= IWebServiceFilterRsltInterfaceClassName #>>();
            if(<#= FilterDefinitionsPropertyName #> != null) {
                int k = 1;
                foreach (var flt in <#= FilterDefinitionsPropertyName #>)
                {
                    if(k > 8) break;
                    object v = null;
                    switch (k)
                    {
<#
                    for(int k = 1; k < 9; k++) {
#>
                        case <#= k #>:
                            v = <#= convertHelperModelClassName #>.TryToConvert(flt.fltrDataType, Text<#= k #>);
                            break;
<#
                    }
#>

                        default:
                            break;
                    }
                    if (v is null) break;
                    rslt.Add(new <#= WebServiceFilterRsltClassName #>() { fltrName = flt.fltrName, fltrDataType = flt.fltrDataType, fltrOperator = "eq", fltrValue = v });
                    k++;
                }
            }
            if (<#= HiddenFiltersPropertyName #> != null)
            {
                foreach (<#= IWebServiceFilterRsltInterfaceClassName #> flt in <#= HiddenFiltersPropertyName #>)
                {
                    if (string.IsNullOrEmpty(flt.fltrError))
                    {
                        if ((flt.fltrValue != null) && (!string.IsNullOrEmpty(flt.fltrDataType)) && (!string.IsNullOrEmpty(flt.fltrOperator)))
                        {
                            object v = <#= convertHelperModelClassName #>.TryToConvert(flt.fltrDataType, flt.fltrValue);
                            if (v != null)
                            {
                                rslt.Add(new <#= WebServiceFilterRsltClassName #>() { fltrName = flt.fltrName, fltrDataType = flt.fltrDataType, fltrOperator = flt.fltrOperator, fltrValue = v });
                            }
                        }
                    }
                }
            }
            return rslt;
        }
        protected ICommand _<#= OnFilterCommandPropertyName #> = null;
        public ICommand <#= OnFilterCommandPropertyName #>
        {
            get
            {
                return _<#= OnFilterCommandPropertyName #> ?? (_<#= OnFilterCommandPropertyName #> = new Command(() => <#= OnFilterCommandPropertyName #>Execute(), () => <#= OnFilterCommandPropertyName #>CanExecute()));
            }
        }
        protected void <#= OnFilterCommandPropertyName #>Execute()
        {
            if(<#= IsDestroyedPropertyName #>) return;
            ICommand cmd = <#= FilterCommandPropertyName #>;
            if (cmd != null)
            {
                IList<<#= IWebServiceFilterRsltInterfaceClassName #>> flt = InternalDefineFilter();
                if(cmd.CanExecute(flt)) { 
                    cmd.Execute(flt);
                }
            }
        }
        protected bool <#= OnFilterCommandPropertyName #>CanExecute()
        {
            return true;
        }
        #endregion

        #region <#= OnContainerMenuItemsCommandPropertyName #>
        public static readonly BindableProperty <#= ContainerMenuItemsCommandPropertyName #>Property =
            BindableProperty.Create(nameof(<#= ContainerMenuItemsCommandPropertyName #>), typeof(ICommand), typeof(<#= UniqServiceFilterUserControlClassName #>), 
            null); 
        public ICommand <#= ContainerMenuItemsCommandPropertyName #>
        {
            get { return (ICommand)GetValue(<#= ContainerMenuItemsCommandPropertyName #>Property); }
            set { SetValue(<#= ContainerMenuItemsCommandPropertyName #>Property, value); }
        }

        protected ICommand _<#= OnContainerMenuItemsCommandPropertyName #> = null;
        public ICommand <#= OnContainerMenuItemsCommandPropertyName #>
        {
            get
            {
                return _<#= OnContainerMenuItemsCommandPropertyName #> ?? (_<#= OnContainerMenuItemsCommandPropertyName #> = new Command((p) => <#= OnContainerMenuItemsCommandPropertyName #>Execute(p), (p) => <#= OnContainerMenuItemsCommandPropertyName #>CanExecute(p)));
            }
        }
        protected void <#= OnContainerMenuItemsCommandPropertyName #>Execute(object p)
        {
            if(<#= IsDestroyedPropertyName #>) return;
            ICommand cmd = <#= ContainerMenuItemsCommandPropertyName #>;
            if(cmd != null) {
                if(cmd.CanExecute(p)) cmd.Execute(p);
            }
        }
        protected bool <#= OnContainerMenuItemsCommandPropertyName #>CanExecute(object p)
        {
            return true;
        }
        #endregion

        #region <#= FilterHeightPropertyName #>
        public static readonly BindableProperty <#= FilterHeightPropertyName #>Property =
                BindableProperty.Create(
                "<#= FilterHeightPropertyName #>", typeof(double),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                -1d);
        public double <#= FilterHeightPropertyName #>
        {
            get
            {
                return (double)GetValue(<#= FilterHeightPropertyName #>Property);
            }
            set
            {
                SetValue(<#= FilterHeightPropertyName #>Property, value);
            }
        }
        #endregion

        #region <#= IsGridFlexPropertyName #>Property
        public static readonly BindableProperty <#= IsGridFlexPropertyName #>Property =
                BindableProperty.Create(
                "<#= IsGridFlexPropertyName #>", typeof(bool),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                true);
        public bool <#= IsGridFlexPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= IsGridFlexPropertyName #>Property);
            }
            set
            {
                SetValue(<#= IsGridFlexPropertyName #>Property, value);
            }
        }
        #endregion

        #region <#= IsDestroyedPropertyName #>
        public virtual void <#= OnDestroyedPropertyName #>()
        {
            RemoveBinding(<#= IsDestroyedPropertyName #>Property);
            <#= IsDestroyedPropertyName #> = true;
            RemoveBinding(<#= IsGridFlexPropertyName #>Property);
            RemoveBinding(<#= CaptionPropertyName #>Property);
            RemoveBinding(<#= ShowBackBtnPropertyName #>Property);
            RemoveBinding(<#= NavigationBackCommandPropertyName #>Property);
            RemoveBinding(<#= FilterDefinitionsPropertyName #>Property);
            RemoveBinding(<#= ContainerMenuItemsPropertyName #>Property);
            RemoveBinding(<#= FilterCommandPropertyName #>Property);
            RemoveBinding(<#= ContainerMenuItemsCommandPropertyName #>Property);
            RemoveBinding(<#= FilterHeightPropertyName #>Property);
            RemoveBinding(<#= TextChangedCommandPropertyName #>Property);
            RemoveBinding(<#= QuerySubmittedCommandPropertyName #>Property);
            RemoveBinding(<#= HiddenFiltersPropertyName #>Property);
            RemoveBinding(<#= TextChangedCommandPropertyName #>Property);
            RemoveBinding(<#= UnfocusedCommandPropertyName #>Property);
<#
    for (int k = 1; k < 9; k++) {
#>
            RemoveBinding(ItemsSource<#= k #>Property);
            RemoveBinding(Text<#= k #>Property);
<#
    }
#>
            <#= IsGridFlexPropertyName #> = false;
            <#= FilterHeightPropertyName #> = -1d; // unsubscribe from event
            <#= NavigationBackCommandPropertyName #> = null;
            <#= ContainerMenuItemsPropertyName #> = null;
            <#= FilterCommandPropertyName #> = null;
            <#= TextChangedCommandPropertyName #> = null;
            <#= QuerySubmittedCommandPropertyName #> = null;
            <#= ContainerMenuItemsCommandPropertyName #> = null;
            <#= FilterDefinitionsPropertyName #> = null;
            <#= HiddenFiltersPropertyName #> = null;
            <#= TextChangedCommandPropertyName #> = null;
            <#= UnfocusedCommandPropertyName #> = null;
            <#= CurrentContainerMenuItemsPropertyName #>Clear();
<#
    for (int k = 1; k < 9; k++) {
#>
            ItemsSource<#= k #> = null;
            // Text<#= k #> = null;
<#
    }
#>
        }
        private static void <#= IsDestroyedPropertyName #>Changed(BindableObject d, object oldValue, object newValue)
        {
            <#= UniqServiceFilterUserControlClassName #> inst = d as <#= UniqServiceFilterUserControlClassName #>;
            if (inst != null) 
            {
                inst.<#= OnDestroyedPropertyName #>();
            }
        }
        public static readonly BindableProperty <#= IsDestroyedPropertyName #>Property =
                BindableProperty.Create(
                "<#= IsDestroyedPropertyName #>", typeof(bool),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                false, propertyChanged: <#= IsDestroyedPropertyName #>Changed);
        public bool <#= IsDestroyedPropertyName #>
        {
            get
            {
                return (bool)GetValue(<#= IsDestroyedPropertyName #>Property);
            }
            set
            {
                SetValue(<#= IsDestroyedPropertyName #>Property, value);
            }
        }
        #endregion

        #region AutoSuggestBox
        public static readonly BindableProperty <#= TextChangedCommandPropertyName #>Property =
            BindableProperty.Create(nameof(<#= TextChangedCommandPropertyName #>), typeof(ICommand), typeof(<#= UniqServiceFilterUserControlClassName #>), 
            null); 
        public ICommand <#= TextChangedCommandPropertyName #>
        {
            get { return (ICommand)GetValue(<#= TextChangedCommandPropertyName #>Property); }
            set { SetValue(<#= TextChangedCommandPropertyName #>Property, value); }
        }
        
        public static readonly BindableProperty <#= QuerySubmittedCommandPropertyName #>Property =
            BindableProperty.Create(nameof(<#= QuerySubmittedCommandPropertyName #>), typeof(ICommand), typeof(<#= UniqServiceFilterUserControlClassName #>), 
            null); 
        public ICommand <#= QuerySubmittedCommandPropertyName #>
        {
            get { return (ICommand)GetValue(<#= QuerySubmittedCommandPropertyName #>Property); }
            set { SetValue(<#= QuerySubmittedCommandPropertyName #>Property, value); }
        }

        public static readonly BindableProperty <#= UnfocusedCommandPropertyName #>Property =
            BindableProperty.Create(nameof(<#= UnfocusedCommandPropertyName #>), typeof(ICommand), typeof(<#= UniqServiceFilterUserControlClassName #>), 
            null); 
        public ICommand <#= UnfocusedCommandPropertyName #>
        {
            get { return (ICommand)GetValue(<#= UnfocusedCommandPropertyName #>Property); }
            set { SetValue(<#= UnfocusedCommandPropertyName #>Property, value); }
        }
        
        protected void TextChanged(object sender, dotMorten.Xamarin.Forms.AutoSuggestBoxTextChangedEventArgs e, int k) {
            if((<#= IsDestroyedPropertyName #>) || (<#= FilterDefinitionsPropertyName #> == null)) return;
            if ((e == null) || (<#= FilterDefinitionsPropertyName #>.Count() < k ))  return;
            dotMorten.Xamarin.Forms.AutoSuggestBox asbsender = sender as dotMorten.Xamarin.Forms.AutoSuggestBox;
            if(asbsender == null) return;
            ICommand cmd = <#= TextChangedCommandPropertyName #>;
            if (cmd != null)
            {
                (object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, int Reason, string QueryText) prm = 
                    (this, sender, <#= FilterDefinitionsPropertyName #>[k-1], (int)e.Reason, asbsender.Text);
                if(cmd.CanExecute(prm)) cmd.Execute(prm);
            }
        }
        protected void <#= QuerySubmittedExPropertyName #>(object sender, dotMorten.Xamarin.Forms.AutoSuggestBoxQuerySubmittedEventArgs e, int k) {
            if ((<#= IsDestroyedPropertyName #>) || (<#= FilterDefinitionsPropertyName #> == null)) return;
            if ((e == null) || (<#= FilterDefinitionsPropertyName #>.Count() < k ))  return;
            dotMorten.Xamarin.Forms.AutoSuggestBox asbsender = sender as dotMorten.Xamarin.Forms.AutoSuggestBox;
            if(asbsender == null) return;
            ICommand cmd = <#= QuerySubmittedCommandPropertyName #>;
            if (cmd != null)
            {
                (object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef, object ChosenSuggestion, string QueryText) prm = 
                    (this, sender, <#= FilterDefinitionsPropertyName #>[k-1], e.ChosenSuggestion, e.QueryText);
                if(cmd.CanExecute(prm)) cmd.Execute(prm);
            }
        }
        protected void RunUnfocused(object sender, int k) {
            if ((<#= IsDestroyedPropertyName #>) || (<#= FilterDefinitionsPropertyName #> == null)) return;
            if (<#= FilterDefinitionsPropertyName #>.Count() < k) return;
            dotMorten.Xamarin.Forms.AutoSuggestBox asbsender = sender as dotMorten.Xamarin.Forms.AutoSuggestBox;
            if(asbsender == null) return;
            ICommand cmd = <#= UnfocusedCommandPropertyName #>;
            if (cmd != null)
            {
                (object Cmpnt, object Sender, <#= IUniqServiceFilterDefInterfaceClassName #> FltDef) prm = 
                    (this, sender, <#= FilterDefinitionsPropertyName #>[k-1]);
                if(cmd.CanExecute(prm)) cmd.Execute(prm);
            }
        }
<#
    for (int i = 0; i < 2; i++) {
        for(int j = 0; j < 4;j++) {
            int k = i * 4 + j+1;
#>
        public string Caption<#= k #> {
            get {
                if(<#= FilterDefinitionsPropertyName #> != null) {
                    if(<#= FilterDefinitionsPropertyName #>.Count() >= <#= k #>)
                        return <#= FilterDefinitionsPropertyName #>[<#= k-1 #>].fltrCaption;
                }
                return "";
            }
        }
        public bool IsVisible<#= k #> {
            get {
                if(<#= FilterDefinitionsPropertyName #> != null) {
                    return <#= FilterDefinitionsPropertyName #>.Count() >= <#= k #>;
                }
                return false;
            }
        }
        public string DisplayMemberPath<#= k #> {
            get {
                if(<#= FilterDefinitionsPropertyName #> != null) {
                    if(<#= FilterDefinitionsPropertyName #>.Count() >= <#= k #>)
                        return <#= FilterDefinitionsPropertyName #>[<#= k-1 #>].fltrDispMemb;
                }
                return "";
            }
        }
        public string TextMemberPath<#= k #> {
            get {
                if(<#= FilterDefinitionsPropertyName #> != null) {
                    if(<#= FilterDefinitionsPropertyName #>.Count() >= <#= k #>)
                        return <#= FilterDefinitionsPropertyName #>[<#= k-1 #>].fltrTextMemb;
                }
                return "";
            }
        }
        public static readonly BindableProperty ItemsSource<#= k #>Property =
                BindableProperty.Create(
                "ItemsSource<#= k #>", typeof(IList),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                null);
        public IList ItemsSource<#= k #> {
            get {
                return (IList)GetValue(ItemsSource<#= k #>Property);
            }
            set {
                SetValue(ItemsSource<#= k #>Property, value);
            }
        }
        public static readonly BindableProperty Text<#= k #>Property =
                BindableProperty.Create(
                "Text<#= k #>", typeof(string),
                typeof(<#= UniqServiceFilterUserControlClassName #>),
                "");
        public string Text<#= k #> {
            get {
                return (string)GetValue(Text<#= k #>Property);
            }
            set {
                SetValue(Text<#= k #>Property, value);
            }
        }
        public void TextChanged<#= k #>(object sender, dotMorten.Xamarin.Forms.AutoSuggestBoxTextChangedEventArgs e) {
            TextChanged(sender, e, <#= k #>);
        }
        public void QuerySubmitted<#= k #>(object sender, dotMorten.Xamarin.Forms.AutoSuggestBoxQuerySubmittedEventArgs e) {
            <#= QuerySubmittedExPropertyName #>(sender, e, <#= k #>);
        }
        public void Unfocused<#= k #>(object sender, FocusEventArgs e) {
            RunUnfocused(sender, <#= k #>);
        }
<#
        }
    }
#>
        #endregion
    }
}

<#+

    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }

#>
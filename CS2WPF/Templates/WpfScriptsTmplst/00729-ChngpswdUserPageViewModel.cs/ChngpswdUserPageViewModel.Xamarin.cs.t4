<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>

using System;
using Xamarin.Forms;
using System.ComponentModel;
using System.Windows.Input;
using Prism.Navigation;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Linq;
<#

    string IAppGlblSettingsServiceFolder      = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName   = GetModelClassName(Model, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace   = GetModelNameSpace(Model, IAppGlblSettingsServiceFolder);

    string IRegisterModelFolder      = "00500-IRegisterModel.cs";
    string IRegisterModelClassName   = GetModelClassName(Model, IRegisterModelFolder);
    string IRegisterModelNameSpace   = GetModelNameSpace(Model, IRegisterModelFolder);

    string IChangePasswordModelFolder      = "00504-IChangePasswordModel.cs";
    string IChangePasswordModelClassName   = GetModelClassName(Model, IChangePasswordModelFolder);
    string IChangePasswordModelNameSpace   = GetModelNameSpace(Model, IChangePasswordModelFolder);

    string IAppGlblLoginServiceFolder      = "00508-IAppGlblLoginService.cs";
    string IAppGlblLoginServiceClassName   = GetModelClassName(Model, IAppGlblLoginServiceFolder);
    string IAppGlblLoginServiceNameSpace   = GetModelNameSpace(Model, IAppGlblLoginServiceFolder);
    string IAppGlblLoginServiceProject     = GetModelProjectName(Model, IAppGlblLoginServiceFolder);

    string HomePageFolder     = "00691-HomePage.xaml.cs";
    string HomePageClassName  = GetModelClassName(Model, HomePageFolder);
    string HomePageNameSpace  = GetModelNameSpace(Model, HomePageFolder);

    string ChngpswdUserPageFolder           = "00725-ChngpswdUserPage.xaml.cs";
    string ChngpswdUserPageClassName        = GetModelClassName(Model, ChngpswdUserPageFolder);
    string ChngpswdUserPageNameSpace        = GetModelNameSpace(Model, ChngpswdUserPageFolder);
    string ChngpswdUserPageProject          = GetModelProjectName(Model, ChngpswdUserPageFolder);

    string ChngpswdUserPageXamlFolder       = "00727-ChngpswdUserPage.xaml";
    string ChngpswdUserPageXamlClassName    = GetModelClassName(Model, ChngpswdUserPageXamlFolder);
    string ChngpswdUserPageXamlNameSpace    = GetModelNameSpace(Model, ChngpswdUserPageXamlFolder);
    string ChngpswdUserPageXamlProject      = GetModelProjectName(Model, ChngpswdUserPageXamlFolder);

    string ChngpswdUserPageViewModelFolder      = "00729-ChngpswdUserPageViewModel.cs";
    string ChngpswdUserPageViewModelClassName   = GetModelClassName(Model, ChngpswdUserPageViewModelFolder);
    string ChngpswdUserPageViewModelNameSpace   = GetModelNameSpace(Model, ChngpswdUserPageViewModelFolder);
    string ChngpswdUserPageViewModelProject     = GetModelProjectName(Model, ChngpswdUserPageViewModelFolder);


    string OldPassWordPropertyName             = "OldPassWord";
    string OldPassWordCaptionPropertyName      = "OldPassWordCaption";
    string OldPassWordPropmptPropertyName      = "OldPassWordPropmpt";
    string OldPassWordErrorPropertyName        = "OldPassWordError";
    string OldPassWordShowPropertyName         = "OldPassWordShow";
    string OldPassWordIsPasswordPropertyName   = "OldPassWordIsPassword";

    string PassWordPropertyName             = "PassWord";
    string PassWordCaptionPropertyName      = "PassWordCaption";
    string PassWordPropmptPropertyName      = "PassWordPropmpt";
    string PassWordErrorPropertyName        = "PassWordError";
    string PassWordShowPropertyName         = "PassWordShow";
    string PassWordIsPasswordPropertyName   = "PassWordIsPassword";

    string ConfirmPassWordPropertyName              = "ConfirmPassWord";
    string ConfirmPassWordCaptionPropertyName       = "ConfirmPassWordCaption";
    string ConfirmPassWordPropmptPropertyName       = "ConfirmPassWordPropmpt";
    string ConfirmPassWordErrorPropertyName         = "ConfirmPassWordError";
    string ConfirmPassWordShowPropertyName          = "ConfirmPassWordShow";
    string ConfirmPassWordIsPasswordPropertyName    = "ConfirmPassWordIsPassword";

    string OkCommandPropertyName                    = "OkCommand";
    string CancelCommandPropertyName                = "CancelCommand";

    string ValueErrorSufix                          = "Error"; 

    string AppLoginServicePropertyName              = "GlblLoginSrv";
    string AppSettingServicePropertyName            = "GlblSettingsSrv";
    string ChangePasswordMethodName                 = "ChangePassword";
    string NavigateToMethodName                     = "NavigateTo";


    List<string> nmSpaces = new List<string>();
    if ((ChngpswdUserPageViewModelNameSpace != IAppGlblLoginServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblLoginServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblLoginServiceNameSpace);
    if ((ChngpswdUserPageViewModelNameSpace != IRegisterModelNameSpace) && (nmSpaces.IndexOf(IRegisterModelNameSpace) < 0)) 
        nmSpaces.Add(IRegisterModelNameSpace);
    if ((ChngpswdUserPageViewModelNameSpace != IChangePasswordModelNameSpace) && (nmSpaces.IndexOf(IChangePasswordModelNameSpace) < 0)) 
        nmSpaces.Add(IChangePasswordModelNameSpace);
    if ((ChngpswdUserPageViewModelNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    
#>
<# 
    foreach(string ns in nmSpaces) {
#>
using <#= ns #>;
<#
    }
#>

/*

    "<#= ChngpswdUserPageViewModelClassName #>" UserControl is defined in the "<#= ChngpswdUserPageViewModelProject #>"-project.
    In the file of IModule-class of "<#= ChngpswdUserPageViewModelProject #>"-project the following line of code must be inserted:


        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
            ...

            ViewModelLocationProvider.Register<<#= ChngpswdUserPageClassName #>, <#= ChngpswdUserPageViewModelClassName #>>();
            containerRegistry.RegisterForNavigation<<#= ChngpswdUserPageClassName #>, <#= ChngpswdUserPageViewModelClassName #>>("<#= ChngpswdUserPageClassName #>");
            ...
        }

*/

namespace <#= ChngpswdUserPageViewModelNameSpace #> {
    public class <#= ChngpswdUserPageViewModelClassName #>: INotifyPropertyChanged, INotifyDataErrorInfo, IDestructible    
    {
        <#= IAppGlblSettingsServiceClassName #> _<#= AppSettingServicePropertyName #>;
        <#= IAppGlblLoginServiceClassName #> _<#= AppLoginServicePropertyName #>;
//        protected INavigationService _navigationService;

        public <#= ChngpswdUserPageViewModelClassName #>(<#= IAppGlblLoginServiceClassName #> <#= AppLoginServicePropertyName #>, <#= IAppGlblSettingsServiceClassName #> <#= AppSettingServicePropertyName #>) {
            _<#= AppLoginServicePropertyName #> = <#= AppLoginServicePropertyName #>;
            _<#= AppSettingServicePropertyName #> = <#= AppSettingServicePropertyName #>;
        }

        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion
        #region INotifyDataErrorInfo
        Dictionary<string, ICollection<string>> ValidationErrors = new Dictionary<string, ICollection<string>>();
        public bool HasErrors { get { return (ValidationErrors.Count > 0) || (ValidationErrors.Count > 0); } }
        public System.Collections.IEnumerable GetErrors(string propertyName)
        {
            if (string.IsNullOrEmpty(propertyName)) {
                return null;
            }
            if(ValidationErrors.ContainsKey(propertyName)) 
                return ValidationErrors[propertyName];
            return null;
        }
        
        public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;

        private void RaiseErrorsChanged(string propertyName)
        {
            //if (ErrorsChanged != null)
            //    ErrorsChanged(this, new DataErrorsChangedEventArgs(propertyName));
            OnPropertyChanged(propertyName + "<#= ValueErrorSufix #>");
        }
        public void ValidateField(object value, [CallerMemberName] string filedName = null) {
            if (string.IsNullOrEmpty(filedName)) return;
            string stringValue = value as string;
            string ErrorMsg = null;
            IList<string> rslt = null;
            switch(filedName) {
            

                case "<#= OldPassWordPropertyName #>":
                    if (string.IsNullOrEmpty(stringValue)) {
                        ErrorMsg = "<#= OldPassWordPropertyName #> is a required filed";
                    } else if (stringValue.Length < 6) {
                        ErrorMsg = "<#= OldPassWordPropertyName #>.Length must be large than 5";
                    }
                    break;
                case "<#= PassWordPropertyName #>":
                    if (string.IsNullOrEmpty(stringValue)) {
                        ErrorMsg = "<#= PassWordPropertyName #> is a required filed";
                    } else if (stringValue.Length < 6) {
                        ErrorMsg = "<#= PassWordPropertyName #>.Length must be large than 5";
                    } else if (<#= PassWordPropertyName #> != <#= ConfirmPassWordPropertyName #>) {
                        ErrorMsg = "<#= PassWordPropertyName #> and <#= ConfirmPassWordPropertyName #> must be identical";
                    }
                    break;
                case "<#= ConfirmPassWordPropertyName #>":
                    if (string.IsNullOrEmpty(stringValue)) {
                        ErrorMsg = "<#= ConfirmPassWordPropertyName #> is a required filed";
                    } else if (stringValue.Length < 6) {
                        ErrorMsg = "<#= ConfirmPassWordPropertyName #>.Length must be large than 5";
                    } else if (<#= PassWordPropertyName #> != <#= ConfirmPassWordPropertyName #>) {
                        ErrorMsg = "<#= PassWordPropertyName #> and <#= ConfirmPassWordPropertyName #> must be identical";
                    }
                    break;
                default:
                    break;
            }
            if (!string.IsNullOrEmpty(ErrorMsg)) {
                rslt = new List<string>() { ErrorMsg };
            }
            bool hasErrors = rslt != null;
            hasErrors = hasErrors ? (rslt.Count > 0) : false;
            if(hasErrors) {
                ValidationErrors[filedName] = rslt;
                RaiseErrorsChanged(filedName);
            } else {
                if(ValidationErrors.ContainsKey(filedName))  {
                    ValidationErrors.Remove(filedName);
                    RaiseErrorsChanged(filedName);
                }
            }
        }
        public string GetFirstError(string propertyName)
        {
            if (string.IsNullOrEmpty(propertyName)) {
                return "";
            }
            string str = null;
            if(ValidationErrors.ContainsKey(propertyName)) 
                str = ValidationErrors[propertyName].FirstOrDefault(i => !string.IsNullOrEmpty(i));
            return str==null ? "" : str;
        }
        #endregion
        #region <#= OldPassWordPropertyName #>
        protected string _<#= OldPassWordPropertyName #> = "";
        public string <#= OldPassWordPropertyName #> 
        {
            get { return _<#= OldPassWordPropertyName #>; }
            set
            {
                if (<#= OldPassWordPropertyName #> != value) {
                    _<#= OldPassWordPropertyName #> = value;
                    OnPropertyChanged();
                    ValidateField(value);
                }
            }
        }
        public string <#= OldPassWordPropmptPropertyName #> {
            get { return "Enter Old Password"; }
        }
        public string <#= OldPassWordCaptionPropertyName #> {
            get { return "Old Password"; }
        }
        #endregion
        #region <#= PassWordPropertyName #>
        protected string _<#= PassWordPropertyName #> = "";
        public string <#= PassWordPropertyName #> 
        {
            get { return _<#= PassWordPropertyName #>; }
            set
            {
                if (<#= PassWordPropertyName #> != value) {
                    _<#= PassWordPropertyName #> = value;
                    OnPropertyChanged();
                    ValidateField(value);
                    ValidateField(<#= ConfirmPassWordPropertyName #>, "<#= ConfirmPassWordPropertyName #>");
                }
            }
        }
        public string <#= PassWordPropmptPropertyName #> {
            get { return "Enter Password"; }
        }
        public string <#= PassWordCaptionPropertyName #> {
            get { return "Password"; }
        }
        #endregion
        #region <#= ConfirmPassWordPropertyName #>
        protected string _<#= ConfirmPassWordPropertyName #> = "";
        public string <#= ConfirmPassWordPropertyName #> 
        {
            get { return _<#= ConfirmPassWordPropertyName #>; }
            set
            {
                if (<#= ConfirmPassWordPropertyName #> != value) {
                    _<#= ConfirmPassWordPropertyName #> = value;
                    OnPropertyChanged();
                    ValidateField(value);
                    ValidateField(<#= PassWordPropertyName #>, "<#= PassWordPropertyName #>");
                }
            }
        }
        public string <#= ConfirmPassWordPropmptPropertyName #> {
            get { return "Repeat Password"; }
        }
        public string <#= ConfirmPassWordCaptionPropertyName #> {
            get { return "Confirm Password"; }
        }
        #endregion
        #region <#= OldPassWordErrorPropertyName #>
        public string <#= OldPassWordErrorPropertyName #> {
            get 
            {
                return GetFirstError("<#= OldPassWordPropertyName #>");
            }
        }
        #endregion
        #region <#= PassWordErrorPropertyName #>
        public string <#= PassWordErrorPropertyName #> {
            get 
            {
                return GetFirstError("<#= PassWordPropertyName #>");
            }
        }
        #endregion
        #region <#= ConfirmPassWordErrorPropertyName #>
        public string <#= ConfirmPassWordErrorPropertyName #> {
            get 
            {
                return GetFirstError("<#= ConfirmPassWordPropertyName #>");
            }
        }
        #endregion
        #region <#= OldPassWordIsPasswordPropertyName #>
        protected bool _<#= OldPassWordIsPasswordPropertyName #> = true;
        public bool <#= OldPassWordIsPasswordPropertyName #> 
        {
            get { return _<#= OldPassWordIsPasswordPropertyName #>; }
            set
            {
                if (<#= OldPassWordIsPasswordPropertyName #> != value) {
                    _<#= OldPassWordIsPasswordPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= PassWordIsPasswordPropertyName #>
        protected bool _<#= PassWordIsPasswordPropertyName #> = true;
        public bool <#= PassWordIsPasswordPropertyName #> 
        {
            get { return _<#= PassWordIsPasswordPropertyName #>; }
            set
            {
                if (<#= PassWordIsPasswordPropertyName #> != value) {
                    _<#= PassWordIsPasswordPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= ConfirmPassWordIsPasswordPropertyName #>
        protected bool _<#= ConfirmPassWordIsPasswordPropertyName #> = true;
        public bool <#= ConfirmPassWordIsPasswordPropertyName #> 
        {
            get { return _<#= ConfirmPassWordIsPasswordPropertyName #>; }
            set
            {
                if (<#= ConfirmPassWordIsPasswordPropertyName #> != value) {
                    _<#= ConfirmPassWordIsPasswordPropertyName #> = value;
                    OnPropertyChanged();
                }
            }
        }
        #endregion
        #region <#= CancelCommandPropertyName #>
        private ICommand _<#= CancelCommandPropertyName #>;
        public ICommand <#= CancelCommandPropertyName #>
        {
            get
            {
                return _<#= CancelCommandPropertyName #> ?? (_<#= CancelCommandPropertyName #> = new Command((param) => <#= CancelCommandPropertyName #>Action(param), (param) => <#= CancelCommandPropertyName #>CanExecute(param)));
            }
        }
        protected async void <#= CancelCommandPropertyName #>Action(object param)
        {
            // await _navigationService.NavigateAsync("<#= HomePageClassName #>");
            if(_<#= AppSettingServicePropertyName #> != null) {
                _<#= AppSettingServicePropertyName #>.<#= NavigateToMethodName #>("<#= HomePageClassName #>");
            }
        }
        protected bool <#= CancelCommandPropertyName #>CanExecute(object param)
        {
            return true;
        }
        #endregion
        #region <#= OkCommandPropertyName #>
        private ICommand _<#= OkCommandPropertyName #>;
        public ICommand <#= OkCommandPropertyName #>
        {
            get
            {
                return _<#= OkCommandPropertyName #> ?? (_<#= OkCommandPropertyName #> = new Command((param) => <#= OkCommandPropertyName #>Action(param), (param) => <#= OkCommandPropertyName #>CanExecute(param)));
            }
        }
        protected async void <#= OkCommandPropertyName #>Action(object param)
        {
            ValidateField(<#= OldPassWordPropertyName #>, "<#= OldPassWordPropertyName #>");
            ValidateField(<#= PassWordPropertyName #>, "<#= PassWordPropertyName #>");
            ValidateField(<#= ConfirmPassWordPropertyName #>, "<#= ConfirmPassWordPropertyName #>");
            if (HasErrors) return;
            <#= IChangePasswordModelClassName #> model = await _<#= AppLoginServicePropertyName #>.<#= ChangePasswordMethodName #>(<#= OldPassWordPropertyName #>, <#= PassWordPropertyName #>, <#= ConfirmPassWordPropertyName #>);
            if (model == null) return;
            // await _navigationService.NavigateAsync("<#= HomePageClassName #>");
            if(_<#= AppSettingServicePropertyName #> != null) {
                _<#= AppSettingServicePropertyName #>.<#= NavigateToMethodName #>("<#= HomePageClassName #>");
            }
        }
        protected bool <#= OkCommandPropertyName #>CanExecute(object param)
        {
            return true;
        }
        #endregion
        #region <#= OldPassWordShowPropertyName #>Command
        private ICommand _<#= OldPassWordShowPropertyName #>Command=null;
        public ICommand <#= OldPassWordShowPropertyName #>Command
        {
            get
            {
                return _<#= OldPassWordShowPropertyName #>Command ?? (_<#= OldPassWordShowPropertyName #>Command = new Command((param) => <#= OldPassWordShowPropertyName #>Action(param), (param) => <#= OldPassWordShowPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= OldPassWordShowPropertyName #>Action(object param)
        {
            <#= OldPassWordIsPasswordPropertyName #> = ! <#= OldPassWordIsPasswordPropertyName #>;
        }
        protected bool <#= OldPassWordShowPropertyName #>CanExecute(object param)
        {
            return true;
        }
        #endregion
        #region <#= PassWordShowPropertyName #>Command
        private ICommand _<#= PassWordShowPropertyName #>Command=null;
        public ICommand <#= PassWordShowPropertyName #>Command
        {
            get
            {
                return _<#= PassWordShowPropertyName #>Command ?? (_<#= PassWordShowPropertyName #>Command = new Command((param) => <#= PassWordShowPropertyName #>Action(param), (param) => <#= PassWordShowPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= PassWordShowPropertyName #>Action(object param)
        {
            <#= PassWordIsPasswordPropertyName #> = ! <#= PassWordIsPasswordPropertyName #>;
        }
        protected bool <#= PassWordShowPropertyName #>CanExecute(object param)
        {
            return true;
        }
        #endregion
        #region <#= ConfirmPassWordShowPropertyName #>Command
        private ICommand _<#= ConfirmPassWordShowPropertyName #>Command=null;
        public ICommand <#= ConfirmPassWordShowPropertyName #>Command
        {
            get
            {
                return _<#= ConfirmPassWordShowPropertyName #>Command ?? (_<#= ConfirmPassWordShowPropertyName #>Command = new Command((param) => <#= ConfirmPassWordShowPropertyName #>Action(param), (param) => <#= ConfirmPassWordShowPropertyName #>CanExecute(param)));
            }
        }
        protected void <#= ConfirmPassWordShowPropertyName #>Action(object param)
        {
            <#= ConfirmPassWordIsPasswordPropertyName #> = ! <#= ConfirmPassWordIsPasswordPropertyName #>;
        }
        protected bool <#= ConfirmPassWordShowPropertyName #>CanExecute(object param)
        {
            return true;
        }
        #endregion

        #region IDestructible  
        public virtual void Destroy()
        {
            _<#= AppSettingServicePropertyName #> = null;
            _<#= AppLoginServicePropertyName #> = null;
        }
        #endregion

    }
}

<#+
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }

#>
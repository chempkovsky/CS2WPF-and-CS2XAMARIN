<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="php" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<?php
namespace App\Entity;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
<#

    string DoctrineEntityClassName                  = GetDoctrineEntityClassName(Model);
    string DoctrineEntityTableName                  = GetDoctrineEntityTableName(Model);
#>


/**
 * <#= DoctrineEntityClassName #>
 *
 * @ORM\Table(name="<#= DoctrineEntityTableName #>")
 * @ORM\Entity
 */
class <#= DoctrineEntityClassName #>
{

<#
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
            string isnullableStr = prop.IsRequired ? "nullable=false" : "nullable=true";
            bool isId = GetDoctrineEntityFieldIsId(prop, Model);
            string maxLen = GetMaxLenEx(prop, model);
            if (string.IsNullOrEmpty(maxLen)) maxLen = ""; else maxLen = ", length=" + maxLen;
#>
    /**
     * @var <#= GetDoctrineEntityFieldPhpType(prop, model) #>
     *
     * @ORM\Column(name="<#= GetDoctrineEntityFieldPhpType(prop, model) #>", type="<#= GetDoctrineEntityFieldDataBaseType(prop, model) #>" <#= maxLen #>, <#= isnullableStr #>)
<# 
            if(isId) { 
#>
     * @ORM\Id
<# 
                if(IsIdentityPropertyKey(prop, model)) {
#>
     * @ORM\GeneratedValue(strategy="IDENTITY")
<#
                } else {
#>
     * @ORM\GeneratedValue(strategy="NONE")
<#
                }
            }
#>
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $<#= GetDoctrineEntityFieldName(prop) #>;

<#
        }
        if (Model.ForeignKeys != null) {
            foreach (ModelViewForeignKeySerializable foreignKey in Model.ForeignKeys) {
                string nullableStr =  "nullable=false";
                if(foreignKey.NavigationType==2) nullableStr = "nullable=true";
#>
    /**
     * @var \<#= GetDoctrineEntityClassNameForStr(foreignKey.NavigationEntityName) #>
     *
     * @ORM\ManyToOne(targetEntity="<#= GetDoctrineEntityClassNameForStr(foreignKey.NavigationEntityName) #>")
     * @ORM\JoinColumns({
<#
            for(int i = 0; i < foreignKey.ForeignKeySource; i++) {
                bool isnotLast = (i < (foreignKey.ForeignKeySource -1));
#>
     *   @ORM\JoinColumn(name="<#= foreignKey.ForeignKeyProps[i].OriginalPropertyName #>", referencedColumnName="<#= foreignKey.PrincipalKeyProps[i].OriginalPropertyName #>", <#= nullableStr #>)<# if(isnotLast) { #>, <# } #>
<#
            }
#>
     * })
     */
    private $<#= GetDoctrineEntityFieldNameForStr(foreignKey.NavigationName) #>;

<#
            }
        }
        foreach (ModelViewKeyPropertySerializable prop in Model.AllProperties) {
#>

    public function <#= GetDoctrineEntityGetMethodName(prop) #>(): ?<#= GetDoctrineEntityFieldPhpType(prop, model) #>
    {
        return $this-><#= GetDoctrineEntityFieldName(prop) #>;
    }
    public function <#= GetDoctrineEntitySetMethodName(prop) #>(<#= GetDoctrineEntityFieldPhpType(prop, model) #> $<#= GetDoctrineEntityFieldName(prop) #>): self
    {
        $this-><#= GetDoctrineEntityFieldName(prop) #> = $<#= GetDoctrineEntityFieldName(prop) #>;
        return $this;
    }
<#
        }
        if (Model.ForeignKeys != null) {
            foreach (ModelViewForeignKeySerializable foreignKey in Model.ForeignKeys) {
#>

    public function <#= GetDoctrineEntityGetMethodNameForStr(foreignKey.NavigationName) #>(): ?<#= GetDoctrineEntityClassNameForStr(foreignKey.NavigationEntityName) #>
    {
        return $this-><#= GetDoctrineEntityFieldNameForStr(foreignKey.NavigationName) #>;
    }
    public function <#= GetDoctrineEntitySetMethodNameForStr(foreignKey.NavigationName) #>(<#= GetDoctrineEntityClassNameForStr(foreignKey.NavigationEntityName) #> $<#= GetDoctrineEntityFieldNameForStr(foreignKey.NavigationName) #>): self
    {
        $this-><#= GetDoctrineEntityFieldNameForStr(foreignKey.NavigationName) #> = $<#= GetDoctrineEntityFieldNameForStr(foreignKey.NavigationName) #>;
        return $this;
    }
<#
            }
        }
#>                

}

<#+

    string GetModelName(ModelViewSerializable model) {
        return FirstLetterToUpper(model.ViewName);
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+ GetModelName(model);
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetModelPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string AttribToString(ModelViewAttributeSerializable attr) {
        if(attr == null) return "";
        string result= "[" + attr.AttrName; 
        if (attr.VaueProperties == null) {
            return result + "]";
        }
        if (attr.VaueProperties.Count < 1) {
            return result + "]";
        }
        result = result + "(";
        bool insComma= false;
        foreach(ModelViewAttributePropertySerializable valProp in attr.VaueProperties) {
            if (insComma) {
                result =  result + ",";
            } else {
                insComma = true;
            }
            if(! string.IsNullOrEmpty(valProp.PropName) ) {
                if (! valProp.PropName.Contains("...") ) {
                    result =  result + valProp.PropName + "=";
                }
            }
            result =  result + valProp.PropValue;
        }
        return result + ")]";
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMaxLenEx(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return null;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }



    bool HasAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasFluentAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.FAPIAttributes != null) {
                foreach(ModelViewFAPIAttributeSerializable a in sclrProp.FAPIAttributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewFAPIAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool IsIdentityProperty(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (HasAtributeWithValue(prop, "DatabaseGenerated", "identity") || HasAtributeWithValue(prop, "DatabaseGenerated", "computed")) {
            return true;
        }
        if(HasFluentAtribute(prop, new string[] {"UseSqlServerIdentityColumn", "ForSqlServerUseSequenceHiLo", "ValueGeneratedOnAdd", "ValueGeneratedOnAddOrUpdate", "IsConcurrencyToken", "IsRowVersion"} )) {
            return true;
        }
        return HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "identity") || HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "computed");
    }
    bool IsIdentityPropertyKey(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null)||(prop == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
        if(sclrProp == null) return false;
        return IsIdentityProperty(sclrProp, model);
    }
    string GetDoctrineEntityClassName(ModelViewSerializable model) {
        string rslt = "";
        if (model == null) return rslt;
        return model.RootEntityClassName;
    }
    string GetDoctrineEntityClassNameForStr(string RootEntityClassName) {
        return RootEntityClassName;
    }
    string GetDoctrineEntityTableName(ModelViewSerializable model) {
        string rslt = "";
        if (model == null) return rslt;
        return string.ToLower(CS2WPF.Helpers.CustomPluralization.Pluralize(model.RootEntityClassName));
    }
    string GetDoctrineEntityTableColumnName(ModelViewKeyPropertySerializable prop) {
        string rslt = "";
        if (prop == null) return rslt;
        return prop.OriginalPropertyName;
    }
    string GetDoctrineEntityGetSetSuffixForStr(string rslt) {
        if (string.IsNullOrEmpty(rslt)) return "";
        rslt = string.ToLower(rslt);
        StringBuilder rsltSb = new StringBuilder();
        bool nextIsUpper = false;
        foreach (char ch in rslt)
        {
            if (ch == '_') { 
                nextIsUpper = true; 
            } else {
                if(nextIsUpper) ch = Char.ToUpper(ch);
                rsltSb.Append(ch);
                nextIsUpper = false; 
            }
        }
        return FirstLetterToUpper(rsltSb.ToString());
    }
    string GetDoctrineEntityGetMethodNameForStr(string rslt) {
        return "get" + GetDoctrineEntityGetSetSuffixForStr(rslt);
    }
    string GetDoctrineEntitySetMethodNameForStr(string rslt) {
        return "set" + GetDoctrineEntityGetSetSuffixForStr(rslt);
    }
    string GetDoctrineEntityFieldNameForStr(string rslt) {
        return string.ToLower(GetDoctrineEntityGetSetSuffixForStr(rslt));
    }

    string GetDoctrineEntityGetSetSuffix(ModelViewKeyPropertySerializable prop) {
        string rslt = "";
        if (prop == null) return rslt;
        return GetDoctrineEntityGetSetSuffixForStr( GetDoctrineEntityTableColumnName(prop));
    }
    string GetDoctrineEntityGetMethodName(ModelViewKeyPropertySerializable prop) {
        return "get" + GetDoctrineEntityGetSetSuffix(prop);
    }
    string GetDoctrineEntitySetMethodName(ModelViewKeyPropertySerializable prop) {
        return "set" + GetDoctrineEntityGetSetSuffix(prop);
    }
    string GetDoctrineEntityFieldName(ModelViewKeyPropertySerializable prop) {
        return string.ToLower(GetDoctrineEntityGetSetSuffix(prop));
    }
    string GetDoctrineEntityFieldPhpType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        string rslt = string.ToLower(prop.UnderlyingTypeName);
        switch (rslt) {
            case "system.int32": // type="integer"
                rslt = "int";
                break;
            case "system.sbyte": // type="boolean"
                rslt = "bool";
                break;
            case "system.byte": // type="boolean"
                rslt = "bool";
                break;
            case "system.int16": // type="smallint"
                rslt = "int";
                break;
            case "system.uint16": // type="smallint"
                rslt = "int";
                break;
            case "system.uint32": // type="integer"
                rslt = "int";
                break;
            case "system.int64": // type="bigint"
                rslt = "int";
                break;
            case "system.uint64": // type="bigint"
                rslt = "int";
                break;
            case "system.char": // type="boolean"
                rslt = "bool";
                break;
            case "system.single": // type="float", precision=10, scale=0
                rslt = "float";
                break;
            case "system.double": // type="float", precision=10, scale=0
                rslt = "float";
                break;
            case "system.boolean": // type="boolean"
                rslt = "bool";
                break;
            case "system.decimal": // type="decimal", precision=18, scale=2
                rslt = "string";
                break;
            case "system.string": // type="text", length=0; type="string", length=20
                rslt = "string";
                break;
            case "system.dateTime": // type="datetime"
                rslt = "DateTime";
                break;
                
            default:
                rslt = "string";
                break;
        }
    }
    string GetDoctrineEntityFieldDataBaseType(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        string rslt = string.ToLower(prop.UnderlyingTypeName);
        switch (rslt) {
            case "system.int32": 
                rslt = "integer"; //"int";
                break;
            case "system.sbyte": 
                rslt = "boolean"; // "bool";
                break;
            case "system.byte": 
                rslt = "boolean"; // "bool";
                break;
            case "system.int16": 
                rslt = "smallint"; // "int";
                break;
            case "system.uint16": 
                rslt = "smallint"; // "int";
                break;
            case "system.uint32": 
                rslt = "integer"; // "int";
                break;
            case "system.int64": 
                rslt = "bigint"; // "int";
                break;
            case "system.uint64": 
                rslt = "bigint"; // "int";
                break;
            case "system.char": 
                rslt = "boolean"; // "bool";
                break;
            case "system.single": // type="float", precision=10, scale=0
                rslt = "float"; // "float";
                break;
            case "system.double": // type="float", precision=10, scale=0
                rslt = "float"; // "float";
                break;
            case "system.boolean": // type="boolean"
                rslt = "boolean";// "bool";
                break;
            case "system.decimal": // type="decimal", precision=18, scale=2
                rslt = "decimal"; // "string";
                break;
            case "system.string": // type="text", length=0; type="string", length=20
                string ml = GetMaxLenEx(prop, model);
                if (string.IsNullOrEmpty(ml))
                    rslt = "text";
                else
                    rslt = "string";
                break;
            case "system.dateTime": // type="datetime"
                rslt = "datetime"; // "DateTime";
                break;
            default:
                rslt = "string";
                break;
        }
        return rslt;
    }
    bool   GetDoctrineEntityFieldIsId(ModelViewKeyPropertySerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) return false;
        return Model.PrimaryKeyProperties.Where(p => (p.OriginalPropertyName == prop.OriginalPropertyName)).Any();
    }

#>
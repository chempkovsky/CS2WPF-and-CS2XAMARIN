<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="jsonpmm2txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
<#

    string IAppGlblSettingsServiceFolder      = "00080-IAppGlblSettingsService.cs";
    string IAppGlblSettingsServiceClassName   = GetContextModelClassName(Context, IAppGlblSettingsServiceFolder);
    string IAppGlblSettingsServiceNameSpace   = GetContextModelNameSpace(Context, IAppGlblSettingsServiceFolder);


    string modelInterfaceFolder             = "01100-Interface.cs";
    string modelInterfaceClassName          = GetInterfaceName(Model);
    string modelInterfaceNameSpace          = GetModelNameSpace(Model, modelInterfaceFolder);

    string modelFolder                      = "01102-Model.cs";
    string modelClassName                   = GetModelName(Model);
    string modelNameSpace                   = GetModelNameSpace(Model, modelFolder);

    string NotifyInterfaceFolder            = "01104-NotifyInterface.cs";
    string NotifyInterfaceClassName         = GetNotifyInterfaceName(Model);
    string NotifyInterfaceNameSpace         = GetModelNameSpace(Model, NotifyInterfaceFolder);

    string ModelNotifyFolder                = "01106-ModelNotify.cs";
    string ModelNotifyClassName             = GetModelNotifyName(Model);
    string ModelNotifyNameSpace             = GetModelNameSpace(Model, ModelNotifyFolder);

    string modelPageInterfaceFolder         = "01200-Page.interface.cs";
    string modelPageInterfaceClassName      = GetPageInterfaceName(Model);
    string modelPageInterfaceNameSpace      = GetModelNameSpace(Model, modelPageInterfaceFolder);

    string modelPageFolder                  = "01202-Page.model.cs";
    string modelPageClassName               = GetModelPageName(Model);
    string modelPageNameSpace               = GetModelNameSpace(Model, modelPageFolder);

    string modelFilterInterfaceFolder       = "01300-Filter.interface.cs";
    string modelFilterInterfaceClassName    = GetFilterInterfaceName(Model);
    string modelFilterInterfaceNameSpace    = GetModelNameSpace(Model, modelFilterInterfaceFolder);

    string modelFilterFolder                = "01302-Filter.model.cs";
    string modelFilterClassName             = GetFilterName(Model);
    string modelFilterNameSpace             = GetModelNameSpace(Model, modelFilterFolder);


    string modelServiceInterfaceFolder       = "01400-Service.interface.cs";
    string modelServiceInterfaceClassName    = GetModelServiceInterfaceName(Model);
    string modelServiceInterfaceNameSpace    = GetModelNameSpace(Model, modelServiceInterfaceFolder);

    string modelServiceFolder                = "01402-Service.cs";
    string modelServiceClassName             = GetModelServiceName(Model);
    string modelServiceNameSpace             = GetModelNameSpace(Model, modelServiceFolder);



    string FilterOperatorSuffix = "Oprtr";
    string EqualOperator = "eq";
    string getAuthInfoHeaderMethodName      = "GetAuthInfoHeader";
    string ShowErrorMethodName              = "ShowErrorMessage";


    string GetAllMethodName                 = "getall";
    string GetWithFilterMethodName          = "getwithfilter";
    string GetOneMethodName                 = "getone";
    string UpdateOneMethodName              = "updateone";
    string AddOneMethodName                 = "addone";
    string DeleteOneMethodName              = "deleteone";
    string CopyToModelMethodName            = "CopyToModel";
    string CopyToModelNotifyMethodName      = "CopyToModelNotify";
    string AppSettingServicePropertyName    = "appGlblSettings";


    List<ModelViewPropertyOfVwSerializable> primKeys= new List<ModelViewPropertyOfVwSerializable>();
    {
        // collect primkey props
        if ((Model.PrimaryKeyProperties != null) && (Model.ScalarProperties != null)) {
            foreach(ModelViewKeyPropertySerializable pk in Model.PrimaryKeyProperties) {
                ModelViewPropertyOfVwSerializable scProp= 
                    Model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
                if(scProp == null) {
                    if (Model.ForeignKeys != null) {
                        foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
                            if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                                int cnt = fk.ForeignKeyProps.Count;
                                if (cnt < fk.PrincipalKeyProps.Count)
                                {
                                    cnt = fk.PrincipalKeyProps.Count;
                                }
                                for(int i = 0; i < cnt; i++)
                                {
                                    if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                                    {
                                        scProp=
                                            Model.ScalarProperties.Where(p =>
                                            ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                                    }
                                    if(scProp != null) {
                                        break;
                                    }
                                }
                            }
                            if(scProp != null) {
                                break;
                            }
                        }
                    }
                }
                if(scProp != null) {
                    primKeys.Add(scProp);
                }
            }
        }
    }



    List<string> nmSpaces = new List<string>();
    if (modelServiceNameSpace != modelInterfaceNameSpace) nmSpaces.Add(modelInterfaceNameSpace);
    if ((modelServiceNameSpace != modelPageInterfaceNameSpace) && (nmSpaces.IndexOf(modelPageInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelPageInterfaceNameSpace);
    if ((modelServiceNameSpace != modelFilterInterfaceNameSpace) && (nmSpaces.IndexOf(modelFilterInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelFilterInterfaceNameSpace);
    if ((modelServiceNameSpace != modelServiceInterfaceNameSpace) && (nmSpaces.IndexOf(modelServiceInterfaceNameSpace) < 0)) 
        nmSpaces.Add(modelServiceInterfaceNameSpace);
    if ((modelServiceNameSpace != modelNameSpace) && (nmSpaces.IndexOf(modelNameSpace) < 0)) 
        nmSpaces.Add(modelNameSpace);
    if ((modelServiceNameSpace != modelPageNameSpace) && (nmSpaces.IndexOf(modelPageNameSpace) < 0)) 
        nmSpaces.Add(modelPageNameSpace);
    if ((modelServiceNameSpace != IAppGlblSettingsServiceNameSpace) && (nmSpaces.IndexOf(IAppGlblSettingsServiceNameSpace) < 0)) 
        nmSpaces.Add(IAppGlblSettingsServiceNameSpace);
    if ((modelServiceNameSpace != ModelNotifyNameSpace) && (nmSpaces.IndexOf(ModelNotifyNameSpace) < 0)) 
        nmSpaces.Add(ModelNotifyNameSpace);
    if ((modelServiceNameSpace != NotifyInterfaceNameSpace) && (nmSpaces.IndexOf(NotifyInterfaceNameSpace) < 0)) 
        nmSpaces.Add(NotifyInterfaceNameSpace);
    if ((modelServiceNameSpace != modelFilterNameSpace) && (nmSpaces.IndexOf(modelFilterNameSpace) < 0)) 
        nmSpaces.Add(modelFilterNameSpace);

#>
{
"PrismMMMCallItems": [
    {
    "Description": [
    'In the file of IModule-class of the project for the current service the following lines of code must be inserted:',
    ' ',
    '    public void RegisterTypes(IContainerRegistry containerRegistry)',
    '    {',
    '        ...',
    '        containerRegistry.Register<<#= modelServiceInterfaceClassName #>, <#= modelServiceClassName #>>();',
    '        ...',
    '    }'
    ],
    
<#  
{
    string modelServiceInterfaceNameSpaceAndClassName       = modelServiceInterfaceNameSpace + "." + modelServiceInterfaceClassName;
    string modelServiceNameSpaceAndClassName                = modelServiceNameSpace + "." + modelServiceClassName;
    string destProjectName                                  = GetModelProjectUniqueName(Model, modelServiceFolder);
    string destImplementedInterface                         = "Prism.Modularity.IModule";
    string destMethodName                                   = "RegisterTypes";
    string[] destMethodParamTypes                           = new string[] {"Prism.Ioc.IContainerRegistry"};
    string destMethodAccessType                             = "public";
    string invocationParamType                              = "Prism.Ioc.IContainerRegistry";
    string invocationMethodName                             = "Register";
    string[] invocationGenerics                             = new string[]{modelServiceInterfaceNameSpaceAndClassName, modelServiceNameSpaceAndClassName};
    string[] invocationParams                               = new string[]{};
    //result = PrismModifier.UpdateMethodWithParamIdentifier(destProjectName,  destImplementedInterface, destMethodName, destMethodParamTypes, destMethodAccessType,
    //                    invocationParamType, invocationMethodName, invocationGenerics, invocationParams);
#>  
    "MethodName": 'UpdateMethodWithParamIdentifier',
    "DestProjectName": '<#= destProjectName #>',
    "DestImplementedInterface": '<#= destImplementedInterface #>',
    "DestMethodName": '<#= destMethodName #>',
    "DestMethodParamTypes": ['<#= destMethodParamTypes[0] #>'],
    "DestMethodAccessType": '<#= destMethodAccessType #>',
    "DestMethodParamTypeForVar": '',
    "InvocationVarType": '',
    "InvocationParamType": '<#= invocationParamType #>',
    "InvocationClassType": '',
    "InvocationMethodName": '<#= invocationMethodName #>',
    "InvocationGenerics": ['<#= invocationGenerics[0] #>','<#= invocationGenerics[1] #>'],
    "InvocationParams": [],
    "StepDescription": 'Insertion the line : containerRegistry.Register<<#= modelServiceInterfaceClassName #>, <#= modelServiceClassName #>>();'
    },
<#

}
#>
    ]
}


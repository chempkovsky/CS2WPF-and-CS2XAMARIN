<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ parameter type="System.Boolean"  name="IsRequired" #>
<#@ parameter type="System.Boolean"  name="WillCascadeOnDelete" #>
<#@ parameter type="System.String"   name="NavigationName" #>
<#@ parameter type="System.String"   name="InverseNavigationName" #>
<#@ parameter type="System.String"   name="MasterClassFullName" #>
<#@ parameter type="System.Collections.Generic.List<System.String>"  name="ForeignKeyProperties" #>
<#@ parameter type="System.Collections.Generic.List<System.String>"  name="MasterKeyProperties" #>
<#@ parameter type="System.String"   name="DeleteBehavior" #>
.HasOne( d => d.<#= NavigationName #> )
            .WithMany( m => m.<#= InverseNavigationName #> )
            .HasForeignKey( d => <#= GetKeyPropertiesList(ForeignKeyProperties, "d.") #> )
            .HasPrincipalKey( p => <#= GetKeyPropertiesList(MasterKeyProperties, "p.") #> )
            .IsRequired(<#= GetRequiredOrOptional(IsRequired) #>)
            .OnDelete(<#= DeleteBehavior #>);
<#+
        string GetWillCascadeOnDelete(bool willCascadeOnDelete)
        {
            if (willCascadeOnDelete) {
                return "DeleteBehavior.Cascade";
            }
            return "DeleteBehavior.SetNull";
        }
        string GetRequiredOrOptional(bool isRequired)
        {
            if (isRequired) {
                return "true";
            }
            return "false";
        }
        string GetKeyPropertiesList(System.Collections.Generic.List<System.String> foreignKeyProperties, string prefixName)
        {
            if (foreignKeyProperties == null) return "";
            int cnt = foreignKeyProperties.Count;
            if (cnt < 1) return "";
            string result = prefixName + foreignKeyProperties[0];
            for (int i = 1; i < cnt; i++)
            {
                result = result + ", " + prefixName + foreignKeyProperties[i];
            }
            if (cnt < 2)
            {
                return result;
            }
            return "new {" + result + "}";
        }
#>
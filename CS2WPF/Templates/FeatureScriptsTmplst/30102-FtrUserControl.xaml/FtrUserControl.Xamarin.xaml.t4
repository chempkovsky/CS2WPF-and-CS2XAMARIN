<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="xaml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS2WPF" #>
<#@ import namespace="CS2WPF.Model" #>
<#@ import namespace="CS2WPF.Model.Serializable" #>
<#@ parameter type="CS2WPF.Model.Serializable.AllowedFileTypesSerializable" name="AllowedFileTypes" #>
<#@ parameter type="CS2WPF.Model.Serializable.FeatureContextSerializable" name="FeatureContext" #>
<#@ parameter type="CS2WPF.Model.Serializable.FeatureSerializable" name="Feature" #>
<#@ parameter type="CS2WPF.Model.Serializable.DbContextSerializable" name="Context" #>

<#

    string gridFlexModelFolder              = "00100-GridFlex.cs";
    string gridFlexModelClassName           = GetContextModelClassName(Context, gridFlexModelFolder);
    string gridFlexModelNameSpace           = GetContextModelNameSpace(Context, gridFlexModelFolder);
    string gridFlexModelProject             = GetContextModelProjectName(Context, gridFlexModelFolder);

    string ProxyUserControlFolder           = "00280-ProxyUserControl.xaml.cs";
    string ProxyUserControlClassName        = GetContextModelClassName(Context, ProxyUserControlFolder);
    string ProxyUserControlNameSpace        = GetContextModelNameSpace(Context, ProxyUserControlFolder);
    string ProxyUserControlProject          = GetContextModelProjectName(Context, ProxyUserControlFolder);

    string FtrUserControlFolder             = "30100-FtrUserControl.xaml.cs";
    string FtrUserControlClassName          = GetFeatureComponentClassName(Feature, FtrUserControlFolder);
    string FtrUserControlNameSpace          = GetFeatureNameSpace(Feature, FtrUserControlFolder);
    string FtrUserControlProject            = GetFeatureProjectName(Feature, FtrUserControlFolder);

    string FtrUserControlXamlFolder         = "30102-FtrUserControl.xaml";
    string FtrUserControlXamlClassName      = GetFeatureComponentClassName(Feature, FtrUserControlXamlFolder);
    string FtrUserControlXamlNameSpace      = GetFeatureNameSpace(Feature, FtrUserControlXamlFolder);
    string FtrUserControlXamlProject        = GetFeatureProjectName(Feature, FtrUserControlXamlFolder);



    string CaptionPropertyName              = "Caption";
    string ContainerMenuItemsPropertyName   = "ContainerMenuItems";
    string ContainerMenuItemsCommandPropertyName    = "ContainerMenuItemsCommand";
    string OnContainerMenuItemsCommandPropertyName  = "OnContainerMenuItemsCommand";


    string FlexOnPropertyName               = "FlexOn";
    string VisiblePrefixPropertyName        = "Visible";

    string FilterHeightPropertyName         = "FilterHeight";
    string GridHeightPropertyName           = "GridHeight";
    string GridHeightDetailPropertyName     = "GridHeightDetail"; 
    string HiddenFiltersDetailPropertyName  = "HiddenFiltersDetail"; 
    string FilterHeightDetailPropertyName   = "FilterHeightDetail"; //

    string CanAddPropertyName               = "CanAdd";
    string CanUpdPropertyName               = "CanUpdate";
    string CanDelPropertyName               = "CanDelete";
    string CanAddDetailPropertyName         = "CanAddDetail"; 
    string CanUpdDetailPropertyName         = "CanUpdateDetail"; 
    string CanDelDetailPropertyName         = "CanDeleteDetail"; 

    string ShowAddFilterBtnPropertyName         = "ShowAddFilterBtn";
    string ShowAddFilterBtnDetailPropertyName   = "ShowAddFilterBtnDetail"; 

    string ShowFilterPropertyName           = "ShowFilter";
    string ShowFilterDetailPropertyName     = "ShowFilterDetail"; 
    string IsDestroyedPropertyName          = "IsDestroyed";
    string IsSwitchingPropertyName          = "IsSwitching";

    string proxyPrefix = "clr-namespace:" + ProxyUserControlNameSpace;
    if(ProxyUserControlProject != FtrUserControlXamlProject) {
        proxyPrefix = proxyPrefix + ";assembly=" + ProxyUserControlProject;
    }
    string gridflexPrefix = "clr-namespace:" + gridFlexModelNameSpace;
    if(gridFlexModelProject != FtrUserControlXamlProject) {
        gridflexPrefix = gridflexPrefix + ";assembly=" + gridFlexModelProject;
    }

    
#>

<ContentPage x:Class="<#= FtrUserControlNameSpace #>.<#= FtrUserControlClassName #>"
             xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com" 
             prism:ViewModelLocator.AutowireViewModel="True"

             xmlns:prx="<#= proxyPrefix #>" 
             xmlns:gridflex="<#= gridflexPrefix #>"
             x:Name="fchrUsrCntrlRootNode"   
             >
    <ScrollView Orientation="Vertical">
      <!-- does not work correctly
      <StackLayout Orientation="Vertical"  Margin="8,0,16,8">
      -->
<#
    string rowsCountString = "Auto";
    {
        int rowsCount = Feature.FeatureItems.Count / 2;
        rowsCountString = rowsCountString + string.Concat(Enumerable.Repeat(", Auto", rowsCount+2));
    }
#>
      <Grid    RowDefinitions="<#= rowsCountString #>" ColumnDefinitions="*">
        <ActivityIndicator Grid.Row="0" Grid.Column="0" 
                IsVisible="{Binding BindingContext.<#= IsSwitchingPropertyName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"
                IsRunning="{Binding BindingContext.<#= IsSwitchingPropertyName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"/>
        <!--<ProgressBar Grid.Row="0" Grid.Column="0" 
                         Progress="0.75"
                         IsVisible="{Binding BindingContext.IsSwitching, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"/>-->
<#
    {
        int curGridRow = 0;
        int curItem = -1;
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            ModelViewSerializable modelViewSerializable = GetModelViewByName(Context, featureItemSerializable.ViewName);
            if(modelViewSerializable == null) {
#>
<!-- Error: Could not find <#= featureItemSerializable.ViewName #> Model-View  by name-->
<#
                continue;
            }
            if(!isComponentGenerated(modelViewSerializable, featureItemSerializable.FileType)) {
#>
<!-- Error: <#= featureItemSerializable.FileType #> has not been generated yet for the View <#= featureItemSerializable.ViewName #> Model-View  by name -->
<#
                continue;
            }
            bool IsO2m = isO2mItem(AllowedFileTypes, featureItemSerializable.FileType);
            bool IsRouted = isRoutedItem(AllowedFileTypes, featureItemSerializable.FileType);
            string modelClassName = GetModelClassName(modelViewSerializable, featureItemSerializable.FileType);
            curItem++;
            if (curItem % 2 == 0) {
                curGridRow++;
#>
        <Grid Grid.Row="<#= curGridRow #>" Grid.Column="0"
            gridflex:GridFlex.HorizontalFlex="{Binding BindingContext.<#= FlexOnPropertyName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"
            RowDefinitions="Auto,Auto" ColumnDefinitions="*">
<#
            }
#>
            <prx:<#= ProxyUserControlClassName #> Grid.Row="<#= curItem % 2  #>" Grid.Column="0"
                    IsVisible="{Binding BindingContext.<#= VisiblePrefixPropertyName #><#= modelClassName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"
                    prism:RegionManager.RegionName="<#= modelClassName #><#= FtrUserControlClassName #>" 
                    <#= IsDestroyedPropertyName #>="{Binding <#= IsDestroyedPropertyName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}" 
                    <#= ContainerMenuItemsPropertyName #>="{Binding BindingContext.<#= ContainerMenuItemsPropertyName #><#= modelClassName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"
                    <#= ContainerMenuItemsCommandPropertyName #>="{Binding BindingContext.<#= OnContainerMenuItemsCommandPropertyName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"
<#
            if (!IsRouted) {
#>
                    <#= CaptionPropertyName #>="<#= modelViewSerializable.PluralTitle #>" 
<#
            }
#>
                    <#= ShowAddFilterBtnPropertyName #>="True" 
                    <#= ShowFilterPropertyName #>="True" 
                    <#= GridHeightPropertyName #>="{Binding BindingContext.<#= GridHeightPropertyName #><#= modelClassName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"
                    <#= FilterHeightPropertyName #>="{Binding BindingContext.<#= FilterHeightPropertyName #><#= modelClassName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"
<#
            if (IsO2m) {
#>
                    <#= GridHeightDetailPropertyName #>="{Binding BindingContext.<#= GridHeightPropertyName #><#= modelClassName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"
                    <#= FilterHeightDetailPropertyName #>="{Binding BindingContext.<#= FilterHeightPropertyName #><#= modelClassName #>, Mode=OneWay, Source={x:Reference fchrUsrCntrlRootNode}}"
                    <#= ShowFilterDetailPropertyName #>="True" 
                    <#= ShowAddFilterBtnDetailPropertyName #>="True" 
                    <#= CanAddPropertyName #>="False" 
                    <#= CanUpdPropertyName #>="False" 
                    <#= CanDelPropertyName #>="False" 
                    <#= CanAddDetailPropertyName #>="True" 
                    <#= CanUpdDetailPropertyName #>="True" 
                    <#= CanDelDetailPropertyName #>="True" 
<#
            } else {
#>
                    <#= CanAddPropertyName #>="True" 
                    <#= CanUpdPropertyName #>="True" 
                    <#= CanDelPropertyName #>="True" 
<#
            }
#>
                    />
<#
            if (curItem % 2 != 0) {
#>
            </Grid>
<#
            }

        }
        if (curItem % 2 == 0) {
#>
        </Grid>
<#
        }
    }
#>  
      <!-- does not work correctly
      </StackLayout>
      -->
      </Grid>
    </ScrollView>
</ContentPage>


<#+

    string GetRtOutletName(ModelViewSerializable model) {
        string result="rtoutlt";
        if (model == null) {
            return result;
        }
        return result + model.ViewName.ToLower();
    }
    string GetRdOutletName(ModelViewSerializable model) {
        string result="rdoutlt";
        if (model == null) {
            return result;
        }
        return result + model.ViewName.ToLower();
    }
    string GetModelComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","-component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetContextContextName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".context","-context");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetContextInterfaceName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","-interface");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    string GetContextFunctionName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    string GetModelInterfaceName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","-interface");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    bool isRoutedItem(AllowedFileTypesSerializable allowedFileTypes, string fileType) {
        if( (allowedFileTypes == null) || string.IsNullOrEmpty(fileType)) {
            return false;
        }
        if(allowedFileTypes.Items == null) {
            return false;
        }
        AllowedFileTypeSerializable rslt= allowedFileTypes.Items.Where(i => i.FileType == fileType).FirstOrDefault();
        if(rslt == null) {
            return false;
        }
        return rslt.IsRouted;
    }
    string GetAllFeatureDefaultIsExp(FeatureSerializable  Feature) {
        if (Feature == null) return "";
        if (Feature.FeatureItems == null) return "";
        string rslt = "false";
        if(Feature.FeatureItems.Count < 2) return rslt;
        for(int i = 1; i< Feature.FeatureItems.Count;i++) {
            rslt += ", false";
        }
        return rslt;
    }

    AllowedFileTypeSerializable GetAllowedFileType(AllowedFileTypesSerializable allowedFileTypes, string fileType) {
        if( (allowedFileTypes == null) || string.IsNullOrEmpty(fileType)) {
            return null;
        }
        if(allowedFileTypes.Items == null) {
            return null;
        }
        return allowedFileTypes.Items.Where(i => i.FileType == fileType).FirstOrDefault();
    }

    string GetFeatureComponentClassName(FeatureSerializable feature, string fileType) {
        string result="";
        if ((feature == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (feature.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            feature.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetFeatureNameSpace(FeatureSerializable feature, string fileType) {
        string result="";
        if ((feature == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (feature.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            feature.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }

    string GetFeatureProjectName(FeatureSerializable feature, string fileType) {
        string result="";
        if ((feature == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (feature.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            feature.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }


    string GetContextModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetContextModelProjectName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    string GetContextModelNameSpace(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    ModelViewSerializable GetModelViewByName(DbContextSerializable context, string viewName) {
        if ((context == null) || (string.IsNullOrEmpty(viewName))) {
            return null;
        }
        if (context.ModelViews == null) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
    }
    bool isComponentGenerated(ModelViewSerializable model, string fileType) {
        if(model == null) {
            return false;
        }
        if (model.CommonStaffs == null) {
            return false;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        return refItem != null;
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName;
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString().Replace(".xaml", "").Replace(".Xaml", "").Replace(".XAML", "");
    }
    string GetModelNameSpace(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem = 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        string delim = "";
        string filePath = "";
        string defaultNameSpace = "";
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            filePath = refItem.FileFolder.Replace("\\",".");
        }
        if(!string.IsNullOrEmpty(refItem.FileDefaultProjectNameSpace)) {
            defaultNameSpace = refItem.FileDefaultProjectNameSpace;
        }
        if (!(string.IsNullOrEmpty(defaultNameSpace) || string.IsNullOrEmpty(filePath))) {
            delim = ".";
        }
        return defaultNameSpace + delim + filePath;
    }
    string GetModelProjectName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileProject)) {
            return result;
        }
        string[] fnArr = refItem.FileProject.Split(new char[] {'\\'}, 100, System.StringSplitOptions.None); 
        string fn = fnArr[fnArr.Length - 1];

        return fn.Replace(".csproj","");
    }
    bool isO2mItem(AllowedFileTypesSerializable allowedFileTypes, string fileType) {
        if( (allowedFileTypes == null) || string.IsNullOrEmpty(fileType)) {
            return false;
        }
        if(allowedFileTypes.Items == null) {
            return false;
        }
        AllowedFileTypeSerializable rslt= allowedFileTypes.Items.Where(i => i.FileType == fileType).FirstOrDefault();
        if(rslt == null) {
            return false;
        }
        return rslt.IsO2m;
    }

#>
